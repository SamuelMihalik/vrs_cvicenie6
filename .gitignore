#*.ioc
#*.project
#*.cproject
#*.mxproject

#/Debug/
#/Release/
#/build/
#/out/

#*.o
#*.elf
#*.bin
#*.hex
#*.map
#*.list
#*.srec

#.settings/

moment vacsi ako suche trenie

temperature_h = HTS221_get_temperature();
    temperature_l = LPS25HB_get_temperature() + 273.15;
    pressure = LPS25HB_get_pressure();
	height = LPS25HB_get_height();
	humidity = HTS221_get_humidity();

    memset(formated_text, '\0', sizeof(formated_text));

    sprintf(formated_text, "%.1f,%.d,%.2f,%.2f\n", temperature_h, humidity, pressure, height);
	USART2_PutBuffer((uint8_t*)formated_text, strlen(formated_text));



HTS221_calibrate_humidity();
	HTS221_calibrate_temperature();


static void HTS221_calibrate_humidity(void) {
    uint8_t x0[2], x1[2], y[2];

    HTS221_read_array(HTS221_ADDRESS_H0_T0_OUT_L, x0, 2);
    HTS221_read_array(HTS221_ADDRESS_H1_T0_OUT_L, x1, 2);
    HTS221_read_array(HTS221_ADDRESS_H0_rH_x2, y, 2);


    int16_t calibration_x0 = (int16_t)(x0[1] << 8 | x0[0]);
    int16_t calibration_x1 = (int16_t)(x1[1] << 8 | x1[0]);
    int8_t calibration_y0 = y[0] / 2;
    int8_t calibration_y1 = y[1] / 2;

    humidity_calibration.k = (float)(calibration_y1 - calibration_y0) /
                             (float)(calibration_x1 - calibration_x0);
    humidity_calibration.q = (float)(calibration_y0 - humidity_calibration.k * calibration_x0);
}

static void HTS221_calibrate_temperature(void) {
    uint8_t x0[2], x1[2], y[2];

    HTS221_read_array(HTS221_ADDRESS_T0_OUT_L, x0, 2);
    HTS221_read_array(HTS221_ADDRESS_T1_OUT_L, x1, 2);
    HTS221_read_array(HTS221_ADDRESS_T0_degC_x8, y, 2);

    uint8_t t0_t1_msb = HTS221_read_byte(HTS221_ADDRESS_T1_T2_msb);

    int16_t calibration_x0 = (int16_t)(x0[1] << 8 | x0[0]);
    int16_t calibration_x1 = (int16_t)(x1[1] << 8 | x1[0]);

    uint16_t t0_degC = y[0];
    uint16_t t1_degC = y[1];

    t0_degC |= ((t0_t1_msb & 0x03) << 8);
    t1_degC |= ((t0_t1_msb & 0x0C) << 6);

    int8_t calibration_y0 = t0_degC / 8;
    int8_t calibration_y1 = t1_degC / 8;

    temperature_calibration.k = (float)(calibration_y1 - calibration_y0) /
                              (float)(calibration_x1 - calibration_x0);
    temperature_calibration.q = (float)(calibration_y0 - temperature_calibration.k * calibration_x0);
}


