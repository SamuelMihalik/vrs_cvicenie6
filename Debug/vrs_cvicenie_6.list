
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003944  08003944  00004944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ac  080039ac  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b4  080039b4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000234  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000770a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6c  00000000  00000000  0000c796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0000e708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000740  00000000  00000000  0000f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d0a2  00000000  00000000  0000f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1ff  00000000  00000000  0002c8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1082  00000000  00000000  00037af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d8b7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d18  00000000  00000000  000d8bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000db8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800392c 	.word	0x0800392c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800392c 	.word	0x0800392c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2f>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005f0:	bf24      	itt	cs
 80005f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005fa:	d90d      	bls.n	8000618 <__aeabi_d2f+0x30>
 80005fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000608:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800060c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000610:	bf08      	it	eq
 8000612:	f020 0001 	biceq.w	r0, r0, #1
 8000616:	4770      	bx	lr
 8000618:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800061c:	d121      	bne.n	8000662 <__aeabi_d2f+0x7a>
 800061e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000622:	bfbc      	itt	lt
 8000624:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000628:	4770      	bxlt	lr
 800062a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000632:	f1c2 0218 	rsb	r2, r2, #24
 8000636:	f1c2 0c20 	rsb	ip, r2, #32
 800063a:	fa10 f30c 	lsls.w	r3, r0, ip
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	bf18      	it	ne
 8000644:	f040 0001 	orrne.w	r0, r0, #1
 8000648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800064c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000654:	ea40 000c 	orr.w	r0, r0, ip
 8000658:	fa23 f302 	lsr.w	r3, r3, r2
 800065c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000660:	e7cc      	b.n	80005fc <__aeabi_d2f+0x14>
 8000662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000666:	d107      	bne.n	8000678 <__aeabi_d2f+0x90>
 8000668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800066c:	bf1e      	ittt	ne
 800066e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000672:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000676:	4770      	bxne	lr
 8000678:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800067c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000680:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	@ (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	@ (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	@ 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_DMA_Init+0x68>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_DMA_Init+0x68>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_DMA_Init+0x68>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007ba:	f7ff ff65 	bl	8000688 <__NVIC_GetPriorityGrouping>
 80007be:	4603      	mov	r3, r0
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ffb5 	bl	8000734 <NVIC_EncodePriority>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4619      	mov	r1, r3
 80007ce:	2010      	movs	r0, #16
 80007d0:	f7ff ff86 	bl	80006e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007d4:	2010      	movs	r0, #16
 80007d6:	f7ff ff65 	bl	80006a4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007da:	f7ff ff55 	bl	8000688 <__NVIC_GetPriorityGrouping>
 80007de:	4603      	mov	r3, r0
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffa5 	bl	8000734 <NVIC_EncodePriority>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4619      	mov	r1, r3
 80007ee:	2011      	movs	r0, #17
 80007f0:	f7ff ff76 	bl	80006e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007f4:	2011      	movs	r0, #17
 80007f6:	f7ff ff55 	bl	80006a4 <__NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	4907      	ldr	r1, [pc, #28]	@ (8000834 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4313      	orrs	r3, r2
 800081a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4013      	ands	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800083c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000840:	f7ff ffe2 	bl	8000808 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000844:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000848:	f7ff ffde 	bl	8000808 <LL_AHB1_GRP1_EnableClock>

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <__NVIC_GetPriorityGrouping>:
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <__NVIC_EnableIRQ+0x38>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	@ (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	@ 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	@ 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f043 0201 	orr.w	r2, r3, #1
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80009d6:	f023 0306 	bic.w	r3, r3, #6
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	430a      	orrs	r2, r1
 80009e0:	431a      	orrs	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	60da      	str	r2, [r3, #12]
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60da      	str	r2, [r3, #12]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <LL_I2C_EnableIT_TX>:
  * @rmtoll CR1          TXIE          LL_I2C_EnableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f043 0202 	orr.w	r2, r3, #2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f043 0204 	orr.w	r2, r3, #4
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f023 0204 	bic.w	r2, r3, #4
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d101      	bne.n	8000a8a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d101      	bne.n	8000ab0 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	2b20      	cmp	r3, #32
 8000ad0:	d101      	bne.n	8000ad6 <LL_I2C_IsActiveFlag_STOP+0x18>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af4:	2b40      	cmp	r3, #64	@ 0x40
 8000af6:	d101      	bne.n	8000afc <LL_I2C_IsActiveFlag_TC+0x18>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <LL_I2C_IsActiveFlag_TC+0x1a>
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f043 0210 	orr.w	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	61da      	str	r2, [r3, #28]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f043 0220 	orr.w	r2, r3, #32
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	61da      	str	r2, [r3, #28]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	605a      	str	r2, [r3, #4]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000b86:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8000b90:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	0d5b      	lsrs	r3, r3, #21
 8000ba8:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <LL_I2C_HandleTransfer+0x5c>)
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	03ff7bff 	.word	0x03ff7bff

08000bcc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd8:	b2db      	uxtb	r3, r3
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000bf2:	78fa      	ldrb	r2, [r7, #3]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_AHB1_GRP1_EnableClock>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	4907      	ldr	r1, [pc, #28]	@ (8000c30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c1a:	695a      	ldr	r2, [r3, #20]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c3e:	69da      	ldr	r2, [r3, #28]
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c4a:	69da      	ldr	r2, [r3, #28]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	@ 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c8e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000c92:	f7ff ffb7 	bl	8000c04 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4821      	ldr	r0, [pc, #132]	@ (8000d38 <MX_I2C1_Init+0xd4>)
 8000cb4:	f001 fa92 	bl	80021dc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000cb8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000cbc:	f7ff ffba 	bl	8000c34 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN I2C1_Init 1 */
    NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cc0:	f7ff fdc6 	bl	8000850 <__NVIC_GetPriorityGrouping>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fe16 	bl	80008fc <NVIC_EncodePriority>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	201f      	movs	r0, #31
 8000cd6:	f7ff fde7 	bl	80008a8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cda:	201f      	movs	r0, #31
 8000cdc:	f7ff fdc6 	bl	800086c <__NVIC_EnableIRQ>

    /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000ce0:	4816      	ldr	r0, [pc, #88]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000ce2:	f7ff ff32 	bl	8000b4a <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000ce6:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000ce8:	f7ff fe83 	bl	80009f2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000cee:	f7ff fe58 	bl	80009a2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000cf2:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000cf4:	f7ff fe45 	bl	8000982 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <MX_I2C1_Init+0xdc>)
 8000cfe:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4808      	ldr	r0, [pc, #32]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000d1c:	f001 fb71 	bl	8002402 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000d26:	f7ff fe4c 	bl	80009c2 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_I2C1_Init+0xd8>)
 8000d2c:	f7ff fe19 	bl	8000962 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3738      	adds	r7, #56	@ 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	2000090e 	.word	0x2000090e

08000d44 <i2c_master_read>:

/* USER CODE BEGIN 1 */
void i2c_master_read(uint8_t slave_address, uint8_t register_address, uint8_t* data, uint8_t size) {
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	603a      	str	r2, [r7, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	460b      	mov	r3, r1
 8000d54:	71bb      	strb	r3, [r7, #6]
 8000d56:	4613      	mov	r3, r2
 8000d58:	717b      	strb	r3, [r7, #5]
	LL_I2C_EnableIT_RX(I2C1);
 8000d5a:	482c      	ldr	r0, [pc, #176]	@ (8000e0c <i2c_master_read+0xc8>)
 8000d5c:	f7ff fe69 	bl	8000a32 <LL_I2C_EnableIT_RX>

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8000d60:	79f9      	ldrb	r1, [r7, #7]
 8000d62:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <i2c_master_read+0xcc>)
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	2300      	movs	r3, #0
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4827      	ldr	r0, [pc, #156]	@ (8000e0c <i2c_master_read+0xc8>)
 8000d70:	f7ff fefc 	bl	8000b6c <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 8000d74:	bf00      	nop
 8000d76:	4825      	ldr	r0, [pc, #148]	@ (8000e0c <i2c_master_read+0xc8>)
 8000d78:	f7ff fe7b 	bl	8000a72 <LL_I2C_IsActiveFlag_TXIS>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <i2c_master_read+0x32>
	LL_I2C_TransmitData8(I2C1, register_address);
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4821      	ldr	r0, [pc, #132]	@ (8000e0c <i2c_master_read+0xc8>)
 8000d88:	f7ff ff2d 	bl	8000be6 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TC(I2C1));
 8000d8c:	bf00      	nop
 8000d8e:	481f      	ldr	r0, [pc, #124]	@ (8000e0c <i2c_master_read+0xc8>)
 8000d90:	f7ff fea8 	bl	8000ae4 <LL_I2C_IsActiveFlag_TC>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f9      	beq.n	8000d8e <i2c_master_read+0x4a>

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000d9a:	79f9      	ldrb	r1, [r7, #7]
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <i2c_master_read+0xd0>)
 8000da0:	9201      	str	r2, [sp, #4]
 8000da2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4818      	ldr	r0, [pc, #96]	@ (8000e0c <i2c_master_read+0xc8>)
 8000dac:	f7ff fede 	bl	8000b6c <LL_I2C_HandleTransfer>

	for (uint8_t i = 0; i < size; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e011      	b.n	8000dda <i2c_master_read+0x96>
	{
		while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 8000db6:	bf00      	nop
 8000db8:	4814      	ldr	r0, [pc, #80]	@ (8000e0c <i2c_master_read+0xc8>)
 8000dba:	f7ff fe6d 	bl	8000a98 <LL_I2C_IsActiveFlag_RXNE>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f9      	beq.n	8000db8 <i2c_master_read+0x74>
		data[i] = LL_I2C_ReceiveData8(I2C1);
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	18d4      	adds	r4, r2, r3
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <i2c_master_read+0xc8>)
 8000dcc:	f7ff fefe 	bl	8000bcc <LL_I2C_ReceiveData8>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < size; i++)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	797b      	ldrb	r3, [r7, #5]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3e9      	bcc.n	8000db6 <i2c_master_read+0x72>
	}

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8000de2:	bf00      	nop
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <i2c_master_read+0xc8>)
 8000de6:	f7ff fe6a 	bl	8000abe <LL_I2C_IsActiveFlag_STOP>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f9      	beq.n	8000de4 <i2c_master_read+0xa0>

	LL_I2C_DisableIT_RX(I2C1);
 8000df0:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <i2c_master_read+0xc8>)
 8000df2:	f7ff fe2e 	bl	8000a52 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <i2c_master_read+0xc8>)
 8000df8:	f7ff fe97 	bl	8000b2a <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <i2c_master_read+0xc8>)
 8000dfe:	f7ff fe84 	bl	8000b0a <LL_I2C_ClearFlag_NACK>
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd90      	pop	{r4, r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	80002000 	.word	0x80002000
 8000e14:	80002400 	.word	0x80002400

08000e18 <i2c_master_write>:

void i2c_master_write(uint8_t slave_address, uint8_t register_address, uint8_t* data, uint8_t size) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	603a      	str	r2, [r7, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	460b      	mov	r3, r1
 8000e28:	71bb      	strb	r3, [r7, #6]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	717b      	strb	r3, [r7, #5]
    LL_I2C_EnableIT_TX(I2C1);
 8000e2e:	4827      	ldr	r0, [pc, #156]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e30:	f7ff fdef 	bl	8000a12 <LL_I2C_EnableIT_TX>

    LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000e34:	79f9      	ldrb	r1, [r7, #7]
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <i2c_master_write+0xb8>)
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2200      	movs	r2, #0
 8000e44:	4821      	ldr	r0, [pc, #132]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e46:	f7ff fe91 	bl	8000b6c <LL_I2C_HandleTransfer>
    while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 8000e4a:	bf00      	nop
 8000e4c:	481f      	ldr	r0, [pc, #124]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e4e:	f7ff fe10 	bl	8000a72 <LL_I2C_IsActiveFlag_TXIS>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f9      	beq.n	8000e4c <i2c_master_write+0x34>

    LL_I2C_TransmitData8(I2C1, register_address);
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481b      	ldr	r0, [pc, #108]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e5e:	f7ff fec2 	bl	8000be6 <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 8000e62:	bf00      	nop
 8000e64:	4819      	ldr	r0, [pc, #100]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e66:	f7ff fe04 	bl	8000a72 <LL_I2C_IsActiveFlag_TXIS>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f9      	beq.n	8000e64 <i2c_master_write+0x4c>

    for (uint8_t i = 0; i < size; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e011      	b.n	8000e9a <i2c_master_write+0x82>
		while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 8000e76:	bf00      	nop
 8000e78:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e7a:	f7ff fdfa 	bl	8000a72 <LL_I2C_IsActiveFlag_TXIS>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f9      	beq.n	8000e78 <i2c_master_write+0x60>
		LL_I2C_TransmitData8(I2C1, data[i]);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <i2c_master_write+0xb4>)
 8000e90:	f7ff fea9 	bl	8000be6 <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < size; i++) {
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	3301      	adds	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e9      	bcc.n	8000e76 <i2c_master_write+0x5e>
    }

    while (!LL_I2C_IsActiveFlag_TC(I2C1));
 8000ea2:	bf00      	nop
 8000ea4:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <i2c_master_write+0xb4>)
 8000ea6:	f7ff fe1d 	bl	8000ae4 <LL_I2C_IsActiveFlag_TC>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f9      	beq.n	8000ea4 <i2c_master_write+0x8c>

    LL_I2C_DisableIT_RX(I2C1);
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <i2c_master_write+0xb4>)
 8000eb2:	f7ff fdce 	bl	8000a52 <LL_I2C_DisableIT_RX>
    LL_I2C_ClearFlag_STOP(I2C1);
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <i2c_master_write+0xb4>)
 8000eb8:	f7ff fe37 	bl	8000b2a <LL_I2C_ClearFlag_STOP>
    LL_I2C_ClearFlag_NACK(I2C1);
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <i2c_master_write+0xb4>)
 8000ebe:	f7ff fe24 	bl	8000b0a <LL_I2C_ClearFlag_NACK>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	80002000 	.word	0x80002000

08000ed4 <__NVIC_SetPriorityGrouping>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <LL_RCC_HSI_Enable+0x1c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <LL_RCC_HSI_Enable+0x1c>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <LL_RCC_HSI_IsReady+0x20>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40021000 	.word	0x40021000

08000f60 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4904      	ldr	r1, [pc, #16]	@ (8000f88 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <LL_RCC_SetSysClkSource+0x24>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 0203 	bic.w	r2, r3, #3
 8000f9c:	4904      	ldr	r1, [pc, #16]	@ (8000fb0 <LL_RCC_SetSysClkSource+0x24>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <LL_RCC_GetSysClkSource+0x18>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fe0:	4904      	ldr	r1, [pc, #16]	@ (8000ff4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001008:	4904      	ldr	r1, [pc, #16]	@ (800101c <LL_RCC_SetAPB1Prescaler+0x24>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000

08001020 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <LL_RCC_SetAPB2Prescaler+0x24>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001030:	4904      	ldr	r1, [pc, #16]	@ (8001044 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000

08001048 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <LL_RCC_SetI2CClockSource+0x2c>)
 8001052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	0e1b      	lsrs	r3, r3, #24
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001062:	4904      	ldr	r1, [pc, #16]	@ (8001074 <LL_RCC_SetI2CClockSource+0x2c>)
 8001064:	4313      	orrs	r3, r2
 8001066:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000

08001078 <LL_APB1_GRP1_EnableClock>:
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001082:	69da      	ldr	r2, [r3, #28]
 8001084:	4907      	ldr	r1, [pc, #28]	@ (80010a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4313      	orrs	r3, r2
 800108a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800108e:	69da      	ldr	r2, [r3, #28]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000

080010a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010be:	699a      	ldr	r2, [r3, #24]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4013      	ands	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000

080010d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <LL_FLASH_SetLatency+0x24>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 0207 	bic.w	r2, r3, #7
 80010e8:	4904      	ldr	r1, [pc, #16]	@ (80010fc <LL_FLASH_SetLatency+0x24>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40022000 	.word	0x40022000

08001100 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <LL_FLASH_GetLatency+0x18>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0307 	and.w	r3, r3, #7
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000
 800111c:	00000000 	.word	0x00000000

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001124:	b087      	sub	sp, #28
 8001126:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ffbd 	bl	80010a8 <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800112e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001132:	f7ff ffa1 	bl	8001078 <LL_APB1_GRP1_EnableClock>

	  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff fecc 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f000 fe0a 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f888 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f7ff fb78 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f7ff fb28 	bl	800079c <MX_DMA_Init>
  MX_I2C1_Init();
 800114c:	f7ff fd8a 	bl	8000c64 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001150:	f000 fca8 	bl	8001aa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HTS221_Init(i2c_master_read, i2c_master_write);
 8001154:	4936      	ldr	r1, [pc, #216]	@ (8001230 <main+0x110>)
 8001156:	4837      	ldr	r0, [pc, #220]	@ (8001234 <main+0x114>)
 8001158:	f001 fca8 	bl	8002aac <HTS221_Init>
  LPS25HB_Init(i2c_master_read, i2c_master_write);
 800115c:	4934      	ldr	r1, [pc, #208]	@ (8001230 <main+0x110>)
 800115e:	4835      	ldr	r0, [pc, #212]	@ (8001234 <main+0x114>)
 8001160:	f001 fe74 	bl	8002e4c <LPS25HB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LL_mDelay(100);
 8001164:	2064      	movs	r0, #100	@ 0x64
 8001166:	f001 fc0b 	bl	8002980 <LL_mDelay>
    temperature_h = HTS221_get_temperature();
 800116a:	f001 fd67 	bl	8002c3c <HTS221_get_temperature>
 800116e:	4603      	mov	r3, r0
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <main+0x118>)
 800117a:	edc3 7a00 	vstr	s15, [r3]
    temperature_l = LPS25HB_get_temperature() + 273.15;
 800117e:	f001 fee9 	bl	8002f54 <LPS25HB_get_temperature>
 8001182:	ee10 3a10 	vmov	r3, s0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9d6 	bl	8000538 <__aeabi_f2d>
 800118c:	a326      	add	r3, pc, #152	@ (adr r3, 8001228 <main+0x108>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f873 	bl	800027c <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fa23 	bl	80005e8 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <main+0x11c>)
 80011a6:	6013      	str	r3, [r2, #0]
    pressure = LPS25HB_get_pressure();
 80011a8:	f001 fea8 	bl	8002efc <LPS25HB_get_pressure>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <main+0x120>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
	height = LPS25HB_get_height();
 80011b6:	f001 fef9 	bl	8002fac <LPS25HB_get_height>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <main+0x124>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	humidity = HTS221_get_humidity();
 80011c4:	f001 fcb4 	bl	8002b30 <HTS221_get_humidity>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <main+0x128>)
 80011ce:	701a      	strb	r2, [r3, #0]

    memset(formated_text, '\0', sizeof(formated_text));
 80011d0:	221e      	movs	r2, #30
 80011d2:	2100      	movs	r1, #0
 80011d4:	481d      	ldr	r0, [pc, #116]	@ (800124c <main+0x12c>)
 80011d6:	f001 ff29 	bl	800302c <memset>

    sprintf(formated_text, "%.1f,%.d,%.2f,%.2f\n", temperature_h, humidity, pressure, height);
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <main+0x118>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9aa 	bl	8000538 <__aeabi_f2d>
 80011e4:	4680      	mov	r8, r0
 80011e6:	4689      	mov	r9, r1
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <main+0x128>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461e      	mov	r6, r3
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <main+0x120>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9a0 	bl	8000538 <__aeabi_f2d>
 80011f8:	4604      	mov	r4, r0
 80011fa:	460d      	mov	r5, r1
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <main+0x124>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f999 	bl	8000538 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800120e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001212:	9600      	str	r6, [sp, #0]
 8001214:	4642      	mov	r2, r8
 8001216:	464b      	mov	r3, r9
 8001218:	490d      	ldr	r1, [pc, #52]	@ (8001250 <main+0x130>)
 800121a:	480c      	ldr	r0, [pc, #48]	@ (800124c <main+0x12c>)
 800121c:	f001 fee6 	bl	8002fec <siprintf>
    LL_mDelay(100);
 8001220:	bf00      	nop
 8001222:	e79f      	b.n	8001164 <main+0x44>
 8001224:	f3af 8000 	nop.w
 8001228:	66666666 	.word	0x66666666
 800122c:	40711266 	.word	0x40711266
 8001230:	08000e19 	.word	0x08000e19
 8001234:	08000d45 	.word	0x08000d45
 8001238:	2000007c 	.word	0x2000007c
 800123c:	20000080 	.word	0x20000080
 8001240:	20000084 	.word	0x20000084
 8001244:	20000088 	.word	0x20000088
 8001248:	20000078 	.word	0x20000078
 800124c:	2000008c 	.word	0x2000008c
 8001250:	08003944 	.word	0x08003944

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff3d 	bl	80010d8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800125e:	bf00      	nop
 8001260:	f7ff ff4e 	bl	8001100 <LL_FLASH_GetLatency>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1fa      	bne.n	8001260 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800126a:	f7ff fe57 	bl	8000f1c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800126e:	bf00      	nop
 8001270:	f7ff fe64 	bl	8000f3c <LL_RCC_HSI_IsReady>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d1fa      	bne.n	8001270 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800127a:	2010      	movs	r0, #16
 800127c:	f7ff fe70 	bl	8000f60 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fea5 	bl	8000fd0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff feb6 	bl	8000ff8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fec7 	bl	8001020 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fe7a 	bl	8000f8c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001298:	bf00      	nop
 800129a:	f7ff fe8b 	bl	8000fb4 <LL_RCC_GetSysClkSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1fa      	bne.n	800129a <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80012a4:	4808      	ldr	r0, [pc, #32]	@ (80012c8 <SystemClock_Config+0x74>)
 80012a6:	f001 fb91 	bl	80029cc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80012aa:	200f      	movs	r0, #15
 80012ac:	f000 fd68 	bl	8001d80 <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012b6:	f000 f809 	bl	80012cc <Error_Handler>
  }
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80012ba:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80012be:	f7ff fec3 	bl	8001048 <LL_RCC_SetI2CClockSource>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	007a1200 	.word	0x007a1200

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_MspInit+0x44>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <HAL_MspInit+0x44>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_MspInit+0x44>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_MspInit+0x44>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 fd33 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f001 fe28 	bl	800303c <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20003000 	.word	0x20003000
 8001418:	00000400 	.word	0x00000400
 800141c:	200000ac 	.word	0x200000ac
 8001420:	20000290 	.word	0x20000290

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	@ (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	@ (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	@ (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	@ 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <LL_AHB1_GRP1_EnableClock>:
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <LL_APB1_GRP1_EnableClock>:
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	4907      	ldr	r1, [pc, #28]	@ (80015b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4313      	orrs	r3, r2
 800159e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <LL_DMA_EnableChannel+0x3c>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	3a01      	subs	r2, #1
 80015da:	4907      	ldr	r1, [pc, #28]	@ (80015f8 <LL_DMA_EnableChannel+0x3c>)
 80015dc:	5c8a      	ldrb	r2, [r1, r2]
 80015de:	4611      	mov	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	440a      	add	r2, r1
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6013      	str	r3, [r2, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	08003970 	.word	0x08003970

080015fc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LL_DMA_SetDataTransferDirection+0x48>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800161c:	f023 0310 	bic.w	r3, r3, #16
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	3a01      	subs	r2, #1
 8001624:	4907      	ldr	r1, [pc, #28]	@ (8001644 <LL_DMA_SetDataTransferDirection+0x48>)
 8001626:	5c8a      	ldrb	r2, [r1, r2]
 8001628:	4611      	mov	r1, r2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	440a      	add	r2, r1
 800162e:	4611      	mov	r1, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	08003970 	.word	0x08003970

08001648 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001666:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	08003970 	.word	0x08003970

08001678 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3b01      	subs	r3, #1
 8001688:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <LL_DMA_SetMode+0x44>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 0220 	bic.w	r2, r3, #32
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	3b01      	subs	r3, #1
 800169c:	4907      	ldr	r1, [pc, #28]	@ (80016bc <LL_DMA_SetMode+0x44>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	4619      	mov	r1, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	440b      	add	r3, r1
 80016a6:	4619      	mov	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
             Mode);
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	08003970 	.word	0x08003970

080016c0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <LL_DMA_SetPeriphIncMode+0x44>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	461a      	mov	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <LL_DMA_SetPeriphIncMode+0x44>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	4619      	mov	r1, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	440b      	add	r3, r1
 80016ee:	4619      	mov	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	08003970 	.word	0x08003970

08001708 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3b01      	subs	r3, #1
 8001718:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <LL_DMA_SetMemoryIncMode+0x44>)
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3b01      	subs	r3, #1
 800172c:	4907      	ldr	r1, [pc, #28]	@ (800174c <LL_DMA_SetMemoryIncMode+0x44>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	4619      	mov	r1, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	440b      	add	r3, r1
 8001736:	4619      	mov	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	08003970 	.word	0x08003970

08001750 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <LL_DMA_SetPeriphSize+0x44>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3b01      	subs	r3, #1
 8001774:	4907      	ldr	r1, [pc, #28]	@ (8001794 <LL_DMA_SetPeriphSize+0x44>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	4619      	mov	r1, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	440b      	add	r3, r1
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	08003970 	.word	0x08003970

08001798 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <LL_DMA_SetMemorySize+0x44>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4907      	ldr	r1, [pc, #28]	@ (80017dc <LL_DMA_SetMemorySize+0x44>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	4619      	mov	r1, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	440b      	add	r3, r1
 80017c6:	4619      	mov	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	08003970 	.word	0x08003970

080017e0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3b01      	subs	r3, #1
 8001804:	4907      	ldr	r1, [pc, #28]	@ (8001824 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	4619      	mov	r1, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	440b      	add	r3, r1
 800180e:	4619      	mov	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	08003970 	.word	0x08003970

08001828 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <LL_DMA_SetDataLength+0x44>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	461a      	mov	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4413      	add	r3, r2
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	3a01      	subs	r2, #1
 800184c:	4907      	ldr	r1, [pc, #28]	@ (800186c <LL_DMA_SetDataLength+0x44>)
 800184e:	5c8a      	ldrb	r2, [r1, r2]
 8001850:	4611      	mov	r1, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	440a      	add	r2, r1
 8001856:	4611      	mov	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	08003970 	.word	0x08003970

08001870 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b10      	cmp	r3, #16
 8001882:	d114      	bne.n	80018ae <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <LL_DMA_ConfigAddresses+0x74>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <LL_DMA_ConfigAddresses+0x74>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	461a      	mov	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80018ac:	e013      	b.n	80018d6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a0c      	ldr	r2, [pc, #48]	@ (80018e4 <LL_DMA_ConfigAddresses+0x74>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <LL_DMA_ConfigAddresses+0x74>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	60d3      	str	r3, [r2, #12]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	08003970 	.word	0x08003970

080018e8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	4a06      	ldr	r2, [pc, #24]	@ (8001914 <LL_DMA_SetPeriphAddress+0x2c>)
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	461a      	mov	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6093      	str	r3, [r2, #8]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	08003970 	.word	0x08003970

08001918 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <LL_DMA_EnableIT_TE+0x3c>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	3a01      	subs	r2, #1
 8001936:	4907      	ldr	r1, [pc, #28]	@ (8001954 <LL_DMA_EnableIT_TE+0x3c>)
 8001938:	5c8a      	ldrb	r2, [r1, r2]
 800193a:	4611      	mov	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	440a      	add	r2, r1
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	08003970 	.word	0x08003970

08001958 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3308      	adds	r3, #8
 80019b0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	e853 3f00 	ldrex	r3, [r3]
 80019b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3308      	adds	r3, #8
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	61ba      	str	r2, [r7, #24]
 80019ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019cc:	6979      	ldr	r1, [r7, #20]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	e841 2300 	strex	r3, r2, [r1]
 80019d4:	613b      	str	r3, [r7, #16]
   return(result);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e7      	bne.n	80019ac <LL_USART_DisableIT_CTS+0x8>
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b089      	sub	sp, #36	@ 0x24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3308      	adds	r3, #8
 80019f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	e853 3f00 	ldrex	r3, [r3]
 80019fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	61ba      	str	r2, [r7, #24]
 8001a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	e841 2300 	strex	r3, r2, [r1]
 8001a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1e7      	bne.n	80019f2 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3724      	adds	r7, #36	@ 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	e853 3f00 	ldrex	r3, [r3]
 8001a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3308      	adds	r3, #8
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	61ba      	str	r2, [r7, #24]
 8001a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	e841 2300 	strex	r3, r2, [r1]
 8001a60:	613b      	str	r3, [r7, #16]
   return(result);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e7      	bne.n	8001a38 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3328      	adds	r3, #40	@ 0x28
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e002      	b.n	8001a94 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3324      	adds	r3, #36	@ 0x24
 8001a92:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001a94:	68fb      	ldr	r3, [r7, #12]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b090      	sub	sp, #64	@ 0x40
 8001aa8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001ace:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001ad2:	f7ff fd5b 	bl	800158c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ad6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001ada:	f7ff fd3f 	bl	800155c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001ade:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001ae2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001af4:	2307      	movs	r3, #7
 8001af6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f000 fb6c 	bl	80021dc <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2106      	movs	r1, #6
 8001b08:	487a      	ldr	r0, [pc, #488]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b0a:	f7ff fd77 	bl	80015fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001b0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b12:	2106      	movs	r1, #6
 8001b14:	4877      	ldr	r0, [pc, #476]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b16:	f7ff fe63 	bl	80017e0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2106      	movs	r1, #6
 8001b1e:	4875      	ldr	r0, [pc, #468]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b20:	f7ff fdaa 	bl	8001678 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2106      	movs	r1, #6
 8001b28:	4872      	ldr	r0, [pc, #456]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b2a:	f7ff fdc9 	bl	80016c0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	2106      	movs	r1, #6
 8001b32:	4870      	ldr	r0, [pc, #448]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b34:	f7ff fde8 	bl	8001708 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2106      	movs	r1, #6
 8001b3c:	486d      	ldr	r0, [pc, #436]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b3e:	f7ff fe07 	bl	8001750 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2106      	movs	r1, #6
 8001b46:	486b      	ldr	r0, [pc, #428]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b48:	f7ff fe26 	bl	8001798 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	2107      	movs	r1, #7
 8001b50:	4868      	ldr	r0, [pc, #416]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b52:	f7ff fd53 	bl	80015fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001b56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b5a:	2107      	movs	r1, #7
 8001b5c:	4865      	ldr	r0, [pc, #404]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b5e:	f7ff fe3f 	bl	80017e0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_CIRCULAR);
 8001b62:	2220      	movs	r2, #32
 8001b64:	2107      	movs	r1, #7
 8001b66:	4863      	ldr	r0, [pc, #396]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b68:	f7ff fd86 	bl	8001678 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2107      	movs	r1, #7
 8001b70:	4860      	ldr	r0, [pc, #384]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b72:	f7ff fda5 	bl	80016c0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	2107      	movs	r1, #7
 8001b7a:	485e      	ldr	r0, [pc, #376]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b7c:	f7ff fdc4 	bl	8001708 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2107      	movs	r1, #7
 8001b84:	485b      	ldr	r0, [pc, #364]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b86:	f7ff fde3 	bl	8001750 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2107      	movs	r1, #7
 8001b8e:	4859      	ldr	r0, [pc, #356]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001b90:	f7ff fe02 	bl	8001798 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b94:	f7ff fc58 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fca8 	bl	80014f4 <NVIC_EncodePriority>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	2026      	movs	r0, #38	@ 0x26
 8001baa:	f7ff fc79 	bl	80014a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001bae:	2026      	movs	r0, #38	@ 0x26
 8001bb0:	f7ff fc58 	bl	8001464 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2106      	movs	r1, #6
 8001bb8:	484e      	ldr	r0, [pc, #312]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001bba:	f7ff fd1f 	bl	80015fc <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001bbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bc2:	2106      	movs	r1, #6
 8001bc4:	484b      	ldr	r0, [pc, #300]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001bc6:	f7ff fe0b 	bl	80017e0 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8001bca:	2220      	movs	r2, #32
 8001bcc:	2106      	movs	r1, #6
 8001bce:	4849      	ldr	r0, [pc, #292]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001bd0:	f7ff fd52 	bl	8001678 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2106      	movs	r1, #6
 8001bd8:	4846      	ldr	r0, [pc, #280]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001bda:	f7ff fd71 	bl	80016c0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	2106      	movs	r1, #6
 8001be2:	4844      	ldr	r0, [pc, #272]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001be4:	f7ff fd90 	bl	8001708 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2106      	movs	r1, #6
 8001bec:	4841      	ldr	r0, [pc, #260]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001bee:	f7ff fdaf 	bl	8001750 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2106      	movs	r1, #6
 8001bf6:	483f      	ldr	r0, [pc, #252]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001bf8:	f7ff fdce 	bl	8001798 <LL_DMA_SetMemorySize>

	LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	483e      	ldr	r0, [pc, #248]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001c00:	f7ff ff39 	bl	8001a76 <LL_USART_DMA_GetRegAddr>
 8001c04:	4604      	mov	r4, r0
 8001c06:	4d3d      	ldr	r5, [pc, #244]	@ (8001cfc <MX_USART2_UART_Init+0x258>)
 8001c08:	2106      	movs	r1, #6
 8001c0a:	483a      	ldr	r0, [pc, #232]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c0c:	f7ff fd1c 	bl	8001648 <LL_DMA_GetDataTransferDirection>
 8001c10:	4603      	mov	r3, r0
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	462b      	mov	r3, r5
 8001c16:	4622      	mov	r2, r4
 8001c18:	2106      	movs	r1, #6
 8001c1a:	4836      	ldr	r0, [pc, #216]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c1c:	f7ff fe28 	bl	8001870 <LL_DMA_ConfigAddresses>
						LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
						(uint32_t)bufferUSART2dma,
						LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	2106      	movs	r1, #6
 8001c24:	4833      	ldr	r0, [pc, #204]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c26:	f7ff fdff 	bl	8001828 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001c2a:	2106      	movs	r1, #6
 8001c2c:	4831      	ldr	r0, [pc, #196]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c2e:	f7ff fcc5 	bl	80015bc <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 8001c32:	4831      	ldr	r0, [pc, #196]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001c34:	f7ff fed9 	bl	80019ea <LL_USART_EnableDMAReq_RX>

	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001c38:	2210      	movs	r2, #16
 8001c3a:	2107      	movs	r1, #7
 8001c3c:	482d      	ldr	r0, [pc, #180]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c3e:	f7ff fcdd 	bl	80015fc <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001c42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c46:	2107      	movs	r1, #7
 8001c48:	482a      	ldr	r0, [pc, #168]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c4a:	f7ff fdc9 	bl	80017e0 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2107      	movs	r1, #7
 8001c52:	4828      	ldr	r0, [pc, #160]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c54:	f7ff fd10 	bl	8001678 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2107      	movs	r1, #7
 8001c5c:	4825      	ldr	r0, [pc, #148]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c5e:	f7ff fd2f 	bl	80016c0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001c62:	2280      	movs	r2, #128	@ 0x80
 8001c64:	2107      	movs	r1, #7
 8001c66:	4823      	ldr	r0, [pc, #140]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c68:	f7ff fd4e 	bl	8001708 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2107      	movs	r1, #7
 8001c70:	4820      	ldr	r0, [pc, #128]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c72:	f7ff fd6d 	bl	8001750 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2107      	movs	r1, #7
 8001c7a:	481e      	ldr	r0, [pc, #120]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c7c:	f7ff fd8c 	bl	8001798 <LL_DMA_SetMemorySize>

	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001c80:	2100      	movs	r1, #0
 8001c82:	481d      	ldr	r0, [pc, #116]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001c84:	f7ff fef7 	bl	8001a76 <LL_USART_DMA_GetRegAddr>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2107      	movs	r1, #7
 8001c8e:	4819      	ldr	r0, [pc, #100]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c90:	f7ff fe2a 	bl	80018e8 <LL_DMA_SetPeriphAddress>
	LL_USART_EnableDMAReq_TX(USART2);
 8001c94:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001c96:	f7ff fecb 	bl	8001a30 <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	4815      	ldr	r0, [pc, #84]	@ (8001cf4 <MX_USART2_UART_Init+0x250>)
 8001c9e:	f7ff fe3b 	bl	8001918 <LL_DMA_EnableIT_TE>
	NVIC_SetPriority(USART2_IRQn, 0);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2026      	movs	r0, #38	@ 0x26
 8001ca6:	f7ff fbfb 	bl	80014a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001caa:	2026      	movs	r0, #38	@ 0x26
 8001cac:	f7ff fbda 	bl	8001464 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001cb0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001cb4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001cd6:	f000 fde7 	bl	80028a8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001cda:	4807      	ldr	r0, [pc, #28]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001cdc:	f7ff fe62 	bl	80019a4 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001ce2:	f7ff fe49 	bl	8001978 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001ce6:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MX_USART2_UART_Init+0x254>)
 8001ce8:	f7ff fe36 	bl	8001958 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3738      	adds	r7, #56	@ 0x38
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	200000b0 	.word	0x200000b0

08001d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d04:	f7ff fb8e 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	@ (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	@ (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f001 f98b 	bl	8003048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d32:	f7ff f9f5 	bl	8001120 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d44:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 8001d48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d4c:	20000290 	.word	0x20000290

08001d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_2_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_Init+0x28>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <HAL_Init+0x28>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f901 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fab2 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f90b 	bl	8001fba <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f8e1 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000130 	.word	0x20000130

08001e08 <__NVIC_SetPriorityGrouping>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_SetPriority>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff47 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff5c 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffb0 	bl	8001f28 <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b089      	sub	sp, #36	@ 0x24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	613b      	str	r3, [r7, #16]
  return result;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	61bb      	str	r3, [r7, #24]
  return result;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	431a      	orrs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	3724      	adds	r7, #36	@ 0x24
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	431a      	orrs	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	613b      	str	r3, [r7, #16]
  return result;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2103      	movs	r1, #3
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	61bb      	str	r3, [r7, #24]
  return result;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80020b2:	bf00      	nop
 80020b4:	3724      	adds	r7, #36	@ 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80020be:	b480      	push	{r7}
 80020c0:	b089      	sub	sp, #36	@ 0x24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	613b      	str	r3, [r7, #16]
  return result;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2103      	movs	r1, #3
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	61bb      	str	r3, [r7, #24]
  return result;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	60da      	str	r2, [r3, #12]
}
 8002110:	bf00      	nop
 8002112:	3724      	adds	r7, #36	@ 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	613b      	str	r3, [r7, #16]
  return result;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	210f      	movs	r1, #15
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	401a      	ands	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	61bb      	str	r3, [r7, #24]
  return result;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	431a      	orrs	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800217a:	b480      	push	{r7}
 800217c:	b089      	sub	sp, #36	@ 0x24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	613b      	str	r3, [r7, #16]
  return result;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	210f      	movs	r1, #15
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	61bb      	str	r3, [r7, #24]
  return result;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80021d0:	bf00      	nop
 80021d2:	3724      	adds	r7, #36	@ 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	613b      	str	r3, [r7, #16]
  return result;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80021fe:	e051      	b.n	80022a4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d043      	beq.n	800229e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d003      	beq.n	8002226 <LL_GPIO_Init+0x4a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d10e      	bne.n	8002244 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	461a      	mov	r2, r3
 800222c:	69b9      	ldr	r1, [r7, #24]
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff16 	bl	8002060 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	461a      	mov	r2, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fef6 	bl	8002030 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	461a      	mov	r2, r3
 800224a:	69b9      	ldr	r1, [r7, #24]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff36 	bl	80020be <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d11a      	bne.n	8002290 <LL_GPIO_Init+0xb4>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	60bb      	str	r3, [r7, #8]
  return result;
 8002266:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b07      	cmp	r3, #7
 8002270:	d807      	bhi.n	8002282 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	461a      	mov	r2, r3
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff4e 	bl	800211c <LL_GPIO_SetAFPin_0_7>
 8002280:	e006      	b.n	8002290 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	461a      	mov	r2, r3
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff75 	bl	800217a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	461a      	mov	r2, r3
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fe9a 	bl	8001fd2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1a6      	bne.n	8002200 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <LL_I2C_Enable>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_I2C_Disable>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 0201 	bic.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_I2C_ConfigFilters>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0219      	lsls	r1, r3, #8
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	430b      	orrs	r3, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_I2C_SetOwnAddress1>:
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	430a      	orrs	r2, r1
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	609a      	str	r2, [r3, #8]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_I2C_EnableOwnAddress1>:
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_I2C_DisableOwnAddress1>:
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_I2C_SetTiming>:
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	611a      	str	r2, [r3, #16]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_I2C_SetMode>:
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_I2C_AcknowledgeNextData>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	605a      	str	r2, [r3, #4]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff65 	bl	80022dc <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff6d 	bl	80022fc <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4619      	mov	r1, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ffb6 	bl	800239a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ff44 	bl	80022bc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffa0 	bl	800237a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	461a      	mov	r2, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff70 	bl	800232a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff81 	bl	800235a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa9 	bl	80023b6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffb6 	bl	80023dc <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <LL_RCC_HSI_IsReady>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <LL_RCC_HSI_IsReady+0x20>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b02      	cmp	r3, #2
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40021000 	.word	0x40021000

080024a0 <LL_RCC_LSE_IsReady>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <LL_RCC_LSE_IsReady+0x20>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40021000 	.word	0x40021000

080024c4 <LL_RCC_GetSysClkSource>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <LL_RCC_GetSysClkSource+0x18>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000

080024e0 <LL_RCC_GetAHBPrescaler>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <LL_RCC_GetAHBPrescaler+0x18>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000

080024fc <LL_RCC_GetAPB1Prescaler>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <LL_RCC_GetAPB2Prescaler>:
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <LL_RCC_GetAPB2Prescaler+0x18>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000

08002534 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800253c:	4b07      	ldr	r3, [pc, #28]	@ (800255c <LL_RCC_GetUSARTClockSource+0x28>)
 800253e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002540:	2103      	movs	r1, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	4313      	orrs	r3, r2
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40021000 	.word	0x40021000

08002560 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <LL_RCC_PLL_GetMainSource+0x18>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <LL_RCC_PLL_GetPrediv+0x18>)
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	f003 030f 	and.w	r3, r3, #15
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000

080025b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80025bc:	f000 f862 	bl	8002684 <RCC_GetSystemClockFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f880 	bl	80026d0 <RCC_GetHCLKClockFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f88e 	bl	80026fc <RCC_GetPCLK1ClockFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f89a 	bl	8002724 <RCC_GetPCLK2ClockFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d130      	bne.n	8002674 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff8e 	bl	8002534 <LL_RCC_GetUSARTClockSource>
 8002618:	4603      	mov	r3, r0
 800261a:	2b03      	cmp	r3, #3
 800261c:	d00a      	beq.n	8002634 <LL_RCC_GetUSARTClockFreq+0x34>
 800261e:	2b03      	cmp	r3, #3
 8002620:	d819      	bhi.n	8002656 <LL_RCC_GetUSARTClockFreq+0x56>
 8002622:	2b01      	cmp	r3, #1
 8002624:	d002      	beq.n	800262c <LL_RCC_GetUSARTClockFreq+0x2c>
 8002626:	2b02      	cmp	r3, #2
 8002628:	d00c      	beq.n	8002644 <LL_RCC_GetUSARTClockFreq+0x44>
 800262a:	e014      	b.n	8002656 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800262c:	f000 f82a 	bl	8002684 <RCC_GetSystemClockFreq>
 8002630:	60f8      	str	r0, [r7, #12]
        break;
 8002632:	e01f      	b.n	8002674 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002634:	f7ff ff22 	bl	800247c <LL_RCC_HSI_IsReady>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d017      	beq.n	800266e <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <LL_RCC_GetUSARTClockFreq+0x80>)
 8002640:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002642:	e014      	b.n	800266e <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002644:	f7ff ff2c 	bl	80024a0 <LL_RCC_LSE_IsReady>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d011      	beq.n	8002672 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800264e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002652:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002654:	e00d      	b.n	8002672 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002656:	f000 f815 	bl	8002684 <RCC_GetSystemClockFreq>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f837 	bl	80026d0 <RCC_GetHCLKClockFreq>
 8002662:	4603      	mov	r3, r0
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f849 	bl	80026fc <RCC_GetPCLK1ClockFreq>
 800266a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800266c:	e002      	b.n	8002674 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002672:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	007a1200 	.word	0x007a1200

08002684 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800268e:	f7ff ff19 	bl	80024c4 <LL_RCC_GetSysClkSource>
 8002692:	4603      	mov	r3, r0
 8002694:	2b08      	cmp	r3, #8
 8002696:	d00c      	beq.n	80026b2 <RCC_GetSystemClockFreq+0x2e>
 8002698:	2b08      	cmp	r3, #8
 800269a:	d80e      	bhi.n	80026ba <RCC_GetSystemClockFreq+0x36>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <RCC_GetSystemClockFreq+0x22>
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d003      	beq.n	80026ac <RCC_GetSystemClockFreq+0x28>
 80026a4:	e009      	b.n	80026ba <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <RCC_GetSystemClockFreq+0x48>)
 80026a8:	607b      	str	r3, [r7, #4]
      break;
 80026aa:	e009      	b.n	80026c0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80026ac:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <RCC_GetSystemClockFreq+0x48>)
 80026ae:	607b      	str	r3, [r7, #4]
      break;
 80026b0:	e006      	b.n	80026c0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80026b2:	f000 f84b 	bl	800274c <RCC_PLL_GetFreqDomain_SYS>
 80026b6:	6078      	str	r0, [r7, #4]
      break;
 80026b8:	e002      	b.n	80026c0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80026ba:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <RCC_GetSystemClockFreq+0x48>)
 80026bc:	607b      	str	r3, [r7, #4]
      break;
 80026be:	bf00      	nop
  }

  return frequency;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026d8:	f7ff ff02 	bl	80024e0 <LL_RCC_GetAHBPrescaler>
 80026dc:	4603      	mov	r3, r0
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <RCC_GetHCLKClockFreq+0x28>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	40d3      	lsrs	r3, r2
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08003958 	.word	0x08003958

080026fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002704:	f7ff fefa 	bl	80024fc <LL_RCC_GetAPB1Prescaler>
 8002708:	4603      	mov	r3, r0
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	4a04      	ldr	r2, [pc, #16]	@ (8002720 <RCC_GetPCLK1ClockFreq+0x24>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	461a      	mov	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	40d3      	lsrs	r3, r2
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	08003968 	.word	0x08003968

08002724 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800272c:	f7ff fef4 	bl	8002518 <LL_RCC_GetAPB2Prescaler>
 8002730:	4603      	mov	r3, r0
 8002732:	0adb      	lsrs	r3, r3, #11
 8002734:	4a04      	ldr	r2, [pc, #16]	@ (8002748 <RCC_GetPCLK2ClockFreq+0x24>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	40d3      	lsrs	r3, r2
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	08003968 	.word	0x08003968

0800274c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800275a:	f7ff ff01 	bl	8002560 <LL_RCC_PLL_GetMainSource>
 800275e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d003      	beq.n	8002776 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800276e:	e005      	b.n	800277c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002772:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002774:	e005      	b.n	8002782 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002778:	60fb      	str	r3, [r7, #12]
      break;
 800277a:	e002      	b.n	8002782 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800277c:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800277e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002780:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002782:	f7ff ff09 	bl	8002598 <LL_RCC_PLL_GetPrediv>
 8002786:	4603      	mov	r3, r0
 8002788:	3301      	adds	r3, #1
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	fbb2 f4f3 	udiv	r4, r2, r3
 8002790:	f7ff fef4 	bl	800257c <LL_RCC_PLL_GetMultiplicator>
 8002794:	4603      	mov	r3, r0
 8002796:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800279a:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800279e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	603a      	str	r2, [r7, #0]
  return result;
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	fab2 f282 	clz	r2, r2
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	40d3      	lsrs	r3, r2
 80027b2:	3302      	adds	r3, #2
 80027b4:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd90      	pop	{r4, r7, pc}
 80027c0:	003d0900 	.word	0x003d0900
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <LL_USART_IsEnabled>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <LL_USART_IsEnabled+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_USART_IsEnabled+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_USART_SetStopBitsLength>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	605a      	str	r2, [r3, #4]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_USART_SetHWFlowCtrl>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_USART_SetBaudRate>:
{
 800283a:	b480      	push	{r7}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800284e:	d11a      	bne.n	8002886 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	005a      	lsls	r2, r3, #1
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	441a      	add	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	b29b      	uxth	r3, r3
 8002862:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	b29b      	uxth	r3, r3
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	e00a      	b.n	800289c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	085a      	lsrs	r2, r3, #1
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	441a      	add	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	60da      	str	r2, [r3, #12]
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff84 	bl	80027c8 <LL_USART_IsEnabled>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d14e      	bne.n	8002964 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <LL_USART_Init+0xc8>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	6851      	ldr	r1, [r2, #4]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	4311      	orrs	r1, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	6912      	ldr	r2, [r2, #16]
 80028dc:	4311      	orrs	r1, r2
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	6992      	ldr	r2, [r2, #24]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff7c 	bl	80027ee <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff89 	bl	8002814 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1b      	ldr	r2, [pc, #108]	@ (8002974 <LL_USART_Init+0xcc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d104      	bne.n	8002914 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800290a:	2000      	movs	r0, #0
 800290c:	f7ff fe78 	bl	8002600 <LL_RCC_GetUSARTClockFreq>
 8002910:	61b8      	str	r0, [r7, #24]
 8002912:	e016      	b.n	8002942 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <LL_USART_Init+0xd0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d107      	bne.n	800292c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fe47 	bl	80025b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e00a      	b.n	8002942 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a13      	ldr	r2, [pc, #76]	@ (800297c <LL_USART_Init+0xd4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d106      	bne.n	8002942 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe3b 	bl	80025b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002950:	2300      	movs	r3, #0
 8002952:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800295c:	69b9      	ldr	r1, [r7, #24]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff6b 	bl	800283a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002964:	7ffb      	ldrb	r3, [r7, #31]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	efff69f3 	.word	0xefff69f3
 8002974:	40013800 	.word	0x40013800
 8002978:	40004400 	.word	0x40004400
 800297c:	40004800 	.word	0x40004800

08002980 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <LL_mDelay+0x48>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800298e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d00c      	beq.n	80029b2 <LL_mDelay+0x32>
  {
    Delay++;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3301      	adds	r3, #1
 800299c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800299e:	e008      	b.n	80029b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <LL_mDelay+0x48>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <LL_mDelay+0x32>
    {
      Delay--;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f3      	bne.n	80029a0 <LL_mDelay+0x20>
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <LL_SetSystemCoreClock+0x1c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000000 	.word	0x20000000

080029ec <HTS221_read_byte>:
                                  uint8_t size);

static I2C_ReadCallback I2C_read_data = NULL;
static I2C_WriteCallback I2C_write_data = NULL;

uint8_t HTS221_read_byte(uint8_t register_address) {
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
	if (I2C_read_data == NULL) {
 80029f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HTS221_read_byte+0x34>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HTS221_read_byte+0x16>
		return 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e009      	b.n	8002a16 <HTS221_read_byte+0x2a>
	}

	uint8_t rx_data;
	I2C_read_data(hts221_address, register_address, &rx_data, 1);
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <HTS221_read_byte+0x34>)
 8002a04:	681c      	ldr	r4, [r3, #0]
 8002a06:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <HTS221_read_byte+0x38>)
 8002a08:	7818      	ldrb	r0, [r3, #0]
 8002a0a:	f107 020f 	add.w	r2, r7, #15
 8002a0e:	79f9      	ldrb	r1, [r7, #7]
 8002a10:	2301      	movs	r3, #1
 8002a12:	47a0      	blx	r4
	return rx_data;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000134 	.word	0x20000134
 8002a24:	20000009 	.word	0x20000009

08002a28 <HTS221_read_array>:

void HTS221_read_array(uint8_t register_address, uint8_t* data, uint8_t size) {
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71bb      	strb	r3, [r7, #6]
	if (I2C_read_data == NULL || data == NULL || size == 0) {
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HTS221_read_array+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <HTS221_read_array+0x36>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HTS221_read_array+0x36>
 8002a46:	79bb      	ldrb	r3, [r7, #6]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HTS221_read_array+0x36>
	        return;
	}

	I2C_read_data(hts221_address, register_address, data, size);
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HTS221_read_array+0x40>)
 8002a4e:	681c      	ldr	r4, [r3, #0]
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HTS221_read_array+0x44>)
 8002a52:	7818      	ldrb	r0, [r3, #0]
 8002a54:	79bb      	ldrb	r3, [r7, #6]
 8002a56:	79f9      	ldrb	r1, [r7, #7]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	47a0      	blx	r4
 8002a5c:	e000      	b.n	8002a60 <HTS221_read_array+0x38>
	        return;
 8002a5e:	bf00      	nop
}
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000134 	.word	0x20000134
 8002a6c:	20000009 	.word	0x20000009

08002a70 <HTS221_write_byte>:

void HTS221_write_byte(uint8_t register_address, uint8_t data) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	460a      	mov	r2, r1
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71bb      	strb	r3, [r7, #6]
	if (I2C_write_data == NULL) {
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HTS221_write_byte+0x34>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HTS221_write_byte+0x2a>
	        return;
	}

	I2C_write_data(hts221_address, register_address, &data, 1);
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HTS221_write_byte+0x34>)
 8002a8a:	681c      	ldr	r4, [r3, #0]
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HTS221_write_byte+0x38>)
 8002a8e:	7818      	ldrb	r0, [r3, #0]
 8002a90:	1dba      	adds	r2, r7, #6
 8002a92:	79f9      	ldrb	r1, [r7, #7]
 8002a94:	2301      	movs	r3, #1
 8002a96:	47a0      	blx	r4
 8002a98:	e000      	b.n	8002a9c <HTS221_write_byte+0x2c>
	        return;
 8002a9a:	bf00      	nop
}
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000138 	.word	0x20000138
 8002aa8:	20000009 	.word	0x20000009

08002aac <HTS221_Init>:

uint8_t HTS221_Init(I2C_ReadCallback read_callback,
					 I2C_WriteCallback write_callback) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]

	if(read_callback != 0)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HTS221_Init+0x16>
		I2C_read_data = read_callback;
 8002abc:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <HTS221_Init+0x78>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]

	if(write_callback != 0)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HTS221_Init+0x22>
		I2C_write_data = write_callback;
 8002ac8:	4a17      	ldr	r2, [pc, #92]	@ (8002b28 <HTS221_Init+0x7c>)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6013      	str	r3, [r2, #0]


	uint8_t status = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]

	LL_mDelay(100);
 8002ad2:	2064      	movs	r0, #100	@ 0x64
 8002ad4:	f7ff ff54 	bl	8002980 <LL_mDelay>

	uint8_t address_value = HTS221_read_byte(hts221_address);
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <HTS221_Init+0x80>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff85 	bl	80029ec <HTS221_read_byte>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73bb      	strb	r3, [r7, #14]

	if (address_value != HTS221_WHO_AM_I_VALUE) {
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	2bbc      	cmp	r3, #188	@ 0xbc
 8002aea:	d003      	beq.n	8002af4 <HTS221_Init+0x48>
		status = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
		return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	e012      	b.n	8002b1a <HTS221_Init+0x6e>
	}

	uint8_t ctrl1 = HTS221_read_byte(HTS221_ADDRESS_CTRL1);
 8002af4:	2020      	movs	r0, #32
 8002af6:	f7ff ff79 	bl	80029ec <HTS221_read_byte>
 8002afa:	4603      	mov	r3, r0
 8002afc:	737b      	strb	r3, [r7, #13]
	ctrl1 &= 0x7C;
 8002afe:	7b7b      	ldrb	r3, [r7, #13]
 8002b00:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002b04:	737b      	strb	r3, [r7, #13]
	ctrl1 |= 0x83;
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	f063 037c 	orn	r3, r3, #124	@ 0x7c
 8002b0c:	737b      	strb	r3, [r7, #13]

	HTS221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	4619      	mov	r1, r3
 8002b12:	2020      	movs	r0, #32
 8002b14:	f7ff ffac 	bl	8002a70 <HTS221_write_byte>

	return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000134 	.word	0x20000134
 8002b28:	20000138 	.word	0x20000138
 8002b2c:	20000009 	.word	0x20000009

08002b30 <HTS221_get_humidity>:

int8_t HTS221_get_humidity(void) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8002b36:	4b40      	ldr	r3, [pc, #256]	@ (8002c38 <HTS221_get_humidity+0x108>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HTS221_get_humidity+0x14>
	        return -1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e074      	b.n	8002c2e <HTS221_get_humidity+0xfe>
	}

	uint8_t humidity_data[2];

	HTS221_read_array(HTS221_ADDRESS_HUMIDITY_OUT_L, humidity_data, 2);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2028      	movs	r0, #40	@ 0x28
 8002b4e:	f7ff ff6b 	bl	8002a28 <HTS221_read_array>

	int16_t humidity_raw = (humidity_data[1] << 8 |
 8002b52:	7d7b      	ldrb	r3, [r7, #21]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	b21a      	sxth	r2, r3
							humidity_data[0]);
 8002b58:	7d3b      	ldrb	r3, [r7, #20]
 8002b5a:	b21b      	sxth	r3, r3
	int16_t humidity_raw = (humidity_data[1] << 8 |
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	84fb      	strh	r3, [r7, #38]	@ 0x26

	uint8_t x0[2], x1[2], y[2];

	HTS221_read_array(HTS221_ADDRESS_H0_T0_OUT_L, x0, 2);
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2202      	movs	r2, #2
 8002b66:	4619      	mov	r1, r3
 8002b68:	2036      	movs	r0, #54	@ 0x36
 8002b6a:	f7ff ff5d 	bl	8002a28 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_H1_T0_OUT_L, x1, 2);
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	2202      	movs	r2, #2
 8002b74:	4619      	mov	r1, r3
 8002b76:	203a      	movs	r0, #58	@ 0x3a
 8002b78:	f7ff ff56 	bl	8002a28 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_H0_rH_x2, y, 2);
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	2202      	movs	r2, #2
 8002b82:	4619      	mov	r1, r3
 8002b84:	2030      	movs	r0, #48	@ 0x30
 8002b86:	f7ff ff4f 	bl	8002a28 <HTS221_read_array>

	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 8002b8a:	7c7b      	ldrb	r3, [r7, #17]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	b21a      	sxth	r2, r3
									   x0[0]);
 8002b90:	7c3b      	ldrb	r3, [r7, #16]
 8002b92:	b21b      	sxth	r3, r3
	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 8002b94:	4313      	orrs	r3, r2
 8002b96:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 8002b98:	7b7b      	ldrb	r3, [r7, #13]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b21a      	sxth	r2, r3
									   x1[0]);
 8002b9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ba0:	b21b      	sxth	r3, r3
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	847b      	strh	r3, [r7, #34]	@ 0x22

	int8_t calibration_y0 = y[0] / 2;
 8002ba6:	7a3b      	ldrb	r3, [r7, #8]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	int8_t calibration_y1 = y[1] / 2;
 8002bb0:	7a7b      	ldrb	r3, [r7, #9]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f887 3020 	strb.w	r3, [r7, #32]


	float k = (float)((calibration_y1 - calibration_y0)/(calibration_x1 - calibration_x0));
 8002bba:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8002bbe:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	@ 0x22
 8002bc8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002bcc:	1acb      	subs	r3, r1, r3
 8002bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bda:	edc7 7a07 	vstr	s15, [r7, #28]

	float q = (float)(calibration_y1 - k*calibration_x1);
 8002bde:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c02:	edc7 7a06 	vstr	s15, [r7, #24]

	return (int8_t)(k * humidity_raw + q);
 8002c06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c12:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c26:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c2a:	793b      	ldrb	r3, [r7, #4]
 8002c2c:	b25b      	sxtb	r3, r3
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3728      	adds	r7, #40	@ 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000134 	.word	0x20000134

08002c3c <HTS221_get_temperature>:

int8_t HTS221_get_temperature(void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8002c42:	4b51      	ldr	r3, [pc, #324]	@ (8002d88 <HTS221_get_temperature+0x14c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <HTS221_get_temperature+0x14>
	        return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e096      	b.n	8002d7e <HTS221_get_temperature+0x142>
	}

	uint8_t temperature_data[2];

	HTS221_read_array(HTS221_ADDRESS_TEMP_OUT_L, temperature_data, 2);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2202      	movs	r2, #2
 8002c56:	4619      	mov	r1, r3
 8002c58:	202a      	movs	r0, #42	@ 0x2a
 8002c5a:	f7ff fee5 	bl	8002a28 <HTS221_read_array>

	int16_t temperature_raw = (temperature_data[1] << 8 |
 8002c5e:	7d7b      	ldrb	r3, [r7, #21]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b21a      	sxth	r2, r3
							   temperature_data[0]);
 8002c64:	7d3b      	ldrb	r3, [r7, #20]
 8002c66:	b21b      	sxth	r3, r3
	int16_t temperature_raw = (temperature_data[1] << 8 |
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	uint8_t x0[2], x1[2], y[2];


	HTS221_read_array(HTS221_ADDRESS_T0_OUT_L, x0, 2);
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	2202      	movs	r2, #2
 8002c72:	4619      	mov	r1, r3
 8002c74:	203c      	movs	r0, #60	@ 0x3c
 8002c76:	f7ff fed7 	bl	8002a28 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_T1_OUT_L, x1, 2);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4619      	mov	r1, r3
 8002c82:	203e      	movs	r0, #62	@ 0x3e
 8002c84:	f7ff fed0 	bl	8002a28 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_T0_degC_x8, y, 2);
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2032      	movs	r0, #50	@ 0x32
 8002c92:	f7ff fec9 	bl	8002a28 <HTS221_read_array>
	uint8_t t0_t1_msb = HTS221_read_byte(HTS221_ADDRESS_T1_T2_msb);
 8002c96:	2035      	movs	r0, #53	@ 0x35
 8002c98:	f7ff fea8 	bl	80029ec <HTS221_read_byte>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 8002ca2:	7c7b      	ldrb	r3, [r7, #17]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b21a      	sxth	r2, r3
									   x0[0]);
 8002ca8:	7c3b      	ldrb	r3, [r7, #16]
 8002caa:	b21b      	sxth	r3, r3
	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 8002cb0:	7b7b      	ldrb	r3, [r7, #13]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	b21a      	sxth	r2, r3
									   x1[0]);
 8002cb6:	7b3b      	ldrb	r3, [r7, #12]
 8002cb8:	b21b      	sxth	r3, r3
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	853b      	strh	r3, [r7, #40]	@ 0x28

	uint16_t t0_degC = y[0];
 8002cbe:	7a3b      	ldrb	r3, [r7, #8]
 8002cc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t t1_degC = y[1];
 8002cc2:	7a7b      	ldrb	r3, [r7, #9]
 8002cc4:	84bb      	strh	r3, [r7, #36]	@ 0x24

	t0_degC |= ((t0_t1_msb & 0x03) << 8);
 8002cc6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd2:	b21a      	sxth	r2, r3
 8002cd4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	t1_degC |= ((t0_t1_msb & 0x0C) << 6);
 8002cde:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int8_t calibration_y0 = t0_degC / 8;
 8002cf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int8_t calibration_y1 = t1_degC / 8;
 8002d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22



	float k = (float)((calibration_y1 - calibration_y0)/(calibration_x1 - calibration_x0));
 8002d0a:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8002d0e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8002d18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002d1c:	1acb      	subs	r3, r1, r3
 8002d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2a:	edc7 7a07 	vstr	s15, [r7, #28]

	float q = (float)(calibration_y1 - k*calibration_x1);
 8002d2e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d46:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d52:	edc7 7a06 	vstr	s15, [r7, #24]

	return (int8_t)(k * temperature_raw + q);
 8002d56:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d76:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d7a:	793b      	ldrb	r3, [r7, #4]
 8002d7c:	b25b      	sxtb	r3, r3
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3730      	adds	r7, #48	@ 0x30
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000134 	.word	0x20000134

08002d8c <LPS25HB_read_byte>:
                                  uint8_t size);

static I2C_ReadCallback I2C_read_data = NULL;
static I2C_WriteCallback I2C_write_data = NULL;

uint8_t LPS25HB_read_byte(uint8_t register_address) {
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
	if (I2C_read_data == NULL) {
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <LPS25HB_read_byte+0x34>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <LPS25HB_read_byte+0x16>
		return 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e009      	b.n	8002db6 <LPS25HB_read_byte+0x2a>
	}

	uint8_t rx_data;
	I2C_read_data(lps25hb_address, register_address, &rx_data, 1);
 8002da2:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <LPS25HB_read_byte+0x34>)
 8002da4:	681c      	ldr	r4, [r3, #0]
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <LPS25HB_read_byte+0x38>)
 8002da8:	7818      	ldrb	r0, [r3, #0]
 8002daa:	f107 020f 	add.w	r2, r7, #15
 8002dae:	79f9      	ldrb	r1, [r7, #7]
 8002db0:	2301      	movs	r3, #1
 8002db2:	47a0      	blx	r4
	return rx_data;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000140 	.word	0x20000140
 8002dc4:	2000000a 	.word	0x2000000a

08002dc8 <LPS25HB_read_array>:

void LPS25HB_read_array(uint8_t register_address, uint8_t* data, uint8_t size) {
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71bb      	strb	r3, [r7, #6]
	if (I2C_read_data == NULL || data == NULL || size == 0) {
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <LPS25HB_read_array+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <LPS25HB_read_array+0x36>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <LPS25HB_read_array+0x36>
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <LPS25HB_read_array+0x36>
	        return;
	}

	I2C_read_data(lps25hb_address, register_address, data, size);
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <LPS25HB_read_array+0x40>)
 8002dee:	681c      	ldr	r4, [r3, #0]
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <LPS25HB_read_array+0x44>)
 8002df2:	7818      	ldrb	r0, [r3, #0]
 8002df4:	79bb      	ldrb	r3, [r7, #6]
 8002df6:	79f9      	ldrb	r1, [r7, #7]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	47a0      	blx	r4
 8002dfc:	e000      	b.n	8002e00 <LPS25HB_read_array+0x38>
	        return;
 8002dfe:	bf00      	nop
}
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000140 	.word	0x20000140
 8002e0c:	2000000a 	.word	0x2000000a

08002e10 <LPS25HB_write_byte>:

void LPS25HB_write_byte(uint8_t register_address, uint8_t data) {
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	460a      	mov	r2, r1
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71bb      	strb	r3, [r7, #6]
	if (I2C_write_data == NULL) {
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <LPS25HB_write_byte+0x34>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <LPS25HB_write_byte+0x2a>
	        return;
	}

	I2C_write_data(lps25hb_address, register_address, &data, 1);
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <LPS25HB_write_byte+0x34>)
 8002e2a:	681c      	ldr	r4, [r3, #0]
 8002e2c:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <LPS25HB_write_byte+0x38>)
 8002e2e:	7818      	ldrb	r0, [r3, #0]
 8002e30:	1dba      	adds	r2, r7, #6
 8002e32:	79f9      	ldrb	r1, [r7, #7]
 8002e34:	2301      	movs	r3, #1
 8002e36:	47a0      	blx	r4
 8002e38:	e000      	b.n	8002e3c <LPS25HB_write_byte+0x2c>
	        return;
 8002e3a:	bf00      	nop
}
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000144 	.word	0x20000144
 8002e48:	2000000a 	.word	0x2000000a

08002e4c <LPS25HB_Init>:

uint8_t LPS25HB_Init(I2C_ReadCallback read_callback,
					 I2C_WriteCallback write_callback) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]

	if(read_callback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <LPS25HB_Init+0x16>
		I2C_read_data = read_callback;
 8002e5c:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <LPS25HB_Init+0xa0>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]

	if(write_callback != NULL)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <LPS25HB_Init+0x22>
		I2C_write_data = write_callback;
 8002e68:	4a21      	ldr	r2, [pc, #132]	@ (8002ef0 <LPS25HB_Init+0xa4>)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6013      	str	r3, [r2, #0]

	uint8_t status = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]

	LL_mDelay(100);
 8002e72:	2064      	movs	r0, #100	@ 0x64
 8002e74:	f7ff fd84 	bl	8002980 <LL_mDelay>

	uint8_t address_value = LPS25HB_read_byte(lps25hb_address);
 8002e78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <LPS25HB_Init+0xa8>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff85 	bl	8002d8c <LPS25HB_read_byte>
 8002e82:	4603      	mov	r3, r0
 8002e84:	73bb      	strb	r3, [r7, #14]

	if (address_value != LPS25HB_WHO_AM_I_VALUE) {
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
 8002e88:	2bbd      	cmp	r3, #189	@ 0xbd
 8002e8a:	d010      	beq.n	8002eae <LPS25HB_Init+0x62>
		lps25hb_address = LPS25HB_DEVICE_ADDRESS_1;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <LPS25HB_Init+0xa8>)
 8002e8e:	22bb      	movs	r2, #187	@ 0xbb
 8002e90:	701a      	strb	r2, [r3, #0]
		address_value = LPS25HB_read_byte(lps25hb_address);
 8002e92:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <LPS25HB_Init+0xa8>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff78 	bl	8002d8c <LPS25HB_read_byte>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	73bb      	strb	r3, [r7, #14]

		if (address_value != LPS25HB_WHO_AM_I_VALUE) {
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	2bbd      	cmp	r3, #189	@ 0xbd
 8002ea4:	d003      	beq.n	8002eae <LPS25HB_Init+0x62>
			status = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
			return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	e019      	b.n	8002ee2 <LPS25HB_Init+0x96>
		}
	}

	uint8_t ctrl1 = LPS25HB_read_byte(LPS25HB_ADDRESS_CTRL1);
 8002eae:	2020      	movs	r0, #32
 8002eb0:	f7ff ff6c 	bl	8002d8c <LPS25HB_read_byte>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	737b      	strb	r3, [r7, #13]
	ctrl1 &= 0xF;
 8002eb8:	7b7b      	ldrb	r3, [r7, #13]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	737b      	strb	r3, [r7, #13]
	ctrl1 |= 0x90;
 8002ec0:	7b7b      	ldrb	r3, [r7, #13]
 8002ec2:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8002ec6:	737b      	strb	r3, [r7, #13]

	LPS25HB_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8002ec8:	7b7b      	ldrb	r3, [r7, #13]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	2020      	movs	r0, #32
 8002ece:	f7ff ff9f 	bl	8002e10 <LPS25HB_write_byte>

	initial_pressure = LPS25HB_get_pressure();
 8002ed2:	f000 f813 	bl	8002efc <LPS25HB_get_pressure>
 8002ed6:	eef0 7a40 	vmov.f32	s15, s0
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <LPS25HB_Init+0xac>)
 8002edc:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000140 	.word	0x20000140
 8002ef0:	20000144 	.word	0x20000144
 8002ef4:	2000000a 	.word	0x2000000a
 8002ef8:	2000013c 	.word	0x2000013c

08002efc <LPS25HB_get_pressure>:

float LPS25HB_get_pressure(void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8002f02:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <LPS25HB_get_pressure+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <LPS25HB_get_pressure+0x14>
	        return -1;
 8002f0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002f0e:	e016      	b.n	8002f3e <LPS25HB_get_pressure+0x42>
	}

	uint8_t pressure_data[3];

	LPS25HB_read_array(LPS25HB_ADDRESS_PRESS_OUT_XL, pressure_data, 3);
 8002f10:	463b      	mov	r3, r7
 8002f12:	2203      	movs	r2, #3
 8002f14:	4619      	mov	r1, r3
 8002f16:	2028      	movs	r0, #40	@ 0x28
 8002f18:	f7ff ff56 	bl	8002dc8 <LPS25HB_read_array>

	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8002f1c:	78bb      	ldrb	r3, [r7, #2]
 8002f1e:	041a      	lsls	r2, r3, #16
									 pressure_data[1] << 8 |
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	021b      	lsls	r3, r3, #8
	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8002f24:	4313      	orrs	r3, r2
									 pressure_data[0]);
 8002f26:	783a      	ldrb	r2, [r7, #0]
	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	607b      	str	r3, [r7, #4]

	return (float)(pressure_raw / 4096.0f);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f36:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002f50 <LPS25HB_get_pressure+0x54>
 8002f3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8002f3e:	eef0 7a47 	vmov.f32	s15, s14
 8002f42:	eeb0 0a67 	vmov.f32	s0, s15
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000140 	.word	0x20000140
 8002f50:	45800000 	.word	0x45800000

08002f54 <LPS25HB_get_temperature>:

float LPS25HB_get_temperature(void) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8002f5a:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <LPS25HB_get_temperature+0x50>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <LPS25HB_get_temperature+0x14>
		return -1;
 8002f62:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002f66:	e016      	b.n	8002f96 <LPS25HB_get_temperature+0x42>
	}

	uint8_t temperature_data[2];

	LPS25HB_read_array(LPS25HB_ADDRESS_TEMP_OUT_L, temperature_data, 2);
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	202b      	movs	r0, #43	@ 0x2b
 8002f70:	f7ff ff2a 	bl	8002dc8 <LPS25HB_read_array>

	int16_t temperature_raw = (int16_t)(temperature_data[1] << 8 |
 8002f74:	797b      	ldrb	r3, [r7, #5]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
							   	   	    temperature_data[0]);
 8002f7a:	793b      	ldrb	r3, [r7, #4]
 8002f7c:	b21b      	sxth	r3, r3
	int16_t temperature_raw = (int16_t)(temperature_data[1] << 8 |
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]

	return (float)(temperature_raw / 100.0f);
 8002f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002fa8 <LPS25HB_get_temperature+0x54>
 8002f92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8002f96:	eef0 7a47 	vmov.f32	s15, s14
 8002f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000140 	.word	0x20000140
 8002fa8:	42c80000 	.word	0x42c80000

08002fac <LPS25HB_get_height>:

float LPS25HB_get_height(void) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0

	float current_pressure = LPS25HB_get_pressure();
 8002fb2:	f7ff ffa3 	bl	8002efc <LPS25HB_get_pressure>
 8002fb6:	ed87 0a01 	vstr	s0, [r7, #4]

	return (float)(44330*(1 - (current_pressure / initial_pressure)));
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <LPS25HB_get_height+0x38>)
 8002fbc:	ed93 7a00 	vldr	s14, [r3]
 8002fc0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002fe8 <LPS25HB_get_height+0x3c>
 8002fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000013c 	.word	0x2000013c
 8002fe8:	472d2a00 	.word	0x472d2a00

08002fec <siprintf>:
 8002fec:	b40e      	push	{r1, r2, r3}
 8002fee:	b500      	push	{lr}
 8002ff0:	b09c      	sub	sp, #112	@ 0x70
 8002ff2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ff4:	9002      	str	r0, [sp, #8]
 8002ff6:	9006      	str	r0, [sp, #24]
 8002ff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ffc:	4809      	ldr	r0, [pc, #36]	@ (8003024 <siprintf+0x38>)
 8002ffe:	9107      	str	r1, [sp, #28]
 8003000:	9104      	str	r1, [sp, #16]
 8003002:	4909      	ldr	r1, [pc, #36]	@ (8003028 <siprintf+0x3c>)
 8003004:	f853 2b04 	ldr.w	r2, [r3], #4
 8003008:	9105      	str	r1, [sp, #20]
 800300a:	6800      	ldr	r0, [r0, #0]
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	a902      	add	r1, sp, #8
 8003010:	f000 f994 	bl	800333c <_svfiprintf_r>
 8003014:	9b02      	ldr	r3, [sp, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	b01c      	add	sp, #112	@ 0x70
 800301c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003020:	b003      	add	sp, #12
 8003022:	4770      	bx	lr
 8003024:	2000000c 	.word	0x2000000c
 8003028:	ffff0208 	.word	0xffff0208

0800302c <memset>:
 800302c:	4402      	add	r2, r0
 800302e:	4603      	mov	r3, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <__errno>:
 800303c:	4b01      	ldr	r3, [pc, #4]	@ (8003044 <__errno+0x8>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	2000000c 	.word	0x2000000c

08003048 <__libc_init_array>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	4d0d      	ldr	r5, [pc, #52]	@ (8003080 <__libc_init_array+0x38>)
 800304c:	4c0d      	ldr	r4, [pc, #52]	@ (8003084 <__libc_init_array+0x3c>)
 800304e:	1b64      	subs	r4, r4, r5
 8003050:	10a4      	asrs	r4, r4, #2
 8003052:	2600      	movs	r6, #0
 8003054:	42a6      	cmp	r6, r4
 8003056:	d109      	bne.n	800306c <__libc_init_array+0x24>
 8003058:	4d0b      	ldr	r5, [pc, #44]	@ (8003088 <__libc_init_array+0x40>)
 800305a:	4c0c      	ldr	r4, [pc, #48]	@ (800308c <__libc_init_array+0x44>)
 800305c:	f000 fc66 	bl	800392c <_init>
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	2600      	movs	r6, #0
 8003066:	42a6      	cmp	r6, r4
 8003068:	d105      	bne.n	8003076 <__libc_init_array+0x2e>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003070:	4798      	blx	r3
 8003072:	3601      	adds	r6, #1
 8003074:	e7ee      	b.n	8003054 <__libc_init_array+0xc>
 8003076:	f855 3b04 	ldr.w	r3, [r5], #4
 800307a:	4798      	blx	r3
 800307c:	3601      	adds	r6, #1
 800307e:	e7f2      	b.n	8003066 <__libc_init_array+0x1e>
 8003080:	080039b4 	.word	0x080039b4
 8003084:	080039b4 	.word	0x080039b4
 8003088:	080039b4 	.word	0x080039b4
 800308c:	080039b8 	.word	0x080039b8

08003090 <__retarget_lock_acquire_recursive>:
 8003090:	4770      	bx	lr

08003092 <__retarget_lock_release_recursive>:
 8003092:	4770      	bx	lr

08003094 <_free_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	4605      	mov	r5, r0
 8003098:	2900      	cmp	r1, #0
 800309a:	d041      	beq.n	8003120 <_free_r+0x8c>
 800309c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a0:	1f0c      	subs	r4, r1, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bfb8      	it	lt
 80030a6:	18e4      	addlt	r4, r4, r3
 80030a8:	f000 f8e0 	bl	800326c <__malloc_lock>
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <_free_r+0x90>)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	b933      	cbnz	r3, 80030c0 <_free_r+0x2c>
 80030b2:	6063      	str	r3, [r4, #4]
 80030b4:	6014      	str	r4, [r2, #0]
 80030b6:	4628      	mov	r0, r5
 80030b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030bc:	f000 b8dc 	b.w	8003278 <__malloc_unlock>
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	d908      	bls.n	80030d6 <_free_r+0x42>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf01      	itttt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	1809      	addeq	r1, r1, r0
 80030d2:	6021      	streq	r1, [r4, #0]
 80030d4:	e7ed      	b.n	80030b2 <_free_r+0x1e>
 80030d6:	461a      	mov	r2, r3
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b10b      	cbz	r3, 80030e0 <_free_r+0x4c>
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d9fa      	bls.n	80030d6 <_free_r+0x42>
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	1850      	adds	r0, r2, r1
 80030e4:	42a0      	cmp	r0, r4
 80030e6:	d10b      	bne.n	8003100 <_free_r+0x6c>
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	4401      	add	r1, r0
 80030ec:	1850      	adds	r0, r2, r1
 80030ee:	4283      	cmp	r3, r0
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	d1e0      	bne.n	80030b6 <_free_r+0x22>
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	6053      	str	r3, [r2, #4]
 80030fa:	4408      	add	r0, r1
 80030fc:	6010      	str	r0, [r2, #0]
 80030fe:	e7da      	b.n	80030b6 <_free_r+0x22>
 8003100:	d902      	bls.n	8003108 <_free_r+0x74>
 8003102:	230c      	movs	r3, #12
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	e7d6      	b.n	80030b6 <_free_r+0x22>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	1821      	adds	r1, r4, r0
 800310c:	428b      	cmp	r3, r1
 800310e:	bf04      	itt	eq
 8003110:	6819      	ldreq	r1, [r3, #0]
 8003112:	685b      	ldreq	r3, [r3, #4]
 8003114:	6063      	str	r3, [r4, #4]
 8003116:	bf04      	itt	eq
 8003118:	1809      	addeq	r1, r1, r0
 800311a:	6021      	streq	r1, [r4, #0]
 800311c:	6054      	str	r4, [r2, #4]
 800311e:	e7ca      	b.n	80030b6 <_free_r+0x22>
 8003120:	bd38      	pop	{r3, r4, r5, pc}
 8003122:	bf00      	nop
 8003124:	2000028c 	.word	0x2000028c

08003128 <sbrk_aligned>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4e0f      	ldr	r6, [pc, #60]	@ (8003168 <sbrk_aligned+0x40>)
 800312c:	460c      	mov	r4, r1
 800312e:	6831      	ldr	r1, [r6, #0]
 8003130:	4605      	mov	r5, r0
 8003132:	b911      	cbnz	r1, 800313a <sbrk_aligned+0x12>
 8003134:	f000 fba6 	bl	8003884 <_sbrk_r>
 8003138:	6030      	str	r0, [r6, #0]
 800313a:	4621      	mov	r1, r4
 800313c:	4628      	mov	r0, r5
 800313e:	f000 fba1 	bl	8003884 <_sbrk_r>
 8003142:	1c43      	adds	r3, r0, #1
 8003144:	d103      	bne.n	800314e <sbrk_aligned+0x26>
 8003146:	f04f 34ff 	mov.w	r4, #4294967295
 800314a:	4620      	mov	r0, r4
 800314c:	bd70      	pop	{r4, r5, r6, pc}
 800314e:	1cc4      	adds	r4, r0, #3
 8003150:	f024 0403 	bic.w	r4, r4, #3
 8003154:	42a0      	cmp	r0, r4
 8003156:	d0f8      	beq.n	800314a <sbrk_aligned+0x22>
 8003158:	1a21      	subs	r1, r4, r0
 800315a:	4628      	mov	r0, r5
 800315c:	f000 fb92 	bl	8003884 <_sbrk_r>
 8003160:	3001      	adds	r0, #1
 8003162:	d1f2      	bne.n	800314a <sbrk_aligned+0x22>
 8003164:	e7ef      	b.n	8003146 <sbrk_aligned+0x1e>
 8003166:	bf00      	nop
 8003168:	20000288 	.word	0x20000288

0800316c <_malloc_r>:
 800316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003170:	1ccd      	adds	r5, r1, #3
 8003172:	f025 0503 	bic.w	r5, r5, #3
 8003176:	3508      	adds	r5, #8
 8003178:	2d0c      	cmp	r5, #12
 800317a:	bf38      	it	cc
 800317c:	250c      	movcc	r5, #12
 800317e:	2d00      	cmp	r5, #0
 8003180:	4606      	mov	r6, r0
 8003182:	db01      	blt.n	8003188 <_malloc_r+0x1c>
 8003184:	42a9      	cmp	r1, r5
 8003186:	d904      	bls.n	8003192 <_malloc_r+0x26>
 8003188:	230c      	movs	r3, #12
 800318a:	6033      	str	r3, [r6, #0]
 800318c:	2000      	movs	r0, #0
 800318e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003268 <_malloc_r+0xfc>
 8003196:	f000 f869 	bl	800326c <__malloc_lock>
 800319a:	f8d8 3000 	ldr.w	r3, [r8]
 800319e:	461c      	mov	r4, r3
 80031a0:	bb44      	cbnz	r4, 80031f4 <_malloc_r+0x88>
 80031a2:	4629      	mov	r1, r5
 80031a4:	4630      	mov	r0, r6
 80031a6:	f7ff ffbf 	bl	8003128 <sbrk_aligned>
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	4604      	mov	r4, r0
 80031ae:	d158      	bne.n	8003262 <_malloc_r+0xf6>
 80031b0:	f8d8 4000 	ldr.w	r4, [r8]
 80031b4:	4627      	mov	r7, r4
 80031b6:	2f00      	cmp	r7, #0
 80031b8:	d143      	bne.n	8003242 <_malloc_r+0xd6>
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	d04b      	beq.n	8003256 <_malloc_r+0xea>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	4639      	mov	r1, r7
 80031c2:	4630      	mov	r0, r6
 80031c4:	eb04 0903 	add.w	r9, r4, r3
 80031c8:	f000 fb5c 	bl	8003884 <_sbrk_r>
 80031cc:	4581      	cmp	r9, r0
 80031ce:	d142      	bne.n	8003256 <_malloc_r+0xea>
 80031d0:	6821      	ldr	r1, [r4, #0]
 80031d2:	1a6d      	subs	r5, r5, r1
 80031d4:	4629      	mov	r1, r5
 80031d6:	4630      	mov	r0, r6
 80031d8:	f7ff ffa6 	bl	8003128 <sbrk_aligned>
 80031dc:	3001      	adds	r0, #1
 80031de:	d03a      	beq.n	8003256 <_malloc_r+0xea>
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	442b      	add	r3, r5
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	bb62      	cbnz	r2, 8003248 <_malloc_r+0xdc>
 80031ee:	f8c8 7000 	str.w	r7, [r8]
 80031f2:	e00f      	b.n	8003214 <_malloc_r+0xa8>
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	1b52      	subs	r2, r2, r5
 80031f8:	d420      	bmi.n	800323c <_malloc_r+0xd0>
 80031fa:	2a0b      	cmp	r2, #11
 80031fc:	d917      	bls.n	800322e <_malloc_r+0xc2>
 80031fe:	1961      	adds	r1, r4, r5
 8003200:	42a3      	cmp	r3, r4
 8003202:	6025      	str	r5, [r4, #0]
 8003204:	bf18      	it	ne
 8003206:	6059      	strne	r1, [r3, #4]
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	bf08      	it	eq
 800320c:	f8c8 1000 	streq.w	r1, [r8]
 8003210:	5162      	str	r2, [r4, r5]
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	4630      	mov	r0, r6
 8003216:	f000 f82f 	bl	8003278 <__malloc_unlock>
 800321a:	f104 000b 	add.w	r0, r4, #11
 800321e:	1d23      	adds	r3, r4, #4
 8003220:	f020 0007 	bic.w	r0, r0, #7
 8003224:	1ac2      	subs	r2, r0, r3
 8003226:	bf1c      	itt	ne
 8003228:	1a1b      	subne	r3, r3, r0
 800322a:	50a3      	strne	r3, [r4, r2]
 800322c:	e7af      	b.n	800318e <_malloc_r+0x22>
 800322e:	6862      	ldr	r2, [r4, #4]
 8003230:	42a3      	cmp	r3, r4
 8003232:	bf0c      	ite	eq
 8003234:	f8c8 2000 	streq.w	r2, [r8]
 8003238:	605a      	strne	r2, [r3, #4]
 800323a:	e7eb      	b.n	8003214 <_malloc_r+0xa8>
 800323c:	4623      	mov	r3, r4
 800323e:	6864      	ldr	r4, [r4, #4]
 8003240:	e7ae      	b.n	80031a0 <_malloc_r+0x34>
 8003242:	463c      	mov	r4, r7
 8003244:	687f      	ldr	r7, [r7, #4]
 8003246:	e7b6      	b.n	80031b6 <_malloc_r+0x4a>
 8003248:	461a      	mov	r2, r3
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	42a3      	cmp	r3, r4
 800324e:	d1fb      	bne.n	8003248 <_malloc_r+0xdc>
 8003250:	2300      	movs	r3, #0
 8003252:	6053      	str	r3, [r2, #4]
 8003254:	e7de      	b.n	8003214 <_malloc_r+0xa8>
 8003256:	230c      	movs	r3, #12
 8003258:	6033      	str	r3, [r6, #0]
 800325a:	4630      	mov	r0, r6
 800325c:	f000 f80c 	bl	8003278 <__malloc_unlock>
 8003260:	e794      	b.n	800318c <_malloc_r+0x20>
 8003262:	6005      	str	r5, [r0, #0]
 8003264:	e7d6      	b.n	8003214 <_malloc_r+0xa8>
 8003266:	bf00      	nop
 8003268:	2000028c 	.word	0x2000028c

0800326c <__malloc_lock>:
 800326c:	4801      	ldr	r0, [pc, #4]	@ (8003274 <__malloc_lock+0x8>)
 800326e:	f7ff bf0f 	b.w	8003090 <__retarget_lock_acquire_recursive>
 8003272:	bf00      	nop
 8003274:	20000284 	.word	0x20000284

08003278 <__malloc_unlock>:
 8003278:	4801      	ldr	r0, [pc, #4]	@ (8003280 <__malloc_unlock+0x8>)
 800327a:	f7ff bf0a 	b.w	8003092 <__retarget_lock_release_recursive>
 800327e:	bf00      	nop
 8003280:	20000284 	.word	0x20000284

08003284 <__ssputs_r>:
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	688e      	ldr	r6, [r1, #8]
 800328a:	461f      	mov	r7, r3
 800328c:	42be      	cmp	r6, r7
 800328e:	680b      	ldr	r3, [r1, #0]
 8003290:	4682      	mov	sl, r0
 8003292:	460c      	mov	r4, r1
 8003294:	4690      	mov	r8, r2
 8003296:	d82d      	bhi.n	80032f4 <__ssputs_r+0x70>
 8003298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800329c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80032a0:	d026      	beq.n	80032f0 <__ssputs_r+0x6c>
 80032a2:	6965      	ldr	r5, [r4, #20]
 80032a4:	6909      	ldr	r1, [r1, #16]
 80032a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032aa:	eba3 0901 	sub.w	r9, r3, r1
 80032ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032b2:	1c7b      	adds	r3, r7, #1
 80032b4:	444b      	add	r3, r9
 80032b6:	106d      	asrs	r5, r5, #1
 80032b8:	429d      	cmp	r5, r3
 80032ba:	bf38      	it	cc
 80032bc:	461d      	movcc	r5, r3
 80032be:	0553      	lsls	r3, r2, #21
 80032c0:	d527      	bpl.n	8003312 <__ssputs_r+0x8e>
 80032c2:	4629      	mov	r1, r5
 80032c4:	f7ff ff52 	bl	800316c <_malloc_r>
 80032c8:	4606      	mov	r6, r0
 80032ca:	b360      	cbz	r0, 8003326 <__ssputs_r+0xa2>
 80032cc:	6921      	ldr	r1, [r4, #16]
 80032ce:	464a      	mov	r2, r9
 80032d0:	f000 fae8 	bl	80038a4 <memcpy>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	6126      	str	r6, [r4, #16]
 80032e2:	6165      	str	r5, [r4, #20]
 80032e4:	444e      	add	r6, r9
 80032e6:	eba5 0509 	sub.w	r5, r5, r9
 80032ea:	6026      	str	r6, [r4, #0]
 80032ec:	60a5      	str	r5, [r4, #8]
 80032ee:	463e      	mov	r6, r7
 80032f0:	42be      	cmp	r6, r7
 80032f2:	d900      	bls.n	80032f6 <__ssputs_r+0x72>
 80032f4:	463e      	mov	r6, r7
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	4632      	mov	r2, r6
 80032fa:	4641      	mov	r1, r8
 80032fc:	f000 faa8 	bl	8003850 <memmove>
 8003300:	68a3      	ldr	r3, [r4, #8]
 8003302:	1b9b      	subs	r3, r3, r6
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	4433      	add	r3, r6
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	2000      	movs	r0, #0
 800330e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003312:	462a      	mov	r2, r5
 8003314:	f000 fad4 	bl	80038c0 <_realloc_r>
 8003318:	4606      	mov	r6, r0
 800331a:	2800      	cmp	r0, #0
 800331c:	d1e0      	bne.n	80032e0 <__ssputs_r+0x5c>
 800331e:	6921      	ldr	r1, [r4, #16]
 8003320:	4650      	mov	r0, sl
 8003322:	f7ff feb7 	bl	8003094 <_free_r>
 8003326:	230c      	movs	r3, #12
 8003328:	f8ca 3000 	str.w	r3, [sl]
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003332:	81a3      	strh	r3, [r4, #12]
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	e7e9      	b.n	800330e <__ssputs_r+0x8a>
	...

0800333c <_svfiprintf_r>:
 800333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	4698      	mov	r8, r3
 8003342:	898b      	ldrh	r3, [r1, #12]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	b09d      	sub	sp, #116	@ 0x74
 8003348:	4607      	mov	r7, r0
 800334a:	460d      	mov	r5, r1
 800334c:	4614      	mov	r4, r2
 800334e:	d510      	bpl.n	8003372 <_svfiprintf_r+0x36>
 8003350:	690b      	ldr	r3, [r1, #16]
 8003352:	b973      	cbnz	r3, 8003372 <_svfiprintf_r+0x36>
 8003354:	2140      	movs	r1, #64	@ 0x40
 8003356:	f7ff ff09 	bl	800316c <_malloc_r>
 800335a:	6028      	str	r0, [r5, #0]
 800335c:	6128      	str	r0, [r5, #16]
 800335e:	b930      	cbnz	r0, 800336e <_svfiprintf_r+0x32>
 8003360:	230c      	movs	r3, #12
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	b01d      	add	sp, #116	@ 0x74
 800336a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336e:	2340      	movs	r3, #64	@ 0x40
 8003370:	616b      	str	r3, [r5, #20]
 8003372:	2300      	movs	r3, #0
 8003374:	9309      	str	r3, [sp, #36]	@ 0x24
 8003376:	2320      	movs	r3, #32
 8003378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800337c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003380:	2330      	movs	r3, #48	@ 0x30
 8003382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003520 <_svfiprintf_r+0x1e4>
 8003386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800338a:	f04f 0901 	mov.w	r9, #1
 800338e:	4623      	mov	r3, r4
 8003390:	469a      	mov	sl, r3
 8003392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003396:	b10a      	cbz	r2, 800339c <_svfiprintf_r+0x60>
 8003398:	2a25      	cmp	r2, #37	@ 0x25
 800339a:	d1f9      	bne.n	8003390 <_svfiprintf_r+0x54>
 800339c:	ebba 0b04 	subs.w	fp, sl, r4
 80033a0:	d00b      	beq.n	80033ba <_svfiprintf_r+0x7e>
 80033a2:	465b      	mov	r3, fp
 80033a4:	4622      	mov	r2, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	4638      	mov	r0, r7
 80033aa:	f7ff ff6b 	bl	8003284 <__ssputs_r>
 80033ae:	3001      	adds	r0, #1
 80033b0:	f000 80a7 	beq.w	8003502 <_svfiprintf_r+0x1c6>
 80033b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033b6:	445a      	add	r2, fp
 80033b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80033ba:	f89a 3000 	ldrb.w	r3, [sl]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 809f 	beq.w	8003502 <_svfiprintf_r+0x1c6>
 80033c4:	2300      	movs	r3, #0
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ce:	f10a 0a01 	add.w	sl, sl, #1
 80033d2:	9304      	str	r3, [sp, #16]
 80033d4:	9307      	str	r3, [sp, #28]
 80033d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033da:	931a      	str	r3, [sp, #104]	@ 0x68
 80033dc:	4654      	mov	r4, sl
 80033de:	2205      	movs	r2, #5
 80033e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e4:	484e      	ldr	r0, [pc, #312]	@ (8003520 <_svfiprintf_r+0x1e4>)
 80033e6:	f7fc fef3 	bl	80001d0 <memchr>
 80033ea:	9a04      	ldr	r2, [sp, #16]
 80033ec:	b9d8      	cbnz	r0, 8003426 <_svfiprintf_r+0xea>
 80033ee:	06d0      	lsls	r0, r2, #27
 80033f0:	bf44      	itt	mi
 80033f2:	2320      	movmi	r3, #32
 80033f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f8:	0711      	lsls	r1, r2, #28
 80033fa:	bf44      	itt	mi
 80033fc:	232b      	movmi	r3, #43	@ 0x2b
 80033fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003402:	f89a 3000 	ldrb.w	r3, [sl]
 8003406:	2b2a      	cmp	r3, #42	@ 0x2a
 8003408:	d015      	beq.n	8003436 <_svfiprintf_r+0xfa>
 800340a:	9a07      	ldr	r2, [sp, #28]
 800340c:	4654      	mov	r4, sl
 800340e:	2000      	movs	r0, #0
 8003410:	f04f 0c0a 	mov.w	ip, #10
 8003414:	4621      	mov	r1, r4
 8003416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800341a:	3b30      	subs	r3, #48	@ 0x30
 800341c:	2b09      	cmp	r3, #9
 800341e:	d94b      	bls.n	80034b8 <_svfiprintf_r+0x17c>
 8003420:	b1b0      	cbz	r0, 8003450 <_svfiprintf_r+0x114>
 8003422:	9207      	str	r2, [sp, #28]
 8003424:	e014      	b.n	8003450 <_svfiprintf_r+0x114>
 8003426:	eba0 0308 	sub.w	r3, r0, r8
 800342a:	fa09 f303 	lsl.w	r3, r9, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	9304      	str	r3, [sp, #16]
 8003432:	46a2      	mov	sl, r4
 8003434:	e7d2      	b.n	80033dc <_svfiprintf_r+0xa0>
 8003436:	9b03      	ldr	r3, [sp, #12]
 8003438:	1d19      	adds	r1, r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	9103      	str	r1, [sp, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	bfbb      	ittet	lt
 8003442:	425b      	neglt	r3, r3
 8003444:	f042 0202 	orrlt.w	r2, r2, #2
 8003448:	9307      	strge	r3, [sp, #28]
 800344a:	9307      	strlt	r3, [sp, #28]
 800344c:	bfb8      	it	lt
 800344e:	9204      	strlt	r2, [sp, #16]
 8003450:	7823      	ldrb	r3, [r4, #0]
 8003452:	2b2e      	cmp	r3, #46	@ 0x2e
 8003454:	d10a      	bne.n	800346c <_svfiprintf_r+0x130>
 8003456:	7863      	ldrb	r3, [r4, #1]
 8003458:	2b2a      	cmp	r3, #42	@ 0x2a
 800345a:	d132      	bne.n	80034c2 <_svfiprintf_r+0x186>
 800345c:	9b03      	ldr	r3, [sp, #12]
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	9203      	str	r2, [sp, #12]
 8003464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003468:	3402      	adds	r4, #2
 800346a:	9305      	str	r3, [sp, #20]
 800346c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003530 <_svfiprintf_r+0x1f4>
 8003470:	7821      	ldrb	r1, [r4, #0]
 8003472:	2203      	movs	r2, #3
 8003474:	4650      	mov	r0, sl
 8003476:	f7fc feab 	bl	80001d0 <memchr>
 800347a:	b138      	cbz	r0, 800348c <_svfiprintf_r+0x150>
 800347c:	9b04      	ldr	r3, [sp, #16]
 800347e:	eba0 000a 	sub.w	r0, r0, sl
 8003482:	2240      	movs	r2, #64	@ 0x40
 8003484:	4082      	lsls	r2, r0
 8003486:	4313      	orrs	r3, r2
 8003488:	3401      	adds	r4, #1
 800348a:	9304      	str	r3, [sp, #16]
 800348c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003490:	4824      	ldr	r0, [pc, #144]	@ (8003524 <_svfiprintf_r+0x1e8>)
 8003492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003496:	2206      	movs	r2, #6
 8003498:	f7fc fe9a 	bl	80001d0 <memchr>
 800349c:	2800      	cmp	r0, #0
 800349e:	d036      	beq.n	800350e <_svfiprintf_r+0x1d2>
 80034a0:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <_svfiprintf_r+0x1ec>)
 80034a2:	bb1b      	cbnz	r3, 80034ec <_svfiprintf_r+0x1b0>
 80034a4:	9b03      	ldr	r3, [sp, #12]
 80034a6:	3307      	adds	r3, #7
 80034a8:	f023 0307 	bic.w	r3, r3, #7
 80034ac:	3308      	adds	r3, #8
 80034ae:	9303      	str	r3, [sp, #12]
 80034b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034b2:	4433      	add	r3, r6
 80034b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80034b6:	e76a      	b.n	800338e <_svfiprintf_r+0x52>
 80034b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80034bc:	460c      	mov	r4, r1
 80034be:	2001      	movs	r0, #1
 80034c0:	e7a8      	b.n	8003414 <_svfiprintf_r+0xd8>
 80034c2:	2300      	movs	r3, #0
 80034c4:	3401      	adds	r4, #1
 80034c6:	9305      	str	r3, [sp, #20]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f04f 0c0a 	mov.w	ip, #10
 80034ce:	4620      	mov	r0, r4
 80034d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034d4:	3a30      	subs	r2, #48	@ 0x30
 80034d6:	2a09      	cmp	r2, #9
 80034d8:	d903      	bls.n	80034e2 <_svfiprintf_r+0x1a6>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0c6      	beq.n	800346c <_svfiprintf_r+0x130>
 80034de:	9105      	str	r1, [sp, #20]
 80034e0:	e7c4      	b.n	800346c <_svfiprintf_r+0x130>
 80034e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e6:	4604      	mov	r4, r0
 80034e8:	2301      	movs	r3, #1
 80034ea:	e7f0      	b.n	80034ce <_svfiprintf_r+0x192>
 80034ec:	ab03      	add	r3, sp, #12
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	462a      	mov	r2, r5
 80034f2:	4b0e      	ldr	r3, [pc, #56]	@ (800352c <_svfiprintf_r+0x1f0>)
 80034f4:	a904      	add	r1, sp, #16
 80034f6:	4638      	mov	r0, r7
 80034f8:	f3af 8000 	nop.w
 80034fc:	1c42      	adds	r2, r0, #1
 80034fe:	4606      	mov	r6, r0
 8003500:	d1d6      	bne.n	80034b0 <_svfiprintf_r+0x174>
 8003502:	89ab      	ldrh	r3, [r5, #12]
 8003504:	065b      	lsls	r3, r3, #25
 8003506:	f53f af2d 	bmi.w	8003364 <_svfiprintf_r+0x28>
 800350a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800350c:	e72c      	b.n	8003368 <_svfiprintf_r+0x2c>
 800350e:	ab03      	add	r3, sp, #12
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	462a      	mov	r2, r5
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <_svfiprintf_r+0x1f0>)
 8003516:	a904      	add	r1, sp, #16
 8003518:	4638      	mov	r0, r7
 800351a:	f000 f879 	bl	8003610 <_printf_i>
 800351e:	e7ed      	b.n	80034fc <_svfiprintf_r+0x1c0>
 8003520:	08003977 	.word	0x08003977
 8003524:	08003981 	.word	0x08003981
 8003528:	00000000 	.word	0x00000000
 800352c:	08003285 	.word	0x08003285
 8003530:	0800397d 	.word	0x0800397d

08003534 <_printf_common>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	4616      	mov	r6, r2
 800353a:	4698      	mov	r8, r3
 800353c:	688a      	ldr	r2, [r1, #8]
 800353e:	690b      	ldr	r3, [r1, #16]
 8003540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003544:	4293      	cmp	r3, r2
 8003546:	bfb8      	it	lt
 8003548:	4613      	movlt	r3, r2
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003550:	4607      	mov	r7, r0
 8003552:	460c      	mov	r4, r1
 8003554:	b10a      	cbz	r2, 800355a <_printf_common+0x26>
 8003556:	3301      	adds	r3, #1
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	0699      	lsls	r1, r3, #26
 800355e:	bf42      	ittt	mi
 8003560:	6833      	ldrmi	r3, [r6, #0]
 8003562:	3302      	addmi	r3, #2
 8003564:	6033      	strmi	r3, [r6, #0]
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	f015 0506 	ands.w	r5, r5, #6
 800356c:	d106      	bne.n	800357c <_printf_common+0x48>
 800356e:	f104 0a19 	add.w	sl, r4, #25
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	6832      	ldr	r2, [r6, #0]
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	42ab      	cmp	r3, r5
 800357a:	dc26      	bgt.n	80035ca <_printf_common+0x96>
 800357c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	3b00      	subs	r3, #0
 8003584:	bf18      	it	ne
 8003586:	2301      	movne	r3, #1
 8003588:	0692      	lsls	r2, r2, #26
 800358a:	d42b      	bmi.n	80035e4 <_printf_common+0xb0>
 800358c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003590:	4641      	mov	r1, r8
 8003592:	4638      	mov	r0, r7
 8003594:	47c8      	blx	r9
 8003596:	3001      	adds	r0, #1
 8003598:	d01e      	beq.n	80035d8 <_printf_common+0xa4>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	f003 0306 	and.w	r3, r3, #6
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf02      	ittt	eq
 80035a6:	68e5      	ldreq	r5, [r4, #12]
 80035a8:	6833      	ldreq	r3, [r6, #0]
 80035aa:	1aed      	subeq	r5, r5, r3
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	bf0c      	ite	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	2500      	movne	r5, #0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	bfc4      	itt	gt
 80035ba:	1a9b      	subgt	r3, r3, r2
 80035bc:	18ed      	addgt	r5, r5, r3
 80035be:	2600      	movs	r6, #0
 80035c0:	341a      	adds	r4, #26
 80035c2:	42b5      	cmp	r5, r6
 80035c4:	d11a      	bne.n	80035fc <_printf_common+0xc8>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e008      	b.n	80035dc <_printf_common+0xa8>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4652      	mov	r2, sl
 80035ce:	4641      	mov	r1, r8
 80035d0:	4638      	mov	r0, r7
 80035d2:	47c8      	blx	r9
 80035d4:	3001      	adds	r0, #1
 80035d6:	d103      	bne.n	80035e0 <_printf_common+0xac>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7c6      	b.n	8003572 <_printf_common+0x3e>
 80035e4:	18e1      	adds	r1, r4, r3
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	2030      	movs	r0, #48	@ 0x30
 80035ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ee:	4422      	add	r2, r4
 80035f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035f8:	3302      	adds	r3, #2
 80035fa:	e7c7      	b.n	800358c <_printf_common+0x58>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4622      	mov	r2, r4
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	47c8      	blx	r9
 8003606:	3001      	adds	r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa4>
 800360a:	3601      	adds	r6, #1
 800360c:	e7d9      	b.n	80035c2 <_printf_common+0x8e>
	...

08003610 <_printf_i>:
 8003610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	7e0f      	ldrb	r7, [r1, #24]
 8003616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003618:	2f78      	cmp	r7, #120	@ 0x78
 800361a:	4691      	mov	r9, r2
 800361c:	4680      	mov	r8, r0
 800361e:	460c      	mov	r4, r1
 8003620:	469a      	mov	sl, r3
 8003622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003626:	d807      	bhi.n	8003638 <_printf_i+0x28>
 8003628:	2f62      	cmp	r7, #98	@ 0x62
 800362a:	d80a      	bhi.n	8003642 <_printf_i+0x32>
 800362c:	2f00      	cmp	r7, #0
 800362e:	f000 80d2 	beq.w	80037d6 <_printf_i+0x1c6>
 8003632:	2f58      	cmp	r7, #88	@ 0x58
 8003634:	f000 80b9 	beq.w	80037aa <_printf_i+0x19a>
 8003638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800363c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003640:	e03a      	b.n	80036b8 <_printf_i+0xa8>
 8003642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003646:	2b15      	cmp	r3, #21
 8003648:	d8f6      	bhi.n	8003638 <_printf_i+0x28>
 800364a:	a101      	add	r1, pc, #4	@ (adr r1, 8003650 <_printf_i+0x40>)
 800364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003639 	.word	0x08003639
 800365c:	08003639 	.word	0x08003639
 8003660:	08003639 	.word	0x08003639
 8003664:	08003639 	.word	0x08003639
 8003668:	080036bd 	.word	0x080036bd
 800366c:	08003639 	.word	0x08003639
 8003670:	08003639 	.word	0x08003639
 8003674:	08003639 	.word	0x08003639
 8003678:	08003639 	.word	0x08003639
 800367c:	080037bd 	.word	0x080037bd
 8003680:	080036e7 	.word	0x080036e7
 8003684:	08003777 	.word	0x08003777
 8003688:	08003639 	.word	0x08003639
 800368c:	08003639 	.word	0x08003639
 8003690:	080037df 	.word	0x080037df
 8003694:	08003639 	.word	0x08003639
 8003698:	080036e7 	.word	0x080036e7
 800369c:	08003639 	.word	0x08003639
 80036a0:	08003639 	.word	0x08003639
 80036a4:	0800377f 	.word	0x0800377f
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6032      	str	r2, [r6, #0]
 80036b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e09d      	b.n	80037f8 <_printf_i+0x1e8>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	6031      	str	r1, [r6, #0]
 80036c4:	0606      	lsls	r6, r0, #24
 80036c6:	d501      	bpl.n	80036cc <_printf_i+0xbc>
 80036c8:	681d      	ldr	r5, [r3, #0]
 80036ca:	e003      	b.n	80036d4 <_printf_i+0xc4>
 80036cc:	0645      	lsls	r5, r0, #25
 80036ce:	d5fb      	bpl.n	80036c8 <_printf_i+0xb8>
 80036d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	da03      	bge.n	80036e0 <_printf_i+0xd0>
 80036d8:	232d      	movs	r3, #45	@ 0x2d
 80036da:	426d      	negs	r5, r5
 80036dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e0:	4859      	ldr	r0, [pc, #356]	@ (8003848 <_printf_i+0x238>)
 80036e2:	230a      	movs	r3, #10
 80036e4:	e011      	b.n	800370a <_printf_i+0xfa>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	0608      	lsls	r0, r1, #24
 80036ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80036f0:	d402      	bmi.n	80036f8 <_printf_i+0xe8>
 80036f2:	0649      	lsls	r1, r1, #25
 80036f4:	bf48      	it	mi
 80036f6:	b2ad      	uxthmi	r5, r5
 80036f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036fa:	4853      	ldr	r0, [pc, #332]	@ (8003848 <_printf_i+0x238>)
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	bf14      	ite	ne
 8003700:	230a      	movne	r3, #10
 8003702:	2308      	moveq	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800370a:	6866      	ldr	r6, [r4, #4]
 800370c:	60a6      	str	r6, [r4, #8]
 800370e:	2e00      	cmp	r6, #0
 8003710:	bfa2      	ittt	ge
 8003712:	6821      	ldrge	r1, [r4, #0]
 8003714:	f021 0104 	bicge.w	r1, r1, #4
 8003718:	6021      	strge	r1, [r4, #0]
 800371a:	b90d      	cbnz	r5, 8003720 <_printf_i+0x110>
 800371c:	2e00      	cmp	r6, #0
 800371e:	d04b      	beq.n	80037b8 <_printf_i+0x1a8>
 8003720:	4616      	mov	r6, r2
 8003722:	fbb5 f1f3 	udiv	r1, r5, r3
 8003726:	fb03 5711 	mls	r7, r3, r1, r5
 800372a:	5dc7      	ldrb	r7, [r0, r7]
 800372c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003730:	462f      	mov	r7, r5
 8003732:	42bb      	cmp	r3, r7
 8003734:	460d      	mov	r5, r1
 8003736:	d9f4      	bls.n	8003722 <_printf_i+0x112>
 8003738:	2b08      	cmp	r3, #8
 800373a:	d10b      	bne.n	8003754 <_printf_i+0x144>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	07df      	lsls	r7, r3, #31
 8003740:	d508      	bpl.n	8003754 <_printf_i+0x144>
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	6861      	ldr	r1, [r4, #4]
 8003746:	4299      	cmp	r1, r3
 8003748:	bfde      	ittt	le
 800374a:	2330      	movle	r3, #48	@ 0x30
 800374c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003754:	1b92      	subs	r2, r2, r6
 8003756:	6122      	str	r2, [r4, #16]
 8003758:	f8cd a000 	str.w	sl, [sp]
 800375c:	464b      	mov	r3, r9
 800375e:	aa03      	add	r2, sp, #12
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f7ff fee6 	bl	8003534 <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	d14a      	bne.n	8003802 <_printf_i+0x1f2>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b004      	add	sp, #16
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	4833      	ldr	r0, [pc, #204]	@ (800384c <_printf_i+0x23c>)
 8003780:	2778      	movs	r7, #120	@ 0x78
 8003782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	6831      	ldr	r1, [r6, #0]
 800378a:	061f      	lsls	r7, r3, #24
 800378c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003790:	d402      	bmi.n	8003798 <_printf_i+0x188>
 8003792:	065f      	lsls	r7, r3, #25
 8003794:	bf48      	it	mi
 8003796:	b2ad      	uxthmi	r5, r5
 8003798:	6031      	str	r1, [r6, #0]
 800379a:	07d9      	lsls	r1, r3, #31
 800379c:	bf44      	itt	mi
 800379e:	f043 0320 	orrmi.w	r3, r3, #32
 80037a2:	6023      	strmi	r3, [r4, #0]
 80037a4:	b11d      	cbz	r5, 80037ae <_printf_i+0x19e>
 80037a6:	2310      	movs	r3, #16
 80037a8:	e7ac      	b.n	8003704 <_printf_i+0xf4>
 80037aa:	4827      	ldr	r0, [pc, #156]	@ (8003848 <_printf_i+0x238>)
 80037ac:	e7e9      	b.n	8003782 <_printf_i+0x172>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f023 0320 	bic.w	r3, r3, #32
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	e7f6      	b.n	80037a6 <_printf_i+0x196>
 80037b8:	4616      	mov	r6, r2
 80037ba:	e7bd      	b.n	8003738 <_printf_i+0x128>
 80037bc:	6833      	ldr	r3, [r6, #0]
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	6961      	ldr	r1, [r4, #20]
 80037c2:	1d18      	adds	r0, r3, #4
 80037c4:	6030      	str	r0, [r6, #0]
 80037c6:	062e      	lsls	r6, r5, #24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	d501      	bpl.n	80037d0 <_printf_i+0x1c0>
 80037cc:	6019      	str	r1, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <_printf_i+0x1c6>
 80037d0:	0668      	lsls	r0, r5, #25
 80037d2:	d5fb      	bpl.n	80037cc <_printf_i+0x1bc>
 80037d4:	8019      	strh	r1, [r3, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	6123      	str	r3, [r4, #16]
 80037da:	4616      	mov	r6, r2
 80037dc:	e7bc      	b.n	8003758 <_printf_i+0x148>
 80037de:	6833      	ldr	r3, [r6, #0]
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	6032      	str	r2, [r6, #0]
 80037e4:	681e      	ldr	r6, [r3, #0]
 80037e6:	6862      	ldr	r2, [r4, #4]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7fc fcf0 	bl	80001d0 <memchr>
 80037f0:	b108      	cbz	r0, 80037f6 <_printf_i+0x1e6>
 80037f2:	1b80      	subs	r0, r0, r6
 80037f4:	6060      	str	r0, [r4, #4]
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	2300      	movs	r3, #0
 80037fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003800:	e7aa      	b.n	8003758 <_printf_i+0x148>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	4632      	mov	r2, r6
 8003806:	4649      	mov	r1, r9
 8003808:	4640      	mov	r0, r8
 800380a:	47d0      	blx	sl
 800380c:	3001      	adds	r0, #1
 800380e:	d0ad      	beq.n	800376c <_printf_i+0x15c>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	079b      	lsls	r3, r3, #30
 8003814:	d413      	bmi.n	800383e <_printf_i+0x22e>
 8003816:	68e0      	ldr	r0, [r4, #12]
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	4298      	cmp	r0, r3
 800381c:	bfb8      	it	lt
 800381e:	4618      	movlt	r0, r3
 8003820:	e7a6      	b.n	8003770 <_printf_i+0x160>
 8003822:	2301      	movs	r3, #1
 8003824:	4632      	mov	r2, r6
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	47d0      	blx	sl
 800382c:	3001      	adds	r0, #1
 800382e:	d09d      	beq.n	800376c <_printf_i+0x15c>
 8003830:	3501      	adds	r5, #1
 8003832:	68e3      	ldr	r3, [r4, #12]
 8003834:	9903      	ldr	r1, [sp, #12]
 8003836:	1a5b      	subs	r3, r3, r1
 8003838:	42ab      	cmp	r3, r5
 800383a:	dcf2      	bgt.n	8003822 <_printf_i+0x212>
 800383c:	e7eb      	b.n	8003816 <_printf_i+0x206>
 800383e:	2500      	movs	r5, #0
 8003840:	f104 0619 	add.w	r6, r4, #25
 8003844:	e7f5      	b.n	8003832 <_printf_i+0x222>
 8003846:	bf00      	nop
 8003848:	08003988 	.word	0x08003988
 800384c:	08003999 	.word	0x08003999

08003850 <memmove>:
 8003850:	4288      	cmp	r0, r1
 8003852:	b510      	push	{r4, lr}
 8003854:	eb01 0402 	add.w	r4, r1, r2
 8003858:	d902      	bls.n	8003860 <memmove+0x10>
 800385a:	4284      	cmp	r4, r0
 800385c:	4623      	mov	r3, r4
 800385e:	d807      	bhi.n	8003870 <memmove+0x20>
 8003860:	1e43      	subs	r3, r0, #1
 8003862:	42a1      	cmp	r1, r4
 8003864:	d008      	beq.n	8003878 <memmove+0x28>
 8003866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800386a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800386e:	e7f8      	b.n	8003862 <memmove+0x12>
 8003870:	4402      	add	r2, r0
 8003872:	4601      	mov	r1, r0
 8003874:	428a      	cmp	r2, r1
 8003876:	d100      	bne.n	800387a <memmove+0x2a>
 8003878:	bd10      	pop	{r4, pc}
 800387a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800387e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003882:	e7f7      	b.n	8003874 <memmove+0x24>

08003884 <_sbrk_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d06      	ldr	r5, [pc, #24]	@ (80038a0 <_sbrk_r+0x1c>)
 8003888:	2300      	movs	r3, #0
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd fd92 	bl	80013b8 <_sbrk>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_sbrk_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_sbrk_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000280 	.word	0x20000280

080038a4 <memcpy>:
 80038a4:	440a      	add	r2, r1
 80038a6:	4291      	cmp	r1, r2
 80038a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	b510      	push	{r4, lr}
 80038b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ba:	4291      	cmp	r1, r2
 80038bc:	d1f9      	bne.n	80038b2 <memcpy+0xe>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <_realloc_r>:
 80038c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c4:	4680      	mov	r8, r0
 80038c6:	4615      	mov	r5, r2
 80038c8:	460c      	mov	r4, r1
 80038ca:	b921      	cbnz	r1, 80038d6 <_realloc_r+0x16>
 80038cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038d0:	4611      	mov	r1, r2
 80038d2:	f7ff bc4b 	b.w	800316c <_malloc_r>
 80038d6:	b92a      	cbnz	r2, 80038e4 <_realloc_r+0x24>
 80038d8:	f7ff fbdc 	bl	8003094 <_free_r>
 80038dc:	2400      	movs	r4, #0
 80038de:	4620      	mov	r0, r4
 80038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e4:	f000 f81a 	bl	800391c <_malloc_usable_size_r>
 80038e8:	4285      	cmp	r5, r0
 80038ea:	4606      	mov	r6, r0
 80038ec:	d802      	bhi.n	80038f4 <_realloc_r+0x34>
 80038ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80038f2:	d8f4      	bhi.n	80038de <_realloc_r+0x1e>
 80038f4:	4629      	mov	r1, r5
 80038f6:	4640      	mov	r0, r8
 80038f8:	f7ff fc38 	bl	800316c <_malloc_r>
 80038fc:	4607      	mov	r7, r0
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0ec      	beq.n	80038dc <_realloc_r+0x1c>
 8003902:	42b5      	cmp	r5, r6
 8003904:	462a      	mov	r2, r5
 8003906:	4621      	mov	r1, r4
 8003908:	bf28      	it	cs
 800390a:	4632      	movcs	r2, r6
 800390c:	f7ff ffca 	bl	80038a4 <memcpy>
 8003910:	4621      	mov	r1, r4
 8003912:	4640      	mov	r0, r8
 8003914:	f7ff fbbe 	bl	8003094 <_free_r>
 8003918:	463c      	mov	r4, r7
 800391a:	e7e0      	b.n	80038de <_realloc_r+0x1e>

0800391c <_malloc_usable_size_r>:
 800391c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003920:	1f18      	subs	r0, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfbc      	itt	lt
 8003926:	580b      	ldrlt	r3, [r1, r0]
 8003928:	18c0      	addlt	r0, r0, r3
 800392a:	4770      	bx	lr

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
