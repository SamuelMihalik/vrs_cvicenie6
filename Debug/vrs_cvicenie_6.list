
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080064d0  080064d0  000074d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006880  08006880  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006880  08006880  00007880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006888  08006888  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00007888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800688c  0800688c  0000788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006890  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000238  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008146  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002227  00000000  00000000  0001034a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  00012578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e2  00000000  00000000  00013068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd58  00000000  00000000  0001384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbfa  00000000  00000000  000315a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2e01  00000000  00000000  0003d19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dff9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c2c  00000000  00000000  000dffe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000e3c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064b8 	.word	0x080064b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080064b8 	.word	0x080064b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	@ (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <MX_DMA_Init+0x68>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <MX_DMA_Init+0x68>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_DMA_Init+0x68>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cda:	f7ff ff65 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffb5 	bl	8000c54 <NVIC_EncodePriority>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4619      	mov	r1, r3
 8000cee:	2010      	movs	r0, #16
 8000cf0:	f7ff ff86 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cf4:	2010      	movs	r0, #16
 8000cf6:	f7ff ff65 	bl	8000bc4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cfa:	f7ff ff55 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ffa5 	bl	8000c54 <NVIC_EncodePriority>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2011      	movs	r0, #17
 8000d10:	f7ff ff76 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d14:	2011      	movs	r0, #17
 8000d16:	f7ff ff55 	bl	8000bc4 <__NVIC_EnableIRQ>

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d32:	695a      	ldr	r2, [r3, #20]
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4013      	ands	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000

08000d58 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d5c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000d60:	f7ff ffe2 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d64:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000d68:	f7ff ffde 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <__NVIC_GetPriorityGrouping>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f043 0201 	orr.w	r2, r3, #1
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000ef6:	f023 0306 	bic.w	r3, r3, #6
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	60da      	str	r2, [r3, #12]
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60da      	str	r2, [r3, #12]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d101      	bne.n	8000f4a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d101      	bne.n	8000f70 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0320 	and.w	r3, r3, #32
 8000f8e:	2b20      	cmp	r3, #32
 8000f90:	d101      	bne.n	8000f96 <LL_I2C_IsActiveFlag_STOP+0x18>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb4:	2b40      	cmp	r3, #64	@ 0x40
 8000fb6:	d101      	bne.n	8000fbc <LL_I2C_IsActiveFlag_TC+0x18>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <LL_I2C_IsActiveFlag_TC+0x1a>
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f043 0220 	orr.w	r2, r3, #32
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	61da      	str	r2, [r3, #28]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001046:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001050:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	4313      	orrs	r3, r2
 800105a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800105e:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	0d5b      	lsrs	r3, r3, #21
 8001068:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <LL_I2C_HandleTransfer+0x5c>)
 800106e:	430b      	orrs	r3, r1
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	431a      	orrs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	03ff7bff 	.word	0x03ff7bff

0800108c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_AHB1_GRP1_EnableClock>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000

080010f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010fe:	69da      	ldr	r2, [r3, #28]
 8001100:	4907      	ldr	r1, [pc, #28]	@ (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000

08001124 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800114e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001152:	f7ff ffb7 	bl	80010c4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001156:	23c0      	movs	r3, #192	@ 0xc0
 8001158:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800115a:	2302      	movs	r3, #2
 800115c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001162:	2301      	movs	r3, #1
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800116a:	2304      	movs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4821      	ldr	r0, [pc, #132]	@ (80011f8 <MX_I2C1_Init+0xd4>)
 8001174:	f001 fc58 	bl	8002a28 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001178:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800117c:	f7ff ffba 	bl	80010f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN I2C1_Init 1 */
    NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001180:	f7ff fdf6 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8001184:	4603      	mov	r3, r0
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fe46 	bl	8000e1c <NVIC_EncodePriority>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	201f      	movs	r0, #31
 8001196:	f7ff fe17 	bl	8000dc8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(I2C1_EV_IRQn);
 800119a:	201f      	movs	r0, #31
 800119c:	f7ff fdf6 	bl	8000d8c <__NVIC_EnableIRQ>

    /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80011a0:	4816      	ldr	r0, [pc, #88]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011a2:	f7ff ff22 	bl	8000fea <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80011a6:	4815      	ldr	r0, [pc, #84]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011a8:	f7ff feb3 	bl	8000f12 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011ae:	f7ff fe88 	bl	8000ec2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80011b2:	4812      	ldr	r0, [pc, #72]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011b4:	f7ff fe75 	bl	8000ea2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_I2C1_Init+0xdc>)
 80011be:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011dc:	f001 fd37 	bl	8002c4e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011e6:	f7ff fe7c 	bl	8000ee2 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80011ea:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_I2C1_Init+0xd8>)
 80011ec:	f7ff fe49 	bl	8000e82 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	@ 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	48000400 	.word	0x48000400
 80011fc:	40005400 	.word	0x40005400
 8001200:	2000090e 	.word	0x2000090e

08001204 <i2c_master_write>:

/* USER CODE BEGIN 1 */


void i2c_master_write(uint8_t slave_address, uint8_t register_address, uint8_t* data, uint8_t size) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	603a      	str	r2, [r7, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	460b      	mov	r3, r1
 8001214:	71bb      	strb	r3, [r7, #6]
 8001216:	4613      	mov	r3, r2
 8001218:	717b      	strb	r3, [r7, #5]

	if(size > 1) {
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d902      	bls.n	8001226 <i2c_master_write+0x22>
		register_address = register_address + 128;
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	3b80      	subs	r3, #128	@ 0x80
 8001224:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, size + 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8001226:	79f9      	ldrb	r1, [r7, #7]
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	3301      	adds	r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <i2c_master_write+0xb8>)
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4613      	mov	r3, r2
 8001238:	2200      	movs	r2, #0
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <i2c_master_write+0xbc>)
 800123c:	f7ff fef6 	bl	800102c <LL_I2C_HandleTransfer>
    while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 8001240:	bf00      	nop
 8001242:	481f      	ldr	r0, [pc, #124]	@ (80012c0 <i2c_master_write+0xbc>)
 8001244:	f7ff fe75 	bl	8000f32 <LL_I2C_IsActiveFlag_TXIS>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f9      	beq.n	8001242 <i2c_master_write+0x3e>
    LL_I2C_TransmitData8(I2C1, register_address);
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4619      	mov	r1, r3
 8001252:	481b      	ldr	r0, [pc, #108]	@ (80012c0 <i2c_master_write+0xbc>)
 8001254:	f7ff ff27 	bl	80010a6 <LL_I2C_TransmitData8>

    for (uint8_t i = 0; i < size; i++) {
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e011      	b.n	8001282 <i2c_master_write+0x7e>
		while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 800125e:	bf00      	nop
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <i2c_master_write+0xbc>)
 8001262:	f7ff fe66 	bl	8000f32 <LL_I2C_IsActiveFlag_TXIS>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f9      	beq.n	8001260 <i2c_master_write+0x5c>
		LL_I2C_TransmitData8(I2C1, data[i]);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <i2c_master_write+0xbc>)
 8001278:	f7ff ff15 	bl	80010a6 <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < size; i++) {
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	3301      	adds	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	797b      	ldrb	r3, [r7, #5]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3e9      	bcc.n	800125e <i2c_master_write+0x5a>
    }

    while (!LL_I2C_IsActiveFlag_TC(I2C1));
 800128a:	bf00      	nop
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <i2c_master_write+0xbc>)
 800128e:	f7ff fe89 	bl	8000fa4 <LL_I2C_IsActiveFlag_TC>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <i2c_master_write+0x88>
	LL_I2C_GenerateStopCondition(I2C1);
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <i2c_master_write+0xbc>)
 800129a:	f7ff feb6 	bl	800100a <LL_I2C_GenerateStopCondition>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800129e:	bf00      	nop
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <i2c_master_write+0xbc>)
 80012a2:	f7ff fe6c 	bl	8000f7e <LL_I2C_IsActiveFlag_STOP>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f9      	beq.n	80012a0 <i2c_master_write+0x9c>
	LL_I2C_ClearFlag_STOP(I2C1);
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <i2c_master_write+0xbc>)
 80012ae:	f7ff fe8c 	bl	8000fca <LL_I2C_ClearFlag_STOP>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	80002000 	.word	0x80002000
 80012c0:	40005400 	.word	0x40005400

080012c4 <i2c_master_read>:

void i2c_master_read(uint8_t slave_address, uint8_t register_address, uint8_t* data, uint8_t size) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	460b      	mov	r3, r1
 80012d4:	71bb      	strb	r3, [r7, #6]
 80012d6:	4613      	mov	r3, r2
 80012d8:	717b      	strb	r3, [r7, #5]

	if(size > 1) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d902      	bls.n	80012e6 <i2c_master_read+0x22>
		register_address = register_address + 128;
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	3b80      	subs	r3, #128	@ 0x80
 80012e4:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 80012e6:	79f9      	ldrb	r1, [r7, #7]
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <i2c_master_read+0xc4>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2200      	movs	r2, #0
 80012f4:	4825      	ldr	r0, [pc, #148]	@ (800138c <i2c_master_read+0xc8>)
 80012f6:	f7ff fe99 	bl	800102c <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80012fa:	bf00      	nop
 80012fc:	4823      	ldr	r0, [pc, #140]	@ (800138c <i2c_master_read+0xc8>)
 80012fe:	f7ff fe18 	bl	8000f32 <LL_I2C_IsActiveFlag_TXIS>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f9      	beq.n	80012fc <i2c_master_read+0x38>
	LL_I2C_TransmitData8(I2C1, register_address);
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	4619      	mov	r1, r3
 800130c:	481f      	ldr	r0, [pc, #124]	@ (800138c <i2c_master_read+0xc8>)
 800130e:	f7ff feca 	bl	80010a6 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TC(I2C1)){};
 8001312:	bf00      	nop
 8001314:	481d      	ldr	r0, [pc, #116]	@ (800138c <i2c_master_read+0xc8>)
 8001316:	f7ff fe45 	bl	8000fa4 <LL_I2C_IsActiveFlag_TC>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f9      	beq.n	8001314 <i2c_master_read+0x50>

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, size, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_READ);
 8001320:	79f9      	ldrb	r1, [r7, #7]
 8001322:	797b      	ldrb	r3, [r7, #5]
 8001324:	4a1a      	ldr	r2, [pc, #104]	@ (8001390 <i2c_master_read+0xcc>)
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	4817      	ldr	r0, [pc, #92]	@ (800138c <i2c_master_read+0xc8>)
 8001330:	f7ff fe7c 	bl	800102c <LL_I2C_HandleTransfer>
	for (uint8_t i = 0; i < size; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e011      	b.n	800135e <i2c_master_read+0x9a>
	{
		while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 800133a:	bf00      	nop
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <i2c_master_read+0xc8>)
 800133e:	f7ff fe0b 	bl	8000f58 <LL_I2C_IsActiveFlag_RXNE>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f9      	beq.n	800133c <i2c_master_read+0x78>
		data[i] = LL_I2C_ReceiveData8(I2C1);
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	18d4      	adds	r4, r2, r3
 800134e:	480f      	ldr	r0, [pc, #60]	@ (800138c <i2c_master_read+0xc8>)
 8001350:	f7ff fe9c 	bl	800108c <LL_I2C_ReceiveData8>
 8001354:	4603      	mov	r3, r0
 8001356:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < size; i++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3e9      	bcc.n	800133a <i2c_master_read+0x76>
	}

	LL_I2C_GenerateStopCondition(I2C1);
 8001366:	4809      	ldr	r0, [pc, #36]	@ (800138c <i2c_master_read+0xc8>)
 8001368:	f7ff fe4f 	bl	800100a <LL_I2C_GenerateStopCondition>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800136c:	bf00      	nop
 800136e:	4807      	ldr	r0, [pc, #28]	@ (800138c <i2c_master_read+0xc8>)
 8001370:	f7ff fe05 	bl	8000f7e <LL_I2C_IsActiveFlag_STOP>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f9      	beq.n	800136e <i2c_master_read+0xaa>
	LL_I2C_ClearFlag_STOP(I2C1);
 800137a:	4804      	ldr	r0, [pc, #16]	@ (800138c <i2c_master_read+0xc8>)
 800137c:	f7ff fe25 	bl	8000fca <LL_I2C_ClearFlag_STOP>
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	80002000 	.word	0x80002000
 800138c:	40005400 	.word	0x40005400
 8001390:	80002400 	.word	0x80002400

08001394 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <__NVIC_SetPriorityGrouping>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <LL_RCC_HSI_Enable+0x1c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <LL_RCC_HSI_Enable+0x1c>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <LL_RCC_HSI_IsReady+0x20>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b02      	cmp	r3, #2
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000

08001430 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4904      	ldr	r1, [pc, #16]	@ (8001458 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <LL_RCC_SetSysClkSource+0x24>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 0203 	bic.w	r2, r3, #3
 800146c:	4904      	ldr	r1, [pc, #16]	@ (8001480 <LL_RCC_SetSysClkSource+0x24>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <LL_RCC_GetSysClkSource+0x18>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014d8:	4904      	ldr	r1, [pc, #16]	@ (80014ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000

080014f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001500:	4904      	ldr	r1, [pc, #16]	@ (8001514 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <LL_RCC_SetI2CClockSource+0x2c>)
 8001522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0e1b      	lsrs	r3, r3, #24
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001532:	4904      	ldr	r1, [pc, #16]	@ (8001544 <LL_RCC_SetI2CClockSource+0x2c>)
 8001534:	4313      	orrs	r3, r2
 8001536:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000

08001548 <LL_APB1_GRP1_EnableClock>:
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4313      	orrs	r3, r2
 800155a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <LL_APB1_GRP1_EnableClock+0x2c>)
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000

08001578 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	4907      	ldr	r1, [pc, #28]	@ (80015a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000

080015a8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <LL_FLASH_SetLatency+0x24>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 0207 	bic.w	r2, r3, #7
 80015b8:	4904      	ldr	r1, [pc, #16]	@ (80015cc <LL_FLASH_SetLatency+0x24>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40022000 	.word	0x40022000

080015d0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <LL_FLASH_GetLatency+0x18>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffbf 	bl	8001578 <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80015fa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80015fe:	f7ff ffa3 	bl	8001548 <LL_APB1_GRP1_EnableClock>

	  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	2003      	movs	r0, #3
 8001604:	f7ff fece 	bl	80013a4 <__NVIC_SetPriorityGrouping>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001608:	f000 ffca 	bl	80025a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160c:	f000 f87e 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f7ff fba2 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001614:	f7ff fb52 	bl	8000cbc <MX_DMA_Init>
  MX_I2C1_Init();
 8001618:	f7ff fd84 	bl	8001124 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800161c:	f000 fe48 	bl	80022b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HTS221_Init(i2c_master_read, i2c_master_write);
 8001620:	4931      	ldr	r1, [pc, #196]	@ (80016e8 <main+0xfc>)
 8001622:	4832      	ldr	r0, [pc, #200]	@ (80016ec <main+0x100>)
 8001624:	f001 fe68 	bl	80032f8 <HTS221_Init>
  LPS25HB_Init(i2c_master_read, i2c_master_write);
 8001628:	492f      	ldr	r1, [pc, #188]	@ (80016e8 <main+0xfc>)
 800162a:	4830      	ldr	r0, [pc, #192]	@ (80016ec <main+0x100>)
 800162c:	f002 f82e 	bl	800368c <LPS25HB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LL_mDelay(100);
 8001630:	2064      	movs	r0, #100	@ 0x64
 8001632:	f001 fdcb 	bl	80031cc <LL_mDelay>

    temperature_h = HTS221_get_temperature();
 8001636:	f001 ff21 	bl	800347c <HTS221_get_temperature>
 800163a:	4603      	mov	r3, r0
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <main+0x104>)
 8001646:	edc3 7a00 	vstr	s15, [r3]
    temperature_l = LPS25HB_get_temperature();
 800164a:	f002 f89f 	bl	800378c <LPS25HB_get_temperature>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <main+0x108>)
 8001654:	edc3 7a00 	vstr	s15, [r3]
    pressure = LPS25HB_get_pressure();
 8001658:	f002 f86c 	bl	8003734 <LPS25HB_get_pressure>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <main+0x10c>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
    height = LPS25HB_get_height();
 8001666:	f002 f8c1 	bl	80037ec <LPS25HB_get_height>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <main+0x110>)
 8001670:	edc3 7a00 	vstr	s15, [r3]
    humidity = HTS221_get_humidity();
 8001674:	f001 fe7c 	bl	8003370 <HTS221_get_humidity>
 8001678:	4603      	mov	r3, r0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <main+0x114>)
 800167e:	701a      	strb	r2, [r3, #0]

    memset(formated_text, '\0', sizeof(formated_text));
 8001680:	221e      	movs	r2, #30
 8001682:	2100      	movs	r1, #0
 8001684:	481f      	ldr	r0, [pc, #124]	@ (8001704 <main+0x118>)
 8001686:	f002 fe4e 	bl	8004326 <memset>

    sprintf(formated_text, "%.1f,%.d,%.2f,%.2f\n\r", temperature_l, humidity, pressure, height);
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <main+0x108>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff5a 	bl	8000548 <__aeabi_f2d>
 8001694:	4680      	mov	r8, r0
 8001696:	4689      	mov	r9, r1
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <main+0x114>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461e      	mov	r6, r3
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <main+0x10c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff50 	bl	8000548 <__aeabi_f2d>
 80016a8:	4604      	mov	r4, r0
 80016aa:	460d      	mov	r5, r1
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <main+0x110>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80016c2:	9600      	str	r6, [sp, #0]
 80016c4:	4642      	mov	r2, r8
 80016c6:	464b      	mov	r3, r9
 80016c8:	490f      	ldr	r1, [pc, #60]	@ (8001708 <main+0x11c>)
 80016ca:	480e      	ldr	r0, [pc, #56]	@ (8001704 <main+0x118>)
 80016cc:	f002 fdc8 	bl	8004260 <siprintf>
    USART2_PutBuffer((uint8_t*)formated_text, strlen(formated_text));
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <main+0x118>)
 80016d2:	f7fe fdcd 	bl	8000270 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <main+0x118>)
 80016de:	f000 ff15 	bl	800250c <USART2_PutBuffer>
    LL_mDelay(100);
 80016e2:	bf00      	nop
 80016e4:	e7a4      	b.n	8001630 <main+0x44>
 80016e6:	bf00      	nop
 80016e8:	08001205 	.word	0x08001205
 80016ec:	080012c5 	.word	0x080012c5
 80016f0:	200001f4 	.word	0x200001f4
 80016f4:	200001f8 	.word	0x200001f8
 80016f8:	200001fc 	.word	0x200001fc
 80016fc:	20000200 	.word	0x20000200
 8001700:	200001f0 	.word	0x200001f0
 8001704:	20000204 	.word	0x20000204
 8001708:	080064d0 	.word	0x080064d0

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff ff49 	bl	80015a8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001716:	bf00      	nop
 8001718:	f7ff ff5a 	bl	80015d0 <LL_FLASH_GetLatency>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1fa      	bne.n	8001718 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001722:	f7ff fe63 	bl	80013ec <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001726:	bf00      	nop
 8001728:	f7ff fe70 	bl	800140c <LL_RCC_HSI_IsReady>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d1fa      	bne.n	8001728 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001732:	2010      	movs	r0, #16
 8001734:	f7ff fe7c 	bl	8001430 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff feb1 	bl	80014a0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fec2 	bl	80014c8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fed3 	bl	80014f0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fe86 	bl	800145c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001750:	bf00      	nop
 8001752:	f7ff fe97 	bl	8001484 <LL_RCC_GetSysClkSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1fa      	bne.n	8001752 <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 800175c:	4808      	ldr	r0, [pc, #32]	@ (8001780 <SystemClock_Config+0x74>)
 800175e:	f001 fd5b 	bl	8003218 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001762:	200f      	movs	r0, #15
 8001764:	f000 ff32 	bl	80025cc <HAL_InitTick>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800176e:	f000 f809 	bl	8001784 <Error_Handler>
  }
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001772:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001776:	f7ff fecf 	bl	8001518 <LL_RCC_SetI2CClockSource>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	007a1200 	.word	0x007a1200

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_MspInit+0x44>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_MspInit+0x44>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_MspInit+0x44>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_MspInit+0x44>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <LL_DMA_DisableChannel+0x3c>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	3a01      	subs	r2, #1
 80017f6:	4907      	ldr	r1, [pc, #28]	@ (8001814 <LL_DMA_DisableChannel+0x3c>)
 80017f8:	5c8a      	ldrb	r2, [r1, r2]
 80017fa:	4611      	mov	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	440a      	add	r2, r1
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	080064e8 	.word	0x080064e8

08001818 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800187c:	bf0c      	ite	eq
 800187e:	2301      	moveq	r3, #1
 8001880:	2300      	movne	r3, #0
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800189e:	605a      	str	r2, [r3, #4]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018ba:	605a      	str	r2, [r3, #4]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018d6:	605a      	str	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b10      	cmp	r3, #16
 80018f6:	d101      	bne.n	80018fc <LL_USART_IsActiveFlag_IDLE+0x18>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_USART_IsActiveFlag_IDLE+0x1a>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191a:	2b40      	cmp	r3, #64	@ 0x40
 800191c:	d101      	bne.n	8001922 <LL_USART_IsActiveFlag_TC+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_USART_IsActiveFlag_TC+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2210      	movs	r2, #16
 800193c:	621a      	str	r2, [r3, #32]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194e:	bf00      	nop
 8001950:	e7fd      	b.n	800194e <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	bf00      	nop
 8001958:	e7fd      	b.n	8001956 <HardFault_Handler+0x4>

0800195a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195e:	bf00      	nop
 8001960:	e7fd      	b.n	800195e <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	bf00      	nop
 8001968:	e7fd      	b.n	8001966 <BusFault_Handler+0x4>

0800196a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196e:	bf00      	nop
 8001970:	e7fd      	b.n	800196e <UsageFault_Handler+0x4>

08001972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 fe44 	bl	800262c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80019ac:	480a      	ldr	r0, [pc, #40]	@ (80019d8 <DMA1_Channel6_IRQHandler+0x30>)
 80019ae:	f7ff ff33 	bl	8001818 <LL_DMA_IsActiveFlag_TC6>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d103      	bne.n	80019c0 <DMA1_Channel6_IRQHandler+0x18>
			{

				LL_DMA_ClearFlag_TC6(DMA1);
 80019b8:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <DMA1_Channel6_IRQHandler+0x30>)
 80019ba:	f7ff ff69 	bl	8001890 <LL_DMA_ClearFlag_TC6>
			}
			else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
			{
				LL_DMA_ClearFlag_HT6(DMA1);
			}
}
 80019be:	e008      	b.n	80019d2 <DMA1_Channel6_IRQHandler+0x2a>
			else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <DMA1_Channel6_IRQHandler+0x30>)
 80019c2:	f7ff ff51 	bl	8001868 <LL_DMA_IsActiveFlag_HT6>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d102      	bne.n	80019d2 <DMA1_Channel6_IRQHandler+0x2a>
				LL_DMA_ClearFlag_HT6(DMA1);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <DMA1_Channel6_IRQHandler+0x30>)
 80019ce:	f7ff ff7b 	bl	80018c8 <LL_DMA_ClearFlag_HT6>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020000 	.word	0x40020000

080019dc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80019e0:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <DMA1_Channel7_IRQHandler+0x30>)
 80019e2:	f7ff ff2d 	bl	8001840 <LL_DMA_IsActiveFlag_TC7>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d10d      	bne.n	8001a08 <DMA1_Channel7_IRQHandler+0x2c>
			{
				LL_DMA_ClearFlag_TC7(DMA1);
 80019ec:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <DMA1_Channel7_IRQHandler+0x30>)
 80019ee:	f7ff ff5d 	bl	80018ac <LL_DMA_ClearFlag_TC7>

				while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80019f2:	bf00      	nop
 80019f4:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <DMA1_Channel7_IRQHandler+0x34>)
 80019f6:	f7ff ff88 	bl	800190a <LL_USART_IsActiveFlag_TC>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f9      	beq.n	80019f4 <DMA1_Channel7_IRQHandler+0x18>
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001a00:	2107      	movs	r1, #7
 8001a02:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <DMA1_Channel7_IRQHandler+0x30>)
 8001a04:	f7ff fee8 	bl	80017d8 <LL_DMA_DisableChannel>
			}
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40004400 	.word	0x40004400

08001a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <USART2_IRQHandler+0x1c>)
 8001a1a:	f7ff ff63 	bl	80018e4 <LL_USART_IsActiveFlag_IDLE>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <USART2_IRQHandler+0x16>
			{
				LL_USART_ClearFlag_IDLE(USART2);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <USART2_IRQHandler+0x1c>)
 8001a26:	f7ff ff83 	bl	8001930 <LL_USART_ClearFlag_IDLE>
			}
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004400 	.word	0x40004400

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f002 fcbd 	bl	80043cc <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <_exit+0x12>

08001a7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00a      	b.n	8001aa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8c:	f3af 8000 	nop.w
 8001a90:	4601      	mov	r1, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf0      	blt.n	8001a8c <_read+0x12>
  }

  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e009      	b.n	8001ada <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf1      	blt.n	8001ac6 <_write+0x12>
  }
  return len;
 8001ae2:	687b      	ldr	r3, [r7, #4]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_close>:

int _close(int file)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b14:	605a      	str	r2, [r3, #4]
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_isatty>:

int _isatty(int file)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f002 fc22 	bl	80043cc <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20003000 	.word	0x20003000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	20000224 	.word	0x20000224
 8001bbc:	20000410 	.word	0x20000410

08001bc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	@ (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	@ (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <LL_AHB1_GRP1_EnableClock>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40021000 	.word	0x40021000

08001d28 <LL_APB1_GRP1_EnableClock>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	4907      	ldr	r1, [pc, #28]	@ (8001d54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000

08001d58 <LL_DMA_EnableChannel>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <LL_DMA_EnableChannel+0x3c>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	3a01      	subs	r2, #1
 8001d76:	4907      	ldr	r1, [pc, #28]	@ (8001d94 <LL_DMA_EnableChannel+0x3c>)
 8001d78:	5c8a      	ldrb	r2, [r1, r2]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6013      	str	r3, [r2, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	08006508 	.word	0x08006508

08001d98 <LL_DMA_SetDataTransferDirection>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <LL_DMA_SetDataTransferDirection+0x48>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001db8:	f023 0310 	bic.w	r3, r3, #16
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	4907      	ldr	r1, [pc, #28]	@ (8001de0 <LL_DMA_SetDataTransferDirection+0x48>)
 8001dc2:	5c8a      	ldrb	r2, [r1, r2]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	440a      	add	r2, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	08006508 	.word	0x08006508

08001de4 <LL_DMA_GetDataTransferDirection>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001e02:	4013      	ands	r3, r2
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	08006508 	.word	0x08006508

08001e14 <LL_DMA_SetMode>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <LL_DMA_SetMode+0x44>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 0220 	bic.w	r2, r3, #32
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	4907      	ldr	r1, [pc, #28]	@ (8001e58 <LL_DMA_SetMode+0x44>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	440b      	add	r3, r1
 8001e42:	4619      	mov	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	08006508 	.word	0x08006508

08001e5c <LL_DMA_SetPeriphIncMode>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	461a      	mov	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	4907      	ldr	r1, [pc, #28]	@ (8001ea0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	4619      	mov	r1, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	440b      	add	r3, r1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	08006508 	.word	0x08006508

08001ea4 <LL_DMA_SetMemoryIncMode>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	440b      	add	r3, r1
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	08006508 	.word	0x08006508

08001eec <LL_DMA_SetPeriphSize>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f30 <LL_DMA_SetPeriphSize+0x44>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	4907      	ldr	r1, [pc, #28]	@ (8001f30 <LL_DMA_SetPeriphSize+0x44>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	4619      	mov	r1, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	440b      	add	r3, r1
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	08006508 	.word	0x08006508

08001f34 <LL_DMA_SetMemorySize>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <LL_DMA_SetMemorySize+0x44>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <LL_DMA_SetMemorySize+0x44>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	440b      	add	r3, r1
 8001f62:	4619      	mov	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	08006508 	.word	0x08006508

08001f7c <LL_DMA_SetChannelPriorityLevel>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	461a      	mov	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4907      	ldr	r1, [pc, #28]	@ (8001fc0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	440b      	add	r3, r1
 8001faa:	4619      	mov	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	08006508 	.word	0x08006508

08001fc4 <LL_DMA_SetDataLength>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <LL_DMA_SetDataLength+0x44>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	4907      	ldr	r1, [pc, #28]	@ (8002008 <LL_DMA_SetDataLength+0x44>)
 8001fea:	5c8a      	ldrb	r2, [r1, r2]
 8001fec:	4611      	mov	r1, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	440a      	add	r2, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	08006508 	.word	0x08006508

0800200c <LL_DMA_ConfigAddresses>:
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b10      	cmp	r3, #16
 800201e:	d114      	bne.n	800204a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3b01      	subs	r3, #1
 8002024:	4a16      	ldr	r2, [pc, #88]	@ (8002080 <LL_DMA_ConfigAddresses+0x74>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	461a      	mov	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	4a11      	ldr	r2, [pc, #68]	@ (8002080 <LL_DMA_ConfigAddresses+0x74>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	461a      	mov	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	461a      	mov	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6093      	str	r3, [r2, #8]
}
 8002048:	e013      	b.n	8002072 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <LL_DMA_ConfigAddresses+0x74>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3b01      	subs	r3, #1
 8002062:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <LL_DMA_ConfigAddresses+0x74>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	461a      	mov	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	60d3      	str	r3, [r2, #12]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	08006508 	.word	0x08006508

08002084 <LL_DMA_SetMemoryAddress>:
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <LL_DMA_SetMemoryAddress+0x2c>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	461a      	mov	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	08006508 	.word	0x08006508

080020b4 <LL_DMA_SetPeriphAddress>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <LL_DMA_SetPeriphAddress+0x2c>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6093      	str	r3, [r2, #8]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	08006508 	.word	0x08006508

080020e4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <LL_DMA_EnableIT_TC+0x3c>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	3a01      	subs	r2, #1
 8002102:	4907      	ldr	r1, [pc, #28]	@ (8002120 <LL_DMA_EnableIT_TC+0x3c>)
 8002104:	5c8a      	ldrb	r2, [r1, r2]
 8002106:	4611      	mov	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	440a      	add	r2, r1
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6013      	str	r3, [r2, #0]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	08006508 	.word	0x08006508

08002124 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <LL_DMA_EnableIT_TE+0x3c>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	3a01      	subs	r2, #1
 8002142:	4907      	ldr	r1, [pc, #28]	@ (8002160 <LL_DMA_EnableIT_TE+0x3c>)
 8002144:	5c8a      	ldrb	r2, [r1, r2]
 8002146:	4611      	mov	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	440a      	add	r2, r1
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6013      	str	r3, [r2, #0]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	08006508 	.word	0x08006508

08002164 <LL_USART_Enable>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_USART_ConfigAsyncMode>:
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3308      	adds	r3, #8
 80021bc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3308      	adds	r3, #8
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	61ba      	str	r2, [r7, #24]
 80021d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	e841 2300 	strex	r3, r2, [r1]
 80021e0:	613b      	str	r3, [r7, #16]
   return(result);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e7      	bne.n	80021b8 <LL_USART_DisableIT_CTS+0x8>
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b089      	sub	sp, #36	@ 0x24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3308      	adds	r3, #8
 8002202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	e853 3f00 	ldrex	r3, [r3]
 800220a:	60bb      	str	r3, [r7, #8]
   return(result);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3308      	adds	r3, #8
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	61ba      	str	r2, [r7, #24]
 800221c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221e:	6979      	ldr	r1, [r7, #20]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	e841 2300 	strex	r3, r2, [r1]
 8002226:	613b      	str	r3, [r7, #16]
   return(result);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e7      	bne.n	80021fe <LL_USART_EnableDMAReq_RX+0x8>
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	3724      	adds	r7, #36	@ 0x24
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3308      	adds	r3, #8
 8002248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	60bb      	str	r3, [r7, #8]
   return(result);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3308      	adds	r3, #8
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	61ba      	str	r2, [r7, #24]
 8002262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	e841 2300 	strex	r3, r2, [r1]
 800226c:	613b      	str	r3, [r7, #16]
   return(result);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e7      	bne.n	8002244 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3328      	adds	r3, #40	@ 0x28
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e002      	b.n	80022a0 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3324      	adds	r3, #36	@ 0x24
 800229e:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b090      	sub	sp, #64	@ 0x40
 80022b4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	611a      	str	r2, [r3, #16]
 80022c6:	615a      	str	r2, [r3, #20]
 80022c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80022da:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022de:	f7ff fd23 	bl	8001d28 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80022e2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022e6:	f7ff fd07 	bl	8001cf8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80022ea:	f248 0304 	movw	r3, #32772	@ 0x8004
 80022ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022f0:	2302      	movs	r3, #2
 80022f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002300:	2307      	movs	r3, #7
 8002302:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230c:	f000 fb8c 	bl	8002a28 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002310:	2200      	movs	r2, #0
 8002312:	2106      	movs	r1, #6
 8002314:	487a      	ldr	r0, [pc, #488]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002316:	f7ff fd3f 	bl	8001d98 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800231a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800231e:	2106      	movs	r1, #6
 8002320:	4877      	ldr	r0, [pc, #476]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002322:	f7ff fe2b 	bl	8001f7c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002326:	2200      	movs	r2, #0
 8002328:	2106      	movs	r1, #6
 800232a:	4875      	ldr	r0, [pc, #468]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800232c:	f7ff fd72 	bl	8001e14 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002330:	2200      	movs	r2, #0
 8002332:	2106      	movs	r1, #6
 8002334:	4872      	ldr	r0, [pc, #456]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002336:	f7ff fd91 	bl	8001e5c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800233a:	2280      	movs	r2, #128	@ 0x80
 800233c:	2106      	movs	r1, #6
 800233e:	4870      	ldr	r0, [pc, #448]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002340:	f7ff fdb0 	bl	8001ea4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002344:	2200      	movs	r2, #0
 8002346:	2106      	movs	r1, #6
 8002348:	486d      	ldr	r0, [pc, #436]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800234a:	f7ff fdcf 	bl	8001eec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800234e:	2200      	movs	r2, #0
 8002350:	2106      	movs	r1, #6
 8002352:	486b      	ldr	r0, [pc, #428]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002354:	f7ff fdee 	bl	8001f34 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002358:	2210      	movs	r2, #16
 800235a:	2107      	movs	r1, #7
 800235c:	4868      	ldr	r0, [pc, #416]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800235e:	f7ff fd1b 	bl	8001d98 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002362:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002366:	2107      	movs	r1, #7
 8002368:	4865      	ldr	r0, [pc, #404]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800236a:	f7ff fe07 	bl	8001f7c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_CIRCULAR);
 800236e:	2220      	movs	r2, #32
 8002370:	2107      	movs	r1, #7
 8002372:	4863      	ldr	r0, [pc, #396]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002374:	f7ff fd4e 	bl	8001e14 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002378:	2200      	movs	r2, #0
 800237a:	2107      	movs	r1, #7
 800237c:	4860      	ldr	r0, [pc, #384]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800237e:	f7ff fd6d 	bl	8001e5c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	2107      	movs	r1, #7
 8002386:	485e      	ldr	r0, [pc, #376]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002388:	f7ff fd8c 	bl	8001ea4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800238c:	2200      	movs	r2, #0
 800238e:	2107      	movs	r1, #7
 8002390:	485b      	ldr	r0, [pc, #364]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002392:	f7ff fdab 	bl	8001eec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002396:	2200      	movs	r2, #0
 8002398:	2107      	movs	r1, #7
 800239a:	4859      	ldr	r0, [pc, #356]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800239c:	f7ff fdca 	bl	8001f34 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023a0:	f7ff fc20 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fc70 	bl	8001c90 <NVIC_EncodePriority>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4619      	mov	r1, r3
 80023b4:	2026      	movs	r0, #38	@ 0x26
 80023b6:	f7ff fc41 	bl	8001c3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80023ba:	2026      	movs	r0, #38	@ 0x26
 80023bc:	f7ff fc20 	bl	8001c00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2106      	movs	r1, #6
 80023c4:	484e      	ldr	r0, [pc, #312]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80023c6:	f7ff fce7 	bl	8001d98 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80023ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023ce:	2106      	movs	r1, #6
 80023d0:	484b      	ldr	r0, [pc, #300]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80023d2:	f7ff fdd3 	bl	8001f7c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80023d6:	2220      	movs	r2, #32
 80023d8:	2106      	movs	r1, #6
 80023da:	4849      	ldr	r0, [pc, #292]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80023dc:	f7ff fd1a 	bl	8001e14 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2106      	movs	r1, #6
 80023e4:	4846      	ldr	r0, [pc, #280]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80023e6:	f7ff fd39 	bl	8001e5c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	2106      	movs	r1, #6
 80023ee:	4844      	ldr	r0, [pc, #272]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80023f0:	f7ff fd58 	bl	8001ea4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2106      	movs	r1, #6
 80023f8:	4841      	ldr	r0, [pc, #260]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80023fa:	f7ff fd77 	bl	8001eec <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80023fe:	2200      	movs	r2, #0
 8002400:	2106      	movs	r1, #6
 8002402:	483f      	ldr	r0, [pc, #252]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002404:	f7ff fd96 	bl	8001f34 <LL_DMA_SetMemorySize>

	LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002408:	2101      	movs	r1, #1
 800240a:	483e      	ldr	r0, [pc, #248]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 800240c:	f7ff ff39 	bl	8002282 <LL_USART_DMA_GetRegAddr>
 8002410:	4604      	mov	r4, r0
 8002412:	4d3d      	ldr	r5, [pc, #244]	@ (8002508 <MX_USART2_UART_Init+0x258>)
 8002414:	2106      	movs	r1, #6
 8002416:	483a      	ldr	r0, [pc, #232]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002418:	f7ff fce4 	bl	8001de4 <LL_DMA_GetDataTransferDirection>
 800241c:	4603      	mov	r3, r0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	462b      	mov	r3, r5
 8002422:	4622      	mov	r2, r4
 8002424:	2106      	movs	r1, #6
 8002426:	4836      	ldr	r0, [pc, #216]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002428:	f7ff fdf0 	bl	800200c <LL_DMA_ConfigAddresses>
						LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
						(uint32_t)bufferUSART2dma,
						LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	2106      	movs	r1, #6
 8002430:	4833      	ldr	r0, [pc, #204]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002432:	f7ff fdc7 	bl	8001fc4 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002436:	2106      	movs	r1, #6
 8002438:	4831      	ldr	r0, [pc, #196]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800243a:	f7ff fc8d 	bl	8001d58 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 800243e:	4831      	ldr	r0, [pc, #196]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 8002440:	f7ff fed9 	bl	80021f6 <LL_USART_EnableDMAReq_RX>

	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002444:	2210      	movs	r2, #16
 8002446:	2107      	movs	r1, #7
 8002448:	482d      	ldr	r0, [pc, #180]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800244a:	f7ff fca5 	bl	8001d98 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800244e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002452:	2107      	movs	r1, #7
 8002454:	482a      	ldr	r0, [pc, #168]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002456:	f7ff fd91 	bl	8001f7c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800245a:	2200      	movs	r2, #0
 800245c:	2107      	movs	r1, #7
 800245e:	4828      	ldr	r0, [pc, #160]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002460:	f7ff fcd8 	bl	8001e14 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002464:	2200      	movs	r2, #0
 8002466:	2107      	movs	r1, #7
 8002468:	4825      	ldr	r0, [pc, #148]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800246a:	f7ff fcf7 	bl	8001e5c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	2107      	movs	r1, #7
 8002472:	4823      	ldr	r0, [pc, #140]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002474:	f7ff fd16 	bl	8001ea4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002478:	2200      	movs	r2, #0
 800247a:	2107      	movs	r1, #7
 800247c:	4820      	ldr	r0, [pc, #128]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800247e:	f7ff fd35 	bl	8001eec <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002482:	2200      	movs	r2, #0
 8002484:	2107      	movs	r1, #7
 8002486:	481e      	ldr	r0, [pc, #120]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 8002488:	f7ff fd54 	bl	8001f34 <LL_DMA_SetMemorySize>

	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800248c:	2100      	movs	r1, #0
 800248e:	481d      	ldr	r0, [pc, #116]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 8002490:	f7ff fef7 	bl	8002282 <LL_USART_DMA_GetRegAddr>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	2107      	movs	r1, #7
 800249a:	4819      	ldr	r0, [pc, #100]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 800249c:	f7ff fe0a 	bl	80020b4 <LL_DMA_SetPeriphAddress>
	LL_USART_EnableDMAReq_TX(USART2);
 80024a0:	4818      	ldr	r0, [pc, #96]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 80024a2:	f7ff fecb 	bl	800223c <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80024a6:	2107      	movs	r1, #7
 80024a8:	4815      	ldr	r0, [pc, #84]	@ (8002500 <MX_USART2_UART_Init+0x250>)
 80024aa:	f7ff fe3b 	bl	8002124 <LL_DMA_EnableIT_TE>
	NVIC_SetPriority(USART2_IRQn, 0);
 80024ae:	2100      	movs	r1, #0
 80024b0:	2026      	movs	r0, #38	@ 0x26
 80024b2:	f7ff fbc3 	bl	8001c3c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80024b6:	2026      	movs	r0, #38	@ 0x26
 80024b8:	f7ff fba2 	bl	8001c00 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80024bc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80024c0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80024ce:	230c      	movs	r3, #12
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	4808      	ldr	r0, [pc, #32]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 80024e2:	f000 fe07 	bl	80030f4 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80024e6:	4807      	ldr	r0, [pc, #28]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 80024e8:	f7ff fe62 	bl	80021b0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80024ec:	4805      	ldr	r0, [pc, #20]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 80024ee:	f7ff fe49 	bl	8002184 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80024f2:	4804      	ldr	r0, [pc, #16]	@ (8002504 <MX_USART2_UART_Init+0x254>)
 80024f4:	f7ff fe36 	bl	8002164 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	3738      	adds	r7, #56	@ 0x38
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	40020000 	.word	0x40020000
 8002504:	40004400 	.word	0x40004400
 8002508:	20000228 	.word	0x20000228

0800250c <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	2107      	movs	r1, #7
 800251e:	480a      	ldr	r0, [pc, #40]	@ (8002548 <USART2_PutBuffer+0x3c>)
 8002520:	f7ff fdb0 	bl	8002084 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	461a      	mov	r2, r3
 8002528:	2107      	movs	r1, #7
 800252a:	4807      	ldr	r0, [pc, #28]	@ (8002548 <USART2_PutBuffer+0x3c>)
 800252c:	f7ff fd4a 	bl	8001fc4 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002530:	2107      	movs	r1, #7
 8002532:	4805      	ldr	r0, [pc, #20]	@ (8002548 <USART2_PutBuffer+0x3c>)
 8002534:	f7ff fdd6 	bl	80020e4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002538:	2107      	movs	r1, #7
 800253a:	4803      	ldr	r0, [pc, #12]	@ (8002548 <USART2_PutBuffer+0x3c>)
 800253c:	f7ff fc0c 	bl	8001d58 <LL_DMA_EnableChannel>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40020000 	.word	0x40020000

0800254c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002584 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002550:	f7ff fb36 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <LoopForever+0x6>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	@ (800258c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <LoopForever+0xe>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <LoopForever+0x16>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257a:	f001 ff2d 	bl	80043d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800257e:	f7ff f835 	bl	80015ec <main>

08002582 <LoopForever>:

LoopForever:
    b LoopForever
 8002582:	e7fe      	b.n	8002582 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002584:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002590:	08006890 	.word	0x08006890
  ldr r2, =_sbss
 8002594:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002598:	2000040c 	.word	0x2000040c

0800259c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC1_2_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_Init+0x28>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a07      	ldr	r2, [pc, #28]	@ (80025c8 <HAL_Init+0x28>)
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b0:	2003      	movs	r0, #3
 80025b2:	f000 f901 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b6:	200f      	movs	r0, #15
 80025b8:	f000 f808 	bl	80025cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025bc:	f7ff f8e8 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40022000 	.word	0x40022000

080025cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d4:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_InitTick+0x54>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_InitTick+0x58>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f90b 	bl	8002806 <HAL_SYSTICK_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00e      	b.n	8002618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b0f      	cmp	r3, #15
 80025fe:	d80a      	bhi.n	8002616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002600:	2200      	movs	r2, #0
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f000 f8e1 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800260c:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <HAL_InitTick+0x5c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000000 	.word	0x20000000
 8002624:	20000008 	.word	0x20000008
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_IncTick+0x20>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_IncTick+0x24>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4413      	add	r3, r2
 800263c:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <HAL_IncTick+0x24>)
 800263e:	6013      	str	r3, [r2, #0]
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000008 	.word	0x20000008
 8002650:	200002a8 	.word	0x200002a8

08002654 <__NVIC_SetPriorityGrouping>:
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_SetPriority>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	@ (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	@ (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff47 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff5c 	bl	800269c <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffb0 	bl	8002774 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800281e:	b480      	push	{r7}
 8002820:	b089      	sub	sp, #36	@ 0x24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	613b      	str	r3, [r7, #16]
  return result;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2103      	movs	r1, #3
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	61bb      	str	r3, [r7, #24]
  return result;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	431a      	orrs	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	bf00      	nop
 8002872:	3724      	adds	r7, #36	@ 0x24
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	43db      	mvns	r3, r3
 8002890:	401a      	ands	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	@ 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	613b      	str	r3, [r7, #16]
  return result;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2103      	movs	r1, #3
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	61bb      	str	r3, [r7, #24]
  return result;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	431a      	orrs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800290a:	b480      	push	{r7}
 800290c:	b089      	sub	sp, #36	@ 0x24
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	613b      	str	r3, [r7, #16]
  return result;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2103      	movs	r1, #3
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	61bb      	str	r3, [r7, #24]
  return result;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
}
 800295c:	bf00      	nop
 800295e:	3724      	adds	r7, #36	@ 0x24
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	613b      	str	r3, [r7, #16]
  return result;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	210f      	movs	r1, #15
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	61bb      	str	r3, [r7, #24]
  return result;
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80029ba:	bf00      	nop
 80029bc:	3724      	adds	r7, #36	@ 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b089      	sub	sp, #36	@ 0x24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	613b      	str	r3, [r7, #16]
  return result;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	210f      	movs	r1, #15
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	61bb      	str	r3, [r7, #24]
  return result;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	431a      	orrs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002a1c:	bf00      	nop
 8002a1e:	3724      	adds	r7, #36	@ 0x24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	613b      	str	r3, [r7, #16]
  return result;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002a4a:	e051      	b.n	8002af0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d043      	beq.n	8002aea <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d003      	beq.n	8002a72 <LL_GPIO_Init+0x4a>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d10e      	bne.n	8002a90 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	461a      	mov	r2, r3
 8002a78:	69b9      	ldr	r1, [r7, #24]
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff16 	bl	80028ac <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fef6 	bl	800287c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	461a      	mov	r2, r3
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff36 	bl	800290a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d11a      	bne.n	8002adc <LL_GPIO_Init+0xb4>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
  return result;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b07      	cmp	r3, #7
 8002abc:	d807      	bhi.n	8002ace <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	69b9      	ldr	r1, [r7, #24]
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff4e 	bl	8002968 <LL_GPIO_SetAFPin_0_7>
 8002acc:	e006      	b.n	8002adc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff75 	bl	80029c6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fe9a 	bl	800281e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1a6      	bne.n	8002a4c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <LL_I2C_Enable>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_I2C_Disable>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 0201 	bic.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_I2C_ConfigFilters>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0219      	lsls	r1, r3, #8
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_I2C_SetOwnAddress1>:
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b8a:	f023 0307 	bic.w	r3, r3, #7
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	609a      	str	r2, [r3, #8]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_I2C_EnableOwnAddress1>:
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_I2C_DisableOwnAddress1>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_I2C_SetTiming>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	611a      	str	r2, [r3, #16]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_I2C_SetMode>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_I2C_AcknowledgeNextData>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff65 	bl	8002b28 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff6d 	bl	8002b48 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffb6 	bl	8002be6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff44 	bl	8002b08 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ffa0 	bl	8002bc6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6919      	ldr	r1, [r3, #16]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff70 	bl	8002b76 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ff81 	bl	8002ba6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffa9 	bl	8002c02 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffb6 	bl	8002c28 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <LL_RCC_HSI_IsReady>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <LL_RCC_HSI_IsReady+0x20>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40021000 	.word	0x40021000

08002cec <LL_RCC_LSE_IsReady>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <LL_RCC_LSE_IsReady+0x20>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40021000 	.word	0x40021000

08002d10 <LL_RCC_GetSysClkSource>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <LL_RCC_GetSysClkSource+0x18>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <LL_RCC_GetAHBPrescaler>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <LL_RCC_GetAHBPrescaler+0x18>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <LL_RCC_GetAPB1Prescaler>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000

08002d64 <LL_RCC_GetAPB2Prescaler>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d68:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002d88:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <LL_RCC_GetUSARTClockSource+0x28>)
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	4313      	orrs	r3, r2
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40021000 	.word	0x40021000

08002dac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <LL_RCC_PLL_GetMainSource+0x18>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000

08002de4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <LL_RCC_PLL_GetPrediv+0x18>)
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	f003 030f 	and.w	r3, r3, #15
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000

08002e00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002e08:	f000 f862 	bl	8002ed0 <RCC_GetSystemClockFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f880 	bl	8002f1c <RCC_GetHCLKClockFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f88e 	bl	8002f48 <RCC_GetPCLK1ClockFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f89a 	bl	8002f70 <RCC_GetPCLK2ClockFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d130      	bne.n	8002ec0 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff8e 	bl	8002d80 <LL_RCC_GetUSARTClockSource>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d00a      	beq.n	8002e80 <LL_RCC_GetUSARTClockFreq+0x34>
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d819      	bhi.n	8002ea2 <LL_RCC_GetUSARTClockFreq+0x56>
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d00c      	beq.n	8002e90 <LL_RCC_GetUSARTClockFreq+0x44>
 8002e76:	e014      	b.n	8002ea2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002e78:	f000 f82a 	bl	8002ed0 <RCC_GetSystemClockFreq>
 8002e7c:	60f8      	str	r0, [r7, #12]
        break;
 8002e7e:	e01f      	b.n	8002ec0 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002e80:	f7ff ff22 	bl	8002cc8 <LL_RCC_HSI_IsReady>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <LL_RCC_GetUSARTClockFreq+0x80>)
 8002e8c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e8e:	e014      	b.n	8002eba <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002e90:	f7ff ff2c 	bl	8002cec <LL_RCC_LSE_IsReady>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e9e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002ea0:	e00d      	b.n	8002ebe <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002ea2:	f000 f815 	bl	8002ed0 <RCC_GetSystemClockFreq>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f837 	bl	8002f1c <RCC_GetHCLKClockFreq>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f849 	bl	8002f48 <RCC_GetPCLK1ClockFreq>
 8002eb6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002eb8:	e002      	b.n	8002ec0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002ebe:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002eda:	f7ff ff19 	bl	8002d10 <LL_RCC_GetSysClkSource>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d00c      	beq.n	8002efe <RCC_GetSystemClockFreq+0x2e>
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d80e      	bhi.n	8002f06 <RCC_GetSystemClockFreq+0x36>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <RCC_GetSystemClockFreq+0x22>
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d003      	beq.n	8002ef8 <RCC_GetSystemClockFreq+0x28>
 8002ef0:	e009      	b.n	8002f06 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <RCC_GetSystemClockFreq+0x48>)
 8002ef4:	607b      	str	r3, [r7, #4]
      break;
 8002ef6:	e009      	b.n	8002f0c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <RCC_GetSystemClockFreq+0x48>)
 8002efa:	607b      	str	r3, [r7, #4]
      break;
 8002efc:	e006      	b.n	8002f0c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002efe:	f000 f84b 	bl	8002f98 <RCC_PLL_GetFreqDomain_SYS>
 8002f02:	6078      	str	r0, [r7, #4]
      break;
 8002f04:	e002      	b.n	8002f0c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <RCC_GetSystemClockFreq+0x48>)
 8002f08:	607b      	str	r3, [r7, #4]
      break;
 8002f0a:	bf00      	nop
  }

  return frequency;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	007a1200 	.word	0x007a1200

08002f1c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002f24:	f7ff ff02 	bl	8002d2c <LL_RCC_GetAHBPrescaler>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <RCC_GetHCLKClockFreq+0x28>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	461a      	mov	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	40d3      	lsrs	r3, r2
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	080064f0 	.word	0x080064f0

08002f48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002f50:	f7ff fefa 	bl	8002d48 <LL_RCC_GetAPB1Prescaler>
 8002f54:	4603      	mov	r3, r0
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <RCC_GetPCLK1ClockFreq+0x24>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	40d3      	lsrs	r3, r2
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	08006500 	.word	0x08006500

08002f70 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f78:	f7ff fef4 	bl	8002d64 <LL_RCC_GetAPB2Prescaler>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	0adb      	lsrs	r3, r3, #11
 8002f80:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <RCC_GetPCLK2ClockFreq+0x24>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	461a      	mov	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	40d3      	lsrs	r3, r2
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	08006500 	.word	0x08006500

08002f98 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002fa6:	f7ff ff01 	bl	8002dac <LL_RCC_PLL_GetMainSource>
 8002faa:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb8:	d003      	beq.n	8002fc2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002fba:	e005      	b.n	8002fc8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002fbc:	4b13      	ldr	r3, [pc, #76]	@ (800300c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002fbe:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002fc0:	e005      	b.n	8002fce <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002fc4:	60fb      	str	r3, [r7, #12]
      break;
 8002fc6:	e002      	b.n	8002fce <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002fc8:	4b10      	ldr	r3, [pc, #64]	@ (800300c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002fca:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002fcc:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002fce:	f7ff ff09 	bl	8002de4 <LL_RCC_PLL_GetPrediv>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	fbb2 f4f3 	udiv	r4, r2, r3
 8002fdc:	f7ff fef4 	bl	8002dc8 <LL_RCC_PLL_GetMultiplicator>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002fe6:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002fea:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	fa92 f2a2 	rbit	r2, r2
 8002ff2:	603a      	str	r2, [r7, #0]
  return result;
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	fab2 f282 	clz	r2, r2
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	40d3      	lsrs	r3, r2
 8002ffe:	3302      	adds	r3, #2
 8003000:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bd90      	pop	{r4, r7, pc}
 800300c:	003d0900 	.word	0x003d0900
 8003010:	007a1200 	.word	0x007a1200

08003014 <LL_USART_IsEnabled>:
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <LL_USART_IsEnabled+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <LL_USART_IsEnabled+0x1a>
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_USART_SetStopBitsLength>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	605a      	str	r2, [r3, #4]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_USART_SetHWFlowCtrl>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_USART_SetBaudRate>:
{
 8003086:	b480      	push	{r7}
 8003088:	b087      	sub	sp, #28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800309a:	d11a      	bne.n	80030d2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	005a      	lsls	r2, r3, #1
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	441a      	add	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	60da      	str	r2, [r3, #12]
}
 80030d0:	e00a      	b.n	80030e8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	085a      	lsrs	r2, r3, #1
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	441a      	add	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	60da      	str	r2, [r3, #12]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ff84 	bl	8003014 <LL_USART_IsEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d14e      	bne.n	80031b0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <LL_USART_Init+0xc8>)
 8003118:	4013      	ands	r3, r2
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	6851      	ldr	r1, [r2, #4]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	4311      	orrs	r1, r2
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	6912      	ldr	r2, [r2, #16]
 8003128:	4311      	orrs	r1, r2
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	6992      	ldr	r2, [r2, #24]
 800312e:	430a      	orrs	r2, r1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ff7c 	bl	800303a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff89 	bl	8003060 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <LL_USART_Init+0xcc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d104      	bne.n	8003160 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003156:	2000      	movs	r0, #0
 8003158:	f7ff fe78 	bl	8002e4c <LL_RCC_GetUSARTClockFreq>
 800315c:	61b8      	str	r0, [r7, #24]
 800315e:	e016      	b.n	800318e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <LL_USART_Init+0xd0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d107      	bne.n	8003178 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fe47 	bl	8002e00 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	e00a      	b.n	800318e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a13      	ldr	r2, [pc, #76]	@ (80031c8 <LL_USART_Init+0xd4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d106      	bne.n	800318e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003180:	f107 0308 	add.w	r3, r7, #8
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fe3b 	bl	8002e00 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800319c:	2300      	movs	r3, #0
 800319e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff6b 	bl	8003086 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	efff69f3 	.word	0xefff69f3
 80031c0:	40013800 	.word	0x40013800
 80031c4:	40004400 	.word	0x40004400
 80031c8:	40004800 	.word	0x40004800

080031cc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <LL_mDelay+0x48>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80031da:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d00c      	beq.n	80031fe <LL_mDelay+0x32>
  {
    Delay++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80031ea:	e008      	b.n	80031fe <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <LL_mDelay+0x48>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <LL_mDelay+0x32>
    {
      Delay--;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f3      	bne.n	80031ec <LL_mDelay+0x20>
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003220:	4a04      	ldr	r2, [pc, #16]	@ (8003234 <LL_SetSystemCoreClock+0x1c>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6013      	str	r3, [r2, #0]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000000 	.word	0x20000000

08003238 <HTS221_read_byte>:
                                  uint8_t size);

static I2C_ReadCallback I2C_read_data = NULL;
static I2C_WriteCallback I2C_write_data = NULL;

uint8_t HTS221_read_byte(uint8_t register_address) {
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
	if (I2C_read_data == NULL) {
 8003242:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HTS221_read_byte+0x34>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HTS221_read_byte+0x16>
		return 0;
 800324a:	2300      	movs	r3, #0
 800324c:	e009      	b.n	8003262 <HTS221_read_byte+0x2a>
	}

	uint8_t rx_data;
	I2C_read_data(hts221_address, register_address, &rx_data, 1);
 800324e:	4b07      	ldr	r3, [pc, #28]	@ (800326c <HTS221_read_byte+0x34>)
 8003250:	681c      	ldr	r4, [r3, #0]
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <HTS221_read_byte+0x38>)
 8003254:	7818      	ldrb	r0, [r3, #0]
 8003256:	f107 020f 	add.w	r2, r7, #15
 800325a:	79f9      	ldrb	r1, [r7, #7]
 800325c:	2301      	movs	r3, #1
 800325e:	47a0      	blx	r4
	return rx_data;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	bf00      	nop
 800326c:	200002ac 	.word	0x200002ac
 8003270:	20000009 	.word	0x20000009

08003274 <HTS221_read_array>:

void HTS221_read_array(uint8_t register_address, uint8_t* data, uint8_t size) {
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
 8003280:	4613      	mov	r3, r2
 8003282:	71bb      	strb	r3, [r7, #6]
	if (I2C_read_data == NULL || data == NULL || size == 0) {
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HTS221_read_array+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00e      	beq.n	80032aa <HTS221_read_array+0x36>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HTS221_read_array+0x36>
 8003292:	79bb      	ldrb	r3, [r7, #6]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HTS221_read_array+0x36>
	        return;
	}

	I2C_read_data(hts221_address, register_address, data, size);
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HTS221_read_array+0x40>)
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HTS221_read_array+0x44>)
 800329e:	7818      	ldrb	r0, [r3, #0]
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	79f9      	ldrb	r1, [r7, #7]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	47a0      	blx	r4
 80032a8:	e000      	b.n	80032ac <HTS221_read_array+0x38>
	        return;
 80032aa:	bf00      	nop
}
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200002ac 	.word	0x200002ac
 80032b8:	20000009 	.word	0x20000009

080032bc <HTS221_write_byte>:

void HTS221_write_byte(uint8_t register_address, uint8_t data) {
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	460a      	mov	r2, r1
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71bb      	strb	r3, [r7, #6]
	if (I2C_write_data == NULL) {
 80032cc:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HTS221_write_byte+0x34>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HTS221_write_byte+0x2a>
	        return;
	}

	I2C_write_data(hts221_address, register_address, &data, 1);
 80032d4:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HTS221_write_byte+0x34>)
 80032d6:	681c      	ldr	r4, [r3, #0]
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HTS221_write_byte+0x38>)
 80032da:	7818      	ldrb	r0, [r3, #0]
 80032dc:	1dba      	adds	r2, r7, #6
 80032de:	79f9      	ldrb	r1, [r7, #7]
 80032e0:	2301      	movs	r3, #1
 80032e2:	47a0      	blx	r4
 80032e4:	e000      	b.n	80032e8 <HTS221_write_byte+0x2c>
	        return;
 80032e6:	bf00      	nop
}
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200002b0 	.word	0x200002b0
 80032f4:	20000009 	.word	0x20000009

080032f8 <HTS221_Init>:

uint8_t HTS221_Init(I2C_ReadCallback read_callback, I2C_WriteCallback write_callback) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
	if(read_callback == NULL || write_callback == NULL) {
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HTS221_Init+0x16>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HTS221_Init+0x1a>
		return 0;
 800330e:	2300      	movs	r3, #0
 8003310:	e025      	b.n	800335e <HTS221_Init+0x66>
	}

	I2C_read_data = read_callback;
 8003312:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <HTS221_Init+0x70>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6013      	str	r3, [r2, #0]
	I2C_write_data = write_callback;
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <HTS221_Init+0x74>)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6013      	str	r3, [r2, #0]

	LL_mDelay(100);
 800331e:	2064      	movs	r0, #100	@ 0x64
 8003320:	f7ff ff54 	bl	80031cc <LL_mDelay>

	uint8_t who_am_i = HTS221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8003324:	200f      	movs	r0, #15
 8003326:	f7ff ff87 	bl	8003238 <HTS221_read_byte>
 800332a:	4603      	mov	r3, r0
 800332c:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != HTS221_WHO_AM_I_VALUE) {
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2bbc      	cmp	r3, #188	@ 0xbc
 8003332:	d001      	beq.n	8003338 <HTS221_Init+0x40>
		return 0;
 8003334:	2300      	movs	r3, #0
 8003336:	e012      	b.n	800335e <HTS221_Init+0x66>
	}

	uint8_t ctrl1 = HTS221_read_byte(HTS221_ADDRESS_CTRL1);
 8003338:	2020      	movs	r0, #32
 800333a:	f7ff ff7d 	bl	8003238 <HTS221_read_byte>
 800333e:	4603      	mov	r3, r0
 8003340:	73bb      	strb	r3, [r7, #14]
	ctrl1 &= 0x7C;
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003348:	73bb      	strb	r3, [r7, #14]
	ctrl1 |= 0x83;
 800334a:	7bbb      	ldrb	r3, [r7, #14]
 800334c:	f063 037c 	orn	r3, r3, #124	@ 0x7c
 8003350:	73bb      	strb	r3, [r7, #14]

	HTS221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	4619      	mov	r1, r3
 8003356:	2020      	movs	r0, #32
 8003358:	f7ff ffb0 	bl	80032bc <HTS221_write_byte>



	return 1;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200002ac 	.word	0x200002ac
 800336c:	200002b0 	.word	0x200002b0

08003370 <HTS221_get_humidity>:


int8_t HTS221_get_humidity(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	@ 0x28
 8003374:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8003376:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <HTS221_get_humidity+0x108>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HTS221_get_humidity+0x14>
	        return -1;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e074      	b.n	800346e <HTS221_get_humidity+0xfe>
	}

	uint8_t humidity_data[2];

	HTS221_read_array(HTS221_ADDRESS_HUMIDITY_OUT_L, humidity_data, 2);
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	2202      	movs	r2, #2
 800338a:	4619      	mov	r1, r3
 800338c:	2028      	movs	r0, #40	@ 0x28
 800338e:	f7ff ff71 	bl	8003274 <HTS221_read_array>

	int16_t humidity_raw = (humidity_data[1] << 8 |
 8003392:	7d7b      	ldrb	r3, [r7, #21]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	b21a      	sxth	r2, r3
							humidity_data[0]);
 8003398:	7d3b      	ldrb	r3, [r7, #20]
 800339a:	b21b      	sxth	r3, r3
	int16_t humidity_raw = (humidity_data[1] << 8 |
 800339c:	4313      	orrs	r3, r2
 800339e:	84fb      	strh	r3, [r7, #38]	@ 0x26

	uint8_t x0[2], x1[2], y[2];

	HTS221_read_array(HTS221_ADDRESS_H0_T0_OUT_L, x0, 2);
 80033a0:	f107 0310 	add.w	r3, r7, #16
 80033a4:	2202      	movs	r2, #2
 80033a6:	4619      	mov	r1, r3
 80033a8:	2036      	movs	r0, #54	@ 0x36
 80033aa:	f7ff ff63 	bl	8003274 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_H1_T0_OUT_L, x1, 2);
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	2202      	movs	r2, #2
 80033b4:	4619      	mov	r1, r3
 80033b6:	203a      	movs	r0, #58	@ 0x3a
 80033b8:	f7ff ff5c 	bl	8003274 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_H0_rH_x2, y, 2);
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	2202      	movs	r2, #2
 80033c2:	4619      	mov	r1, r3
 80033c4:	2030      	movs	r0, #48	@ 0x30
 80033c6:	f7ff ff55 	bl	8003274 <HTS221_read_array>

	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 80033ca:	7c7b      	ldrb	r3, [r7, #17]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	b21a      	sxth	r2, r3
									   x0[0]);
 80033d0:	7c3b      	ldrb	r3, [r7, #16]
 80033d2:	b21b      	sxth	r3, r3
	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 80033d4:	4313      	orrs	r3, r2
 80033d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 80033d8:	7b7b      	ldrb	r3, [r7, #13]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	b21a      	sxth	r2, r3
									   x1[0]);
 80033de:	7b3b      	ldrb	r3, [r7, #12]
 80033e0:	b21b      	sxth	r3, r3
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 80033e2:	4313      	orrs	r3, r2
 80033e4:	847b      	strh	r3, [r7, #34]	@ 0x22

	int8_t calibration_y0 = y[0] / 2;
 80033e6:	7a3b      	ldrb	r3, [r7, #8]
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	int8_t calibration_y1 = y[1] / 2;
 80033f0:	7a7b      	ldrb	r3, [r7, #9]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f887 3020 	strb.w	r3, [r7, #32]


	float k = (float)((calibration_y1 - calibration_y0)/(calibration_x1 - calibration_x0));
 80033fa:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80033fe:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	@ 0x22
 8003408:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800340c:	1acb      	subs	r3, r1, r3
 800340e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]

	float q = (float)(calibration_y1 - k*calibration_x1);
 800341e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800342a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003436:	edd7 7a07 	vldr	s15, [r7, #28]
 800343a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800343e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003442:	edc7 7a06 	vstr	s15, [r7, #24]

	return (int8_t)(k * humidity_raw + q);
 8003446:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003452:	edd7 7a07 	vldr	s15, [r7, #28]
 8003456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345a:	edd7 7a06 	vldr	s15, [r7, #24]
 800345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003466:	edc7 7a01 	vstr	s15, [r7, #4]
 800346a:	793b      	ldrb	r3, [r7, #4]
 800346c:	b25b      	sxtb	r3, r3
}
 800346e:	4618      	mov	r0, r3
 8003470:	3728      	adds	r7, #40	@ 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200002ac 	.word	0x200002ac

0800347c <HTS221_get_temperature>:

int8_t HTS221_get_temperature(void) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b08c      	sub	sp, #48	@ 0x30
 8003480:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8003482:	4b51      	ldr	r3, [pc, #324]	@ (80035c8 <HTS221_get_temperature+0x14c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HTS221_get_temperature+0x14>
	        return -1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	e096      	b.n	80035be <HTS221_get_temperature+0x142>
	}

	uint8_t temperature_data[2];

	HTS221_read_array(HTS221_ADDRESS_TEMP_OUT_L, temperature_data, 2);
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	2202      	movs	r2, #2
 8003496:	4619      	mov	r1, r3
 8003498:	202a      	movs	r0, #42	@ 0x2a
 800349a:	f7ff feeb 	bl	8003274 <HTS221_read_array>

	int16_t temperature_raw = (temperature_data[1] << 8 |
 800349e:	7d7b      	ldrb	r3, [r7, #21]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	b21a      	sxth	r2, r3
							   temperature_data[0]);
 80034a4:	7d3b      	ldrb	r3, [r7, #20]
 80034a6:	b21b      	sxth	r3, r3
	int16_t temperature_raw = (temperature_data[1] << 8 |
 80034a8:	4313      	orrs	r3, r2
 80034aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	uint8_t x0[2], x1[2], y[2];


	HTS221_read_array(HTS221_ADDRESS_T0_OUT_L, x0, 2);
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	2202      	movs	r2, #2
 80034b2:	4619      	mov	r1, r3
 80034b4:	203c      	movs	r0, #60	@ 0x3c
 80034b6:	f7ff fedd 	bl	8003274 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_T1_OUT_L, x1, 2);
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	2202      	movs	r2, #2
 80034c0:	4619      	mov	r1, r3
 80034c2:	203e      	movs	r0, #62	@ 0x3e
 80034c4:	f7ff fed6 	bl	8003274 <HTS221_read_array>
	HTS221_read_array(HTS221_ADDRESS_T0_degC_x8, y, 2);
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	2202      	movs	r2, #2
 80034ce:	4619      	mov	r1, r3
 80034d0:	2032      	movs	r0, #50	@ 0x32
 80034d2:	f7ff fecf 	bl	8003274 <HTS221_read_array>
	uint8_t t0_t1_msb = HTS221_read_byte(HTS221_ADDRESS_T1_T2_msb);
 80034d6:	2035      	movs	r0, #53	@ 0x35
 80034d8:	f7ff feae 	bl	8003238 <HTS221_read_byte>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 80034e2:	7c7b      	ldrb	r3, [r7, #17]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	b21a      	sxth	r2, r3
									   x0[0]);
 80034e8:	7c3b      	ldrb	r3, [r7, #16]
 80034ea:	b21b      	sxth	r3, r3
	int16_t calibration_x0 = (int16_t)(x0[1] << 8 |
 80034ec:	4313      	orrs	r3, r2
 80034ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 80034f0:	7b7b      	ldrb	r3, [r7, #13]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	b21a      	sxth	r2, r3
									   x1[0]);
 80034f6:	7b3b      	ldrb	r3, [r7, #12]
 80034f8:	b21b      	sxth	r3, r3
	int16_t calibration_x1 = (int16_t)(x1[1] << 8 |
 80034fa:	4313      	orrs	r3, r2
 80034fc:	853b      	strh	r3, [r7, #40]	@ 0x28

	uint16_t t0_degC = y[0];
 80034fe:	7a3b      	ldrb	r3, [r7, #8]
 8003500:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t t1_degC = y[1];
 8003502:	7a7b      	ldrb	r3, [r7, #9]
 8003504:	84bb      	strh	r3, [r7, #36]	@ 0x24

	t0_degC |= ((t0_t1_msb & 0x03) << 8);
 8003506:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	b21b      	sxth	r3, r3
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	b21a      	sxth	r2, r3
 8003514:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003518:	4313      	orrs	r3, r2
 800351a:	b21b      	sxth	r3, r3
 800351c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	t1_degC |= ((t0_t1_msb & 0x0C) << 6);
 800351e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	b21b      	sxth	r3, r3
 8003526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352a:	b21a      	sxth	r2, r3
 800352c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003530:	4313      	orrs	r3, r2
 8003532:	b21b      	sxth	r3, r3
 8003534:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int8_t calibration_y0 = t0_degC / 8;
 8003536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003538:	08db      	lsrs	r3, r3, #3
 800353a:	b29b      	uxth	r3, r3
 800353c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int8_t calibration_y1 = t1_degC / 8;
 8003540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003542:	08db      	lsrs	r3, r3, #3
 8003544:	b29b      	uxth	r3, r3
 8003546:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22



	float k = (float)((calibration_y1 - calibration_y0)/(calibration_x1 - calibration_x0));
 800354a:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 800354e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8003558:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800355c:	1acb      	subs	r3, r1, r3
 800355e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]

	float q = (float)(calibration_y1 - k*calibration_x1);
 800356e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800357a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003586:	edd7 7a07 	vldr	s15, [r7, #28]
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003592:	edc7 7a06 	vstr	s15, [r7, #24]

	return (int8_t)(k * temperature_raw + q);
 8003596:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80035a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80035ba:	793b      	ldrb	r3, [r7, #4]
 80035bc:	b25b      	sxtb	r3, r3
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3730      	adds	r7, #48	@ 0x30
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200002ac 	.word	0x200002ac

080035cc <LPS25HB_read_byte>:
                                  uint8_t size);

static I2C_ReadCallback I2C_read_data = NULL;
static I2C_WriteCallback I2C_write_data = NULL;

uint8_t LPS25HB_read_byte(uint8_t register_address) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
	if (I2C_read_data == NULL) {
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <LPS25HB_read_byte+0x34>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <LPS25HB_read_byte+0x16>
		return 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	e009      	b.n	80035f6 <LPS25HB_read_byte+0x2a>
	}

	uint8_t rx_data;
	I2C_read_data(lps25hb_address, register_address, &rx_data, 1);
 80035e2:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <LPS25HB_read_byte+0x34>)
 80035e4:	681c      	ldr	r4, [r3, #0]
 80035e6:	4b07      	ldr	r3, [pc, #28]	@ (8003604 <LPS25HB_read_byte+0x38>)
 80035e8:	7818      	ldrb	r0, [r3, #0]
 80035ea:	f107 020f 	add.w	r2, r7, #15
 80035ee:	79f9      	ldrb	r1, [r7, #7]
 80035f0:	2301      	movs	r3, #1
 80035f2:	47a0      	blx	r4
	return rx_data;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd90      	pop	{r4, r7, pc}
 80035fe:	bf00      	nop
 8003600:	200002b8 	.word	0x200002b8
 8003604:	2000000a 	.word	0x2000000a

08003608 <LPS25HB_read_array>:

void LPS25HB_read_array(uint8_t register_address, uint8_t* data, uint8_t size) {
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	4613      	mov	r3, r2
 8003616:	71bb      	strb	r3, [r7, #6]
	if (I2C_read_data == NULL || data == NULL || size == 0) {
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <LPS25HB_read_array+0x40>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <LPS25HB_read_array+0x36>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <LPS25HB_read_array+0x36>
 8003626:	79bb      	ldrb	r3, [r7, #6]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <LPS25HB_read_array+0x36>
	        return;
	}

	I2C_read_data(lps25hb_address, register_address, data, size);
 800362c:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <LPS25HB_read_array+0x40>)
 800362e:	681c      	ldr	r4, [r3, #0]
 8003630:	4b06      	ldr	r3, [pc, #24]	@ (800364c <LPS25HB_read_array+0x44>)
 8003632:	7818      	ldrb	r0, [r3, #0]
 8003634:	79bb      	ldrb	r3, [r7, #6]
 8003636:	79f9      	ldrb	r1, [r7, #7]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	47a0      	blx	r4
 800363c:	e000      	b.n	8003640 <LPS25HB_read_array+0x38>
	        return;
 800363e:	bf00      	nop
}
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}
 8003646:	bf00      	nop
 8003648:	200002b8 	.word	0x200002b8
 800364c:	2000000a 	.word	0x2000000a

08003650 <LPS25HB_write_byte>:

void LPS25HB_write_byte(uint8_t register_address, uint8_t data) {
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	460a      	mov	r2, r1
 800365a:	71fb      	strb	r3, [r7, #7]
 800365c:	4613      	mov	r3, r2
 800365e:	71bb      	strb	r3, [r7, #6]
	if (I2C_write_data == NULL) {
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <LPS25HB_write_byte+0x34>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <LPS25HB_write_byte+0x2a>
	        return;
	}

	I2C_write_data(lps25hb_address, register_address, &data, 1);
 8003668:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <LPS25HB_write_byte+0x34>)
 800366a:	681c      	ldr	r4, [r3, #0]
 800366c:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <LPS25HB_write_byte+0x38>)
 800366e:	7818      	ldrb	r0, [r3, #0]
 8003670:	1dba      	adds	r2, r7, #6
 8003672:	79f9      	ldrb	r1, [r7, #7]
 8003674:	2301      	movs	r3, #1
 8003676:	47a0      	blx	r4
 8003678:	e000      	b.n	800367c <LPS25HB_write_byte+0x2c>
	        return;
 800367a:	bf00      	nop
}
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	200002bc 	.word	0x200002bc
 8003688:	2000000a 	.word	0x2000000a

0800368c <LPS25HB_Init>:

uint8_t LPS25HB_Init(I2C_ReadCallback read_callback,
					 I2C_WriteCallback write_callback) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]

	if(read_callback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <LPS25HB_Init+0x16>
		I2C_read_data = read_callback;
 800369c:	4a21      	ldr	r2, [pc, #132]	@ (8003724 <LPS25HB_Init+0x98>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]

	if(write_callback != NULL)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <LPS25HB_Init+0x22>
		I2C_write_data = write_callback;
 80036a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003728 <LPS25HB_Init+0x9c>)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6013      	str	r3, [r2, #0]

	uint8_t status = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]

	LL_mDelay(100);
 80036b2:	2064      	movs	r0, #100	@ 0x64
 80036b4:	f7ff fd8a 	bl	80031cc <LL_mDelay>

	uint8_t who_am_i = LPS25HB_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80036b8:	200f      	movs	r0, #15
 80036ba:	f7ff ff87 	bl	80035cc <LPS25HB_read_byte>
 80036be:	4603      	mov	r3, r0
 80036c0:	73bb      	strb	r3, [r7, #14]

	if (who_am_i != LPS25HB_WHO_AM_I_VALUE) {
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	2bbd      	cmp	r3, #189	@ 0xbd
 80036c6:	d00e      	beq.n	80036e6 <LPS25HB_Init+0x5a>
		lps25hb_address = LPS25HB_DEVICE_ADDRESS_1;
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <LPS25HB_Init+0xa0>)
 80036ca:	22bb      	movs	r2, #187	@ 0xbb
 80036cc:	701a      	strb	r2, [r3, #0]
		who_am_i = LPS25HB_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80036ce:	200f      	movs	r0, #15
 80036d0:	f7ff ff7c 	bl	80035cc <LPS25HB_read_byte>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73bb      	strb	r3, [r7, #14]

		if (who_am_i != LPS25HB_WHO_AM_I_VALUE) {
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	2bbd      	cmp	r3, #189	@ 0xbd
 80036dc:	d003      	beq.n	80036e6 <LPS25HB_Init+0x5a>
			status = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
			return status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	e019      	b.n	800371a <LPS25HB_Init+0x8e>
		}
	}

	uint8_t ctrl1 = LPS25HB_read_byte(LPS25HB_ADDRESS_CTRL1);
 80036e6:	2020      	movs	r0, #32
 80036e8:	f7ff ff70 	bl	80035cc <LPS25HB_read_byte>
 80036ec:	4603      	mov	r3, r0
 80036ee:	737b      	strb	r3, [r7, #13]
	ctrl1 &= 0xF;
 80036f0:	7b7b      	ldrb	r3, [r7, #13]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	737b      	strb	r3, [r7, #13]
	ctrl1 |= 0x90;
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 80036fe:	737b      	strb	r3, [r7, #13]

	LPS25HB_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8003700:	7b7b      	ldrb	r3, [r7, #13]
 8003702:	4619      	mov	r1, r3
 8003704:	2020      	movs	r0, #32
 8003706:	f7ff ffa3 	bl	8003650 <LPS25HB_write_byte>

	initial_pressure = LPS25HB_get_pressure();
 800370a:	f000 f813 	bl	8003734 <LPS25HB_get_pressure>
 800370e:	eef0 7a40 	vmov.f32	s15, s0
 8003712:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <LPS25HB_Init+0xa4>)
 8003714:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200002b8 	.word	0x200002b8
 8003728:	200002bc 	.word	0x200002bc
 800372c:	2000000a 	.word	0x2000000a
 8003730:	200002b4 	.word	0x200002b4

08003734 <LPS25HB_get_pressure>:

float LPS25HB_get_pressure(void) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 800373a:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <LPS25HB_get_pressure+0x50>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <LPS25HB_get_pressure+0x14>
	        return -1;
 8003742:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003746:	e016      	b.n	8003776 <LPS25HB_get_pressure+0x42>
	}

	uint8_t pressure_data[3];

	LPS25HB_read_array(LPS25HB_ADDRESS_PRESS_OUT_XL, pressure_data, 3);
 8003748:	463b      	mov	r3, r7
 800374a:	2203      	movs	r2, #3
 800374c:	4619      	mov	r1, r3
 800374e:	2028      	movs	r0, #40	@ 0x28
 8003750:	f7ff ff5a 	bl	8003608 <LPS25HB_read_array>

	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8003754:	78bb      	ldrb	r3, [r7, #2]
 8003756:	041a      	lsls	r2, r3, #16
									 pressure_data[1] << 8 |
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	021b      	lsls	r3, r3, #8
	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 800375c:	4313      	orrs	r3, r2
									 pressure_data[0]);
 800375e:	783a      	ldrb	r2, [r7, #0]
	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8003760:	4313      	orrs	r3, r2
 8003762:	607b      	str	r3, [r7, #4]

	return (float)(pressure_raw / 4096.0f);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003788 <LPS25HB_get_pressure+0x54>
 8003772:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8003776:	eef0 7a47 	vmov.f32	s15, s14
 800377a:	eeb0 0a67 	vmov.f32	s0, s15
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200002b8 	.word	0x200002b8
 8003788:	45800000 	.word	0x45800000

0800378c <LPS25HB_get_temperature>:

float LPS25HB_get_temperature(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8003792:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <LPS25HB_get_temperature+0x54>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <LPS25HB_get_temperature+0x14>
		return -1;
 800379a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800379e:	e01a      	b.n	80037d6 <LPS25HB_get_temperature+0x4a>
	}

	uint8_t temperature_data[2];

	LPS25HB_read_array(LPS25HB_ADDRESS_TEMP_OUT_L, temperature_data, 2);
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2202      	movs	r2, #2
 80037a4:	4619      	mov	r1, r3
 80037a6:	202b      	movs	r0, #43	@ 0x2b
 80037a8:	f7ff ff2e 	bl	8003608 <LPS25HB_read_array>

	int16_t temperature_raw = (int16_t)(temperature_data[1] << 8 |
 80037ac:	797b      	ldrb	r3, [r7, #5]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	b21a      	sxth	r2, r3
							   	   	    temperature_data[0]);
 80037b2:	793b      	ldrb	r3, [r7, #4]
 80037b4:	b21b      	sxth	r3, r3
	int16_t temperature_raw = (int16_t)(temperature_data[1] << 8 |
 80037b6:	4313      	orrs	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]

	return 42.5f + ((float)temperature_raw / 480.0f);
 80037ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80037e4 <LPS25HB_get_temperature+0x58>
 80037ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037ce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80037e8 <LPS25HB_get_temperature+0x5c>
 80037d2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80037d6:	eeb0 0a67 	vmov.f32	s0, s15
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200002b8 	.word	0x200002b8
 80037e4:	43f00000 	.word	0x43f00000
 80037e8:	422a0000 	.word	0x422a0000

080037ec <LPS25HB_get_height>:

float LPS25HB_get_height(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0

	float current_pressure = LPS25HB_get_pressure();
 80037f2:	f7ff ff9f 	bl	8003734 <LPS25HB_get_pressure>
 80037f6:	ed87 0a01 	vstr	s0, [r7, #4]

	return (float)(44330*(1 - (current_pressure / initial_pressure)));
 80037fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003824 <LPS25HB_get_height+0x38>)
 80037fc:	ed93 7a00 	vldr	s14, [r3]
 8003800:	edd7 6a01 	vldr	s13, [r7, #4]
 8003804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800380c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003810:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003828 <LPS25HB_get_height+0x3c>
 8003814:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003818:	eeb0 0a67 	vmov.f32	s0, s15
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200002b4 	.word	0x200002b4
 8003828:	472d2a00 	.word	0x472d2a00

0800382c <__cvt>:
 800382c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	ec57 6b10 	vmov	r6, r7, d0
 8003834:	2f00      	cmp	r7, #0
 8003836:	460c      	mov	r4, r1
 8003838:	4619      	mov	r1, r3
 800383a:	463b      	mov	r3, r7
 800383c:	bfbb      	ittet	lt
 800383e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003842:	461f      	movlt	r7, r3
 8003844:	2300      	movge	r3, #0
 8003846:	232d      	movlt	r3, #45	@ 0x2d
 8003848:	700b      	strb	r3, [r1, #0]
 800384a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800384c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003850:	4691      	mov	r9, r2
 8003852:	f023 0820 	bic.w	r8, r3, #32
 8003856:	bfbc      	itt	lt
 8003858:	4632      	movlt	r2, r6
 800385a:	4616      	movlt	r6, r2
 800385c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003860:	d005      	beq.n	800386e <__cvt+0x42>
 8003862:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003866:	d100      	bne.n	800386a <__cvt+0x3e>
 8003868:	3401      	adds	r4, #1
 800386a:	2102      	movs	r1, #2
 800386c:	e000      	b.n	8003870 <__cvt+0x44>
 800386e:	2103      	movs	r1, #3
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	ab02      	add	r3, sp, #8
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	ec47 6b10 	vmov	d0, r6, r7
 800387c:	4653      	mov	r3, sl
 800387e:	4622      	mov	r2, r4
 8003880:	f000 fe5a 	bl	8004538 <_dtoa_r>
 8003884:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003888:	4605      	mov	r5, r0
 800388a:	d119      	bne.n	80038c0 <__cvt+0x94>
 800388c:	f019 0f01 	tst.w	r9, #1
 8003890:	d00e      	beq.n	80038b0 <__cvt+0x84>
 8003892:	eb00 0904 	add.w	r9, r0, r4
 8003896:	2200      	movs	r2, #0
 8003898:	2300      	movs	r3, #0
 800389a:	4630      	mov	r0, r6
 800389c:	4639      	mov	r1, r7
 800389e:	f7fd f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80038a2:	b108      	cbz	r0, 80038a8 <__cvt+0x7c>
 80038a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80038a8:	2230      	movs	r2, #48	@ 0x30
 80038aa:	9b03      	ldr	r3, [sp, #12]
 80038ac:	454b      	cmp	r3, r9
 80038ae:	d31e      	bcc.n	80038ee <__cvt+0xc2>
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038b4:	1b5b      	subs	r3, r3, r5
 80038b6:	4628      	mov	r0, r5
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	b004      	add	sp, #16
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038c4:	eb00 0904 	add.w	r9, r0, r4
 80038c8:	d1e5      	bne.n	8003896 <__cvt+0x6a>
 80038ca:	7803      	ldrb	r3, [r0, #0]
 80038cc:	2b30      	cmp	r3, #48	@ 0x30
 80038ce:	d10a      	bne.n	80038e6 <__cvt+0xba>
 80038d0:	2200      	movs	r2, #0
 80038d2:	2300      	movs	r3, #0
 80038d4:	4630      	mov	r0, r6
 80038d6:	4639      	mov	r1, r7
 80038d8:	f7fd f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80038dc:	b918      	cbnz	r0, 80038e6 <__cvt+0xba>
 80038de:	f1c4 0401 	rsb	r4, r4, #1
 80038e2:	f8ca 4000 	str.w	r4, [sl]
 80038e6:	f8da 3000 	ldr.w	r3, [sl]
 80038ea:	4499      	add	r9, r3
 80038ec:	e7d3      	b.n	8003896 <__cvt+0x6a>
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	9103      	str	r1, [sp, #12]
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e7d9      	b.n	80038aa <__cvt+0x7e>

080038f6 <__exponent>:
 80038f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038f8:	2900      	cmp	r1, #0
 80038fa:	bfba      	itte	lt
 80038fc:	4249      	neglt	r1, r1
 80038fe:	232d      	movlt	r3, #45	@ 0x2d
 8003900:	232b      	movge	r3, #43	@ 0x2b
 8003902:	2909      	cmp	r1, #9
 8003904:	7002      	strb	r2, [r0, #0]
 8003906:	7043      	strb	r3, [r0, #1]
 8003908:	dd29      	ble.n	800395e <__exponent+0x68>
 800390a:	f10d 0307 	add.w	r3, sp, #7
 800390e:	461d      	mov	r5, r3
 8003910:	270a      	movs	r7, #10
 8003912:	461a      	mov	r2, r3
 8003914:	fbb1 f6f7 	udiv	r6, r1, r7
 8003918:	fb07 1416 	mls	r4, r7, r6, r1
 800391c:	3430      	adds	r4, #48	@ 0x30
 800391e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003922:	460c      	mov	r4, r1
 8003924:	2c63      	cmp	r4, #99	@ 0x63
 8003926:	f103 33ff 	add.w	r3, r3, #4294967295
 800392a:	4631      	mov	r1, r6
 800392c:	dcf1      	bgt.n	8003912 <__exponent+0x1c>
 800392e:	3130      	adds	r1, #48	@ 0x30
 8003930:	1e94      	subs	r4, r2, #2
 8003932:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003936:	1c41      	adds	r1, r0, #1
 8003938:	4623      	mov	r3, r4
 800393a:	42ab      	cmp	r3, r5
 800393c:	d30a      	bcc.n	8003954 <__exponent+0x5e>
 800393e:	f10d 0309 	add.w	r3, sp, #9
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	42ac      	cmp	r4, r5
 8003946:	bf88      	it	hi
 8003948:	2300      	movhi	r3, #0
 800394a:	3302      	adds	r3, #2
 800394c:	4403      	add	r3, r0
 800394e:	1a18      	subs	r0, r3, r0
 8003950:	b003      	add	sp, #12
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003954:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003958:	f801 6f01 	strb.w	r6, [r1, #1]!
 800395c:	e7ed      	b.n	800393a <__exponent+0x44>
 800395e:	2330      	movs	r3, #48	@ 0x30
 8003960:	3130      	adds	r1, #48	@ 0x30
 8003962:	7083      	strb	r3, [r0, #2]
 8003964:	70c1      	strb	r1, [r0, #3]
 8003966:	1d03      	adds	r3, r0, #4
 8003968:	e7f1      	b.n	800394e <__exponent+0x58>
	...

0800396c <_printf_float>:
 800396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	b08d      	sub	sp, #52	@ 0x34
 8003972:	460c      	mov	r4, r1
 8003974:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003978:	4616      	mov	r6, r2
 800397a:	461f      	mov	r7, r3
 800397c:	4605      	mov	r5, r0
 800397e:	f000 fcdb 	bl	8004338 <_localeconv_r>
 8003982:	6803      	ldr	r3, [r0, #0]
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fc72 	bl	8000270 <strlen>
 800398c:	2300      	movs	r3, #0
 800398e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003990:	f8d8 3000 	ldr.w	r3, [r8]
 8003994:	9005      	str	r0, [sp, #20]
 8003996:	3307      	adds	r3, #7
 8003998:	f023 0307 	bic.w	r3, r3, #7
 800399c:	f103 0208 	add.w	r2, r3, #8
 80039a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039a4:	f8d4 b000 	ldr.w	fp, [r4]
 80039a8:	f8c8 2000 	str.w	r2, [r8]
 80039ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80039b4:	9307      	str	r3, [sp, #28]
 80039b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80039ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c34 <_printf_float+0x2c8>)
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	f7fd f8b0 	bl	8000b2c <__aeabi_dcmpun>
 80039cc:	bb70      	cbnz	r0, 8003a2c <_printf_float+0xc0>
 80039ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039d2:	4b98      	ldr	r3, [pc, #608]	@ (8003c34 <_printf_float+0x2c8>)
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	f7fd f88a 	bl	8000af0 <__aeabi_dcmple>
 80039dc:	bb30      	cbnz	r0, 8003a2c <_printf_float+0xc0>
 80039de:	2200      	movs	r2, #0
 80039e0:	2300      	movs	r3, #0
 80039e2:	4640      	mov	r0, r8
 80039e4:	4649      	mov	r1, r9
 80039e6:	f7fd f879 	bl	8000adc <__aeabi_dcmplt>
 80039ea:	b110      	cbz	r0, 80039f2 <_printf_float+0x86>
 80039ec:	232d      	movs	r3, #45	@ 0x2d
 80039ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039f2:	4a91      	ldr	r2, [pc, #580]	@ (8003c38 <_printf_float+0x2cc>)
 80039f4:	4b91      	ldr	r3, [pc, #580]	@ (8003c3c <_printf_float+0x2d0>)
 80039f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80039fa:	bf94      	ite	ls
 80039fc:	4690      	movls	r8, r2
 80039fe:	4698      	movhi	r8, r3
 8003a00:	2303      	movs	r3, #3
 8003a02:	6123      	str	r3, [r4, #16]
 8003a04:	f02b 0304 	bic.w	r3, fp, #4
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	f04f 0900 	mov.w	r9, #0
 8003a0e:	9700      	str	r7, [sp, #0]
 8003a10:	4633      	mov	r3, r6
 8003a12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003a14:	4621      	mov	r1, r4
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f9d2 	bl	8003dc0 <_printf_common>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f040 808d 	bne.w	8003b3c <_printf_float+0x1d0>
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
 8003a26:	b00d      	add	sp, #52	@ 0x34
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	4640      	mov	r0, r8
 8003a32:	4649      	mov	r1, r9
 8003a34:	f7fd f87a 	bl	8000b2c <__aeabi_dcmpun>
 8003a38:	b140      	cbz	r0, 8003a4c <_printf_float+0xe0>
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bfbc      	itt	lt
 8003a40:	232d      	movlt	r3, #45	@ 0x2d
 8003a42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a46:	4a7e      	ldr	r2, [pc, #504]	@ (8003c40 <_printf_float+0x2d4>)
 8003a48:	4b7e      	ldr	r3, [pc, #504]	@ (8003c44 <_printf_float+0x2d8>)
 8003a4a:	e7d4      	b.n	80039f6 <_printf_float+0x8a>
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003a52:	9206      	str	r2, [sp, #24]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	d13b      	bne.n	8003ad0 <_printf_float+0x164>
 8003a58:	2306      	movs	r3, #6
 8003a5a:	6063      	str	r3, [r4, #4]
 8003a5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003a60:	2300      	movs	r3, #0
 8003a62:	6022      	str	r2, [r4, #0]
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003a6c:	ab09      	add	r3, sp, #36	@ 0x24
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	6861      	ldr	r1, [r4, #4]
 8003a72:	ec49 8b10 	vmov	d0, r8, r9
 8003a76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff fed6 	bl	800382c <__cvt>
 8003a80:	9b06      	ldr	r3, [sp, #24]
 8003a82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003a84:	2b47      	cmp	r3, #71	@ 0x47
 8003a86:	4680      	mov	r8, r0
 8003a88:	d129      	bne.n	8003ade <_printf_float+0x172>
 8003a8a:	1cc8      	adds	r0, r1, #3
 8003a8c:	db02      	blt.n	8003a94 <_printf_float+0x128>
 8003a8e:	6863      	ldr	r3, [r4, #4]
 8003a90:	4299      	cmp	r1, r3
 8003a92:	dd41      	ble.n	8003b18 <_printf_float+0x1ac>
 8003a94:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a98:	fa5f fa8a 	uxtb.w	sl, sl
 8003a9c:	3901      	subs	r1, #1
 8003a9e:	4652      	mov	r2, sl
 8003aa0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003aa4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003aa6:	f7ff ff26 	bl	80038f6 <__exponent>
 8003aaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003aac:	1813      	adds	r3, r2, r0
 8003aae:	2a01      	cmp	r2, #1
 8003ab0:	4681      	mov	r9, r0
 8003ab2:	6123      	str	r3, [r4, #16]
 8003ab4:	dc02      	bgt.n	8003abc <_printf_float+0x150>
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	07d2      	lsls	r2, r2, #31
 8003aba:	d501      	bpl.n	8003ac0 <_printf_float+0x154>
 8003abc:	3301      	adds	r3, #1
 8003abe:	6123      	str	r3, [r4, #16]
 8003ac0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0a2      	beq.n	8003a0e <_printf_float+0xa2>
 8003ac8:	232d      	movs	r3, #45	@ 0x2d
 8003aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ace:	e79e      	b.n	8003a0e <_printf_float+0xa2>
 8003ad0:	9a06      	ldr	r2, [sp, #24]
 8003ad2:	2a47      	cmp	r2, #71	@ 0x47
 8003ad4:	d1c2      	bne.n	8003a5c <_printf_float+0xf0>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1c0      	bne.n	8003a5c <_printf_float+0xf0>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e7bd      	b.n	8003a5a <_printf_float+0xee>
 8003ade:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ae2:	d9db      	bls.n	8003a9c <_printf_float+0x130>
 8003ae4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ae8:	d118      	bne.n	8003b1c <_printf_float+0x1b0>
 8003aea:	2900      	cmp	r1, #0
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	dd0b      	ble.n	8003b08 <_printf_float+0x19c>
 8003af0:	6121      	str	r1, [r4, #16]
 8003af2:	b913      	cbnz	r3, 8003afa <_printf_float+0x18e>
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	07d0      	lsls	r0, r2, #31
 8003af8:	d502      	bpl.n	8003b00 <_printf_float+0x194>
 8003afa:	3301      	adds	r3, #1
 8003afc:	440b      	add	r3, r1
 8003afe:	6123      	str	r3, [r4, #16]
 8003b00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b02:	f04f 0900 	mov.w	r9, #0
 8003b06:	e7db      	b.n	8003ac0 <_printf_float+0x154>
 8003b08:	b913      	cbnz	r3, 8003b10 <_printf_float+0x1a4>
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	07d2      	lsls	r2, r2, #31
 8003b0e:	d501      	bpl.n	8003b14 <_printf_float+0x1a8>
 8003b10:	3302      	adds	r3, #2
 8003b12:	e7f4      	b.n	8003afe <_printf_float+0x192>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e7f2      	b.n	8003afe <_printf_float+0x192>
 8003b18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	db05      	blt.n	8003b2e <_printf_float+0x1c2>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	6121      	str	r1, [r4, #16]
 8003b26:	07d8      	lsls	r0, r3, #31
 8003b28:	d5ea      	bpl.n	8003b00 <_printf_float+0x194>
 8003b2a:	1c4b      	adds	r3, r1, #1
 8003b2c:	e7e7      	b.n	8003afe <_printf_float+0x192>
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	bfd4      	ite	le
 8003b32:	f1c1 0202 	rsble	r2, r1, #2
 8003b36:	2201      	movgt	r2, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	e7e0      	b.n	8003afe <_printf_float+0x192>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	055a      	lsls	r2, r3, #21
 8003b40:	d407      	bmi.n	8003b52 <_printf_float+0x1e6>
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	4642      	mov	r2, r8
 8003b46:	4631      	mov	r1, r6
 8003b48:	4628      	mov	r0, r5
 8003b4a:	47b8      	blx	r7
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d12b      	bne.n	8003ba8 <_printf_float+0x23c>
 8003b50:	e767      	b.n	8003a22 <_printf_float+0xb6>
 8003b52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b56:	f240 80dd 	bls.w	8003d14 <_printf_float+0x3a8>
 8003b5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2300      	movs	r3, #0
 8003b62:	f7fc ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d033      	beq.n	8003bd2 <_printf_float+0x266>
 8003b6a:	4a37      	ldr	r2, [pc, #220]	@ (8003c48 <_printf_float+0x2dc>)
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b8      	blx	r7
 8003b74:	3001      	adds	r0, #1
 8003b76:	f43f af54 	beq.w	8003a22 <_printf_float+0xb6>
 8003b7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003b7e:	4543      	cmp	r3, r8
 8003b80:	db02      	blt.n	8003b88 <_printf_float+0x21c>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	07d8      	lsls	r0, r3, #31
 8003b86:	d50f      	bpl.n	8003ba8 <_printf_float+0x23c>
 8003b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b8c:	4631      	mov	r1, r6
 8003b8e:	4628      	mov	r0, r5
 8003b90:	47b8      	blx	r7
 8003b92:	3001      	adds	r0, #1
 8003b94:	f43f af45 	beq.w	8003a22 <_printf_float+0xb6>
 8003b98:	f04f 0900 	mov.w	r9, #0
 8003b9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ba0:	f104 0a1a 	add.w	sl, r4, #26
 8003ba4:	45c8      	cmp	r8, r9
 8003ba6:	dc09      	bgt.n	8003bbc <_printf_float+0x250>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	079b      	lsls	r3, r3, #30
 8003bac:	f100 8103 	bmi.w	8003db6 <_printf_float+0x44a>
 8003bb0:	68e0      	ldr	r0, [r4, #12]
 8003bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	bfb8      	it	lt
 8003bb8:	4618      	movlt	r0, r3
 8003bba:	e734      	b.n	8003a26 <_printf_float+0xba>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4652      	mov	r2, sl
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b8      	blx	r7
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f af2b 	beq.w	8003a22 <_printf_float+0xb6>
 8003bcc:	f109 0901 	add.w	r9, r9, #1
 8003bd0:	e7e8      	b.n	8003ba4 <_printf_float+0x238>
 8003bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	dc39      	bgt.n	8003c4c <_printf_float+0x2e0>
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <_printf_float+0x2dc>)
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f af1d 	beq.w	8003a22 <_printf_float+0xb6>
 8003be8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003bec:	ea59 0303 	orrs.w	r3, r9, r3
 8003bf0:	d102      	bne.n	8003bf8 <_printf_float+0x28c>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	07d9      	lsls	r1, r3, #31
 8003bf6:	d5d7      	bpl.n	8003ba8 <_printf_float+0x23c>
 8003bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b8      	blx	r7
 8003c02:	3001      	adds	r0, #1
 8003c04:	f43f af0d 	beq.w	8003a22 <_printf_float+0xb6>
 8003c08:	f04f 0a00 	mov.w	sl, #0
 8003c0c:	f104 0b1a 	add.w	fp, r4, #26
 8003c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c12:	425b      	negs	r3, r3
 8003c14:	4553      	cmp	r3, sl
 8003c16:	dc01      	bgt.n	8003c1c <_printf_float+0x2b0>
 8003c18:	464b      	mov	r3, r9
 8003c1a:	e793      	b.n	8003b44 <_printf_float+0x1d8>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	465a      	mov	r2, fp
 8003c20:	4631      	mov	r1, r6
 8003c22:	4628      	mov	r0, r5
 8003c24:	47b8      	blx	r7
 8003c26:	3001      	adds	r0, #1
 8003c28:	f43f aefb 	beq.w	8003a22 <_printf_float+0xb6>
 8003c2c:	f10a 0a01 	add.w	sl, sl, #1
 8003c30:	e7ee      	b.n	8003c10 <_printf_float+0x2a4>
 8003c32:	bf00      	nop
 8003c34:	7fefffff 	.word	0x7fefffff
 8003c38:	0800650f 	.word	0x0800650f
 8003c3c:	08006513 	.word	0x08006513
 8003c40:	08006517 	.word	0x08006517
 8003c44:	0800651b 	.word	0x0800651b
 8003c48:	0800651f 	.word	0x0800651f
 8003c4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003c52:	4553      	cmp	r3, sl
 8003c54:	bfa8      	it	ge
 8003c56:	4653      	movge	r3, sl
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	dc36      	bgt.n	8003ccc <_printf_float+0x360>
 8003c5e:	f04f 0b00 	mov.w	fp, #0
 8003c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c66:	f104 021a 	add.w	r2, r4, #26
 8003c6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c6c:	9306      	str	r3, [sp, #24]
 8003c6e:	eba3 0309 	sub.w	r3, r3, r9
 8003c72:	455b      	cmp	r3, fp
 8003c74:	dc31      	bgt.n	8003cda <_printf_float+0x36e>
 8003c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c78:	459a      	cmp	sl, r3
 8003c7a:	dc3a      	bgt.n	8003cf2 <_printf_float+0x386>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	07da      	lsls	r2, r3, #31
 8003c80:	d437      	bmi.n	8003cf2 <_printf_float+0x386>
 8003c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c84:	ebaa 0903 	sub.w	r9, sl, r3
 8003c88:	9b06      	ldr	r3, [sp, #24]
 8003c8a:	ebaa 0303 	sub.w	r3, sl, r3
 8003c8e:	4599      	cmp	r9, r3
 8003c90:	bfa8      	it	ge
 8003c92:	4699      	movge	r9, r3
 8003c94:	f1b9 0f00 	cmp.w	r9, #0
 8003c98:	dc33      	bgt.n	8003d02 <_printf_float+0x396>
 8003c9a:	f04f 0800 	mov.w	r8, #0
 8003c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ca2:	f104 0b1a 	add.w	fp, r4, #26
 8003ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8003cac:	eba3 0309 	sub.w	r3, r3, r9
 8003cb0:	4543      	cmp	r3, r8
 8003cb2:	f77f af79 	ble.w	8003ba8 <_printf_float+0x23c>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	465a      	mov	r2, fp
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f43f aeae 	beq.w	8003a22 <_printf_float+0xb6>
 8003cc6:	f108 0801 	add.w	r8, r8, #1
 8003cca:	e7ec      	b.n	8003ca6 <_printf_float+0x33a>
 8003ccc:	4642      	mov	r2, r8
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d1c2      	bne.n	8003c5e <_printf_float+0x2f2>
 8003cd8:	e6a3      	b.n	8003a22 <_printf_float+0xb6>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4628      	mov	r0, r5
 8003ce0:	9206      	str	r2, [sp, #24]
 8003ce2:	47b8      	blx	r7
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f43f ae9c 	beq.w	8003a22 <_printf_float+0xb6>
 8003cea:	9a06      	ldr	r2, [sp, #24]
 8003cec:	f10b 0b01 	add.w	fp, fp, #1
 8003cf0:	e7bb      	b.n	8003c6a <_printf_float+0x2fe>
 8003cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cf6:	4631      	mov	r1, r6
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	47b8      	blx	r7
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d1c0      	bne.n	8003c82 <_printf_float+0x316>
 8003d00:	e68f      	b.n	8003a22 <_printf_float+0xb6>
 8003d02:	9a06      	ldr	r2, [sp, #24]
 8003d04:	464b      	mov	r3, r9
 8003d06:	4442      	add	r2, r8
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d1c3      	bne.n	8003c9a <_printf_float+0x32e>
 8003d12:	e686      	b.n	8003a22 <_printf_float+0xb6>
 8003d14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d18:	f1ba 0f01 	cmp.w	sl, #1
 8003d1c:	dc01      	bgt.n	8003d22 <_printf_float+0x3b6>
 8003d1e:	07db      	lsls	r3, r3, #31
 8003d20:	d536      	bpl.n	8003d90 <_printf_float+0x424>
 8003d22:	2301      	movs	r3, #1
 8003d24:	4642      	mov	r2, r8
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	f43f ae78 	beq.w	8003a22 <_printf_float+0xb6>
 8003d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f ae70 	beq.w	8003a22 <_printf_float+0xb6>
 8003d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d4e:	f7fc febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d52:	b9c0      	cbnz	r0, 8003d86 <_printf_float+0x41a>
 8003d54:	4653      	mov	r3, sl
 8003d56:	f108 0201 	add.w	r2, r8, #1
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	47b8      	blx	r7
 8003d60:	3001      	adds	r0, #1
 8003d62:	d10c      	bne.n	8003d7e <_printf_float+0x412>
 8003d64:	e65d      	b.n	8003a22 <_printf_float+0xb6>
 8003d66:	2301      	movs	r3, #1
 8003d68:	465a      	mov	r2, fp
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	47b8      	blx	r7
 8003d70:	3001      	adds	r0, #1
 8003d72:	f43f ae56 	beq.w	8003a22 <_printf_float+0xb6>
 8003d76:	f108 0801 	add.w	r8, r8, #1
 8003d7a:	45d0      	cmp	r8, sl
 8003d7c:	dbf3      	blt.n	8003d66 <_printf_float+0x3fa>
 8003d7e:	464b      	mov	r3, r9
 8003d80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003d84:	e6df      	b.n	8003b46 <_printf_float+0x1da>
 8003d86:	f04f 0800 	mov.w	r8, #0
 8003d8a:	f104 0b1a 	add.w	fp, r4, #26
 8003d8e:	e7f4      	b.n	8003d7a <_printf_float+0x40e>
 8003d90:	2301      	movs	r3, #1
 8003d92:	4642      	mov	r2, r8
 8003d94:	e7e1      	b.n	8003d5a <_printf_float+0x3ee>
 8003d96:	2301      	movs	r3, #1
 8003d98:	464a      	mov	r2, r9
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b8      	blx	r7
 8003da0:	3001      	adds	r0, #1
 8003da2:	f43f ae3e 	beq.w	8003a22 <_printf_float+0xb6>
 8003da6:	f108 0801 	add.w	r8, r8, #1
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003dae:	1a5b      	subs	r3, r3, r1
 8003db0:	4543      	cmp	r3, r8
 8003db2:	dcf0      	bgt.n	8003d96 <_printf_float+0x42a>
 8003db4:	e6fc      	b.n	8003bb0 <_printf_float+0x244>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	f104 0919 	add.w	r9, r4, #25
 8003dbe:	e7f4      	b.n	8003daa <_printf_float+0x43e>

08003dc0 <_printf_common>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	688a      	ldr	r2, [r1, #8]
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bfb8      	it	lt
 8003dd4:	4613      	movlt	r3, r2
 8003dd6:	6033      	str	r3, [r6, #0]
 8003dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ddc:	4607      	mov	r7, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	b10a      	cbz	r2, 8003de6 <_printf_common+0x26>
 8003de2:	3301      	adds	r3, #1
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	0699      	lsls	r1, r3, #26
 8003dea:	bf42      	ittt	mi
 8003dec:	6833      	ldrmi	r3, [r6, #0]
 8003dee:	3302      	addmi	r3, #2
 8003df0:	6033      	strmi	r3, [r6, #0]
 8003df2:	6825      	ldr	r5, [r4, #0]
 8003df4:	f015 0506 	ands.w	r5, r5, #6
 8003df8:	d106      	bne.n	8003e08 <_printf_common+0x48>
 8003dfa:	f104 0a19 	add.w	sl, r4, #25
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	6832      	ldr	r2, [r6, #0]
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	dc26      	bgt.n	8003e56 <_printf_common+0x96>
 8003e08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	3b00      	subs	r3, #0
 8003e10:	bf18      	it	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	0692      	lsls	r2, r2, #26
 8003e16:	d42b      	bmi.n	8003e70 <_printf_common+0xb0>
 8003e18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	4638      	mov	r0, r7
 8003e20:	47c8      	blx	r9
 8003e22:	3001      	adds	r0, #1
 8003e24:	d01e      	beq.n	8003e64 <_printf_common+0xa4>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	6922      	ldr	r2, [r4, #16]
 8003e2a:	f003 0306 	and.w	r3, r3, #6
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	bf02      	ittt	eq
 8003e32:	68e5      	ldreq	r5, [r4, #12]
 8003e34:	6833      	ldreq	r3, [r6, #0]
 8003e36:	1aed      	subeq	r5, r5, r3
 8003e38:	68a3      	ldr	r3, [r4, #8]
 8003e3a:	bf0c      	ite	eq
 8003e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e40:	2500      	movne	r5, #0
 8003e42:	4293      	cmp	r3, r2
 8003e44:	bfc4      	itt	gt
 8003e46:	1a9b      	subgt	r3, r3, r2
 8003e48:	18ed      	addgt	r5, r5, r3
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	341a      	adds	r4, #26
 8003e4e:	42b5      	cmp	r5, r6
 8003e50:	d11a      	bne.n	8003e88 <_printf_common+0xc8>
 8003e52:	2000      	movs	r0, #0
 8003e54:	e008      	b.n	8003e68 <_printf_common+0xa8>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4652      	mov	r2, sl
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	47c8      	blx	r9
 8003e60:	3001      	adds	r0, #1
 8003e62:	d103      	bne.n	8003e6c <_printf_common+0xac>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	e7c6      	b.n	8003dfe <_printf_common+0x3e>
 8003e70:	18e1      	adds	r1, r4, r3
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	2030      	movs	r0, #48	@ 0x30
 8003e76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e7a:	4422      	add	r2, r4
 8003e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e84:	3302      	adds	r3, #2
 8003e86:	e7c7      	b.n	8003e18 <_printf_common+0x58>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	4638      	mov	r0, r7
 8003e90:	47c8      	blx	r9
 8003e92:	3001      	adds	r0, #1
 8003e94:	d0e6      	beq.n	8003e64 <_printf_common+0xa4>
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7d9      	b.n	8003e4e <_printf_common+0x8e>
	...

08003e9c <_printf_i>:
 8003e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	7e0f      	ldrb	r7, [r1, #24]
 8003ea2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ea4:	2f78      	cmp	r7, #120	@ 0x78
 8003ea6:	4691      	mov	r9, r2
 8003ea8:	4680      	mov	r8, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	469a      	mov	sl, r3
 8003eae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eb2:	d807      	bhi.n	8003ec4 <_printf_i+0x28>
 8003eb4:	2f62      	cmp	r7, #98	@ 0x62
 8003eb6:	d80a      	bhi.n	8003ece <_printf_i+0x32>
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	f000 80d2 	beq.w	8004062 <_printf_i+0x1c6>
 8003ebe:	2f58      	cmp	r7, #88	@ 0x58
 8003ec0:	f000 80b9 	beq.w	8004036 <_printf_i+0x19a>
 8003ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ecc:	e03a      	b.n	8003f44 <_printf_i+0xa8>
 8003ece:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ed2:	2b15      	cmp	r3, #21
 8003ed4:	d8f6      	bhi.n	8003ec4 <_printf_i+0x28>
 8003ed6:	a101      	add	r1, pc, #4	@ (adr r1, 8003edc <_printf_i+0x40>)
 8003ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003edc:	08003f35 	.word	0x08003f35
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003ec5 	.word	0x08003ec5
 8003ee8:	08003ec5 	.word	0x08003ec5
 8003eec:	08003ec5 	.word	0x08003ec5
 8003ef0:	08003ec5 	.word	0x08003ec5
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003ec5 	.word	0x08003ec5
 8003efc:	08003ec5 	.word	0x08003ec5
 8003f00:	08003ec5 	.word	0x08003ec5
 8003f04:	08003ec5 	.word	0x08003ec5
 8003f08:	08004049 	.word	0x08004049
 8003f0c:	08003f73 	.word	0x08003f73
 8003f10:	08004003 	.word	0x08004003
 8003f14:	08003ec5 	.word	0x08003ec5
 8003f18:	08003ec5 	.word	0x08003ec5
 8003f1c:	0800406b 	.word	0x0800406b
 8003f20:	08003ec5 	.word	0x08003ec5
 8003f24:	08003f73 	.word	0x08003f73
 8003f28:	08003ec5 	.word	0x08003ec5
 8003f2c:	08003ec5 	.word	0x08003ec5
 8003f30:	0800400b 	.word	0x0800400b
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6032      	str	r2, [r6, #0]
 8003f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f44:	2301      	movs	r3, #1
 8003f46:	e09d      	b.n	8004084 <_printf_i+0x1e8>
 8003f48:	6833      	ldr	r3, [r6, #0]
 8003f4a:	6820      	ldr	r0, [r4, #0]
 8003f4c:	1d19      	adds	r1, r3, #4
 8003f4e:	6031      	str	r1, [r6, #0]
 8003f50:	0606      	lsls	r6, r0, #24
 8003f52:	d501      	bpl.n	8003f58 <_printf_i+0xbc>
 8003f54:	681d      	ldr	r5, [r3, #0]
 8003f56:	e003      	b.n	8003f60 <_printf_i+0xc4>
 8003f58:	0645      	lsls	r5, r0, #25
 8003f5a:	d5fb      	bpl.n	8003f54 <_printf_i+0xb8>
 8003f5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	da03      	bge.n	8003f6c <_printf_i+0xd0>
 8003f64:	232d      	movs	r3, #45	@ 0x2d
 8003f66:	426d      	negs	r5, r5
 8003f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f6c:	4859      	ldr	r0, [pc, #356]	@ (80040d4 <_printf_i+0x238>)
 8003f6e:	230a      	movs	r3, #10
 8003f70:	e011      	b.n	8003f96 <_printf_i+0xfa>
 8003f72:	6821      	ldr	r1, [r4, #0]
 8003f74:	6833      	ldr	r3, [r6, #0]
 8003f76:	0608      	lsls	r0, r1, #24
 8003f78:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f7c:	d402      	bmi.n	8003f84 <_printf_i+0xe8>
 8003f7e:	0649      	lsls	r1, r1, #25
 8003f80:	bf48      	it	mi
 8003f82:	b2ad      	uxthmi	r5, r5
 8003f84:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f86:	4853      	ldr	r0, [pc, #332]	@ (80040d4 <_printf_i+0x238>)
 8003f88:	6033      	str	r3, [r6, #0]
 8003f8a:	bf14      	ite	ne
 8003f8c:	230a      	movne	r3, #10
 8003f8e:	2308      	moveq	r3, #8
 8003f90:	2100      	movs	r1, #0
 8003f92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f96:	6866      	ldr	r6, [r4, #4]
 8003f98:	60a6      	str	r6, [r4, #8]
 8003f9a:	2e00      	cmp	r6, #0
 8003f9c:	bfa2      	ittt	ge
 8003f9e:	6821      	ldrge	r1, [r4, #0]
 8003fa0:	f021 0104 	bicge.w	r1, r1, #4
 8003fa4:	6021      	strge	r1, [r4, #0]
 8003fa6:	b90d      	cbnz	r5, 8003fac <_printf_i+0x110>
 8003fa8:	2e00      	cmp	r6, #0
 8003faa:	d04b      	beq.n	8004044 <_printf_i+0x1a8>
 8003fac:	4616      	mov	r6, r2
 8003fae:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb2:	fb03 5711 	mls	r7, r3, r1, r5
 8003fb6:	5dc7      	ldrb	r7, [r0, r7]
 8003fb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fbc:	462f      	mov	r7, r5
 8003fbe:	42bb      	cmp	r3, r7
 8003fc0:	460d      	mov	r5, r1
 8003fc2:	d9f4      	bls.n	8003fae <_printf_i+0x112>
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d10b      	bne.n	8003fe0 <_printf_i+0x144>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	07df      	lsls	r7, r3, #31
 8003fcc:	d508      	bpl.n	8003fe0 <_printf_i+0x144>
 8003fce:	6923      	ldr	r3, [r4, #16]
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	bfde      	ittt	le
 8003fd6:	2330      	movle	r3, #48	@ 0x30
 8003fd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fe0:	1b92      	subs	r2, r2, r6
 8003fe2:	6122      	str	r2, [r4, #16]
 8003fe4:	f8cd a000 	str.w	sl, [sp]
 8003fe8:	464b      	mov	r3, r9
 8003fea:	aa03      	add	r2, sp, #12
 8003fec:	4621      	mov	r1, r4
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f7ff fee6 	bl	8003dc0 <_printf_common>
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d14a      	bne.n	800408e <_printf_i+0x1f2>
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	b004      	add	sp, #16
 8003ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	f043 0320 	orr.w	r3, r3, #32
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	4833      	ldr	r0, [pc, #204]	@ (80040d8 <_printf_i+0x23c>)
 800400c:	2778      	movs	r7, #120	@ 0x78
 800400e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	6831      	ldr	r1, [r6, #0]
 8004016:	061f      	lsls	r7, r3, #24
 8004018:	f851 5b04 	ldr.w	r5, [r1], #4
 800401c:	d402      	bmi.n	8004024 <_printf_i+0x188>
 800401e:	065f      	lsls	r7, r3, #25
 8004020:	bf48      	it	mi
 8004022:	b2ad      	uxthmi	r5, r5
 8004024:	6031      	str	r1, [r6, #0]
 8004026:	07d9      	lsls	r1, r3, #31
 8004028:	bf44      	itt	mi
 800402a:	f043 0320 	orrmi.w	r3, r3, #32
 800402e:	6023      	strmi	r3, [r4, #0]
 8004030:	b11d      	cbz	r5, 800403a <_printf_i+0x19e>
 8004032:	2310      	movs	r3, #16
 8004034:	e7ac      	b.n	8003f90 <_printf_i+0xf4>
 8004036:	4827      	ldr	r0, [pc, #156]	@ (80040d4 <_printf_i+0x238>)
 8004038:	e7e9      	b.n	800400e <_printf_i+0x172>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	f023 0320 	bic.w	r3, r3, #32
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	e7f6      	b.n	8004032 <_printf_i+0x196>
 8004044:	4616      	mov	r6, r2
 8004046:	e7bd      	b.n	8003fc4 <_printf_i+0x128>
 8004048:	6833      	ldr	r3, [r6, #0]
 800404a:	6825      	ldr	r5, [r4, #0]
 800404c:	6961      	ldr	r1, [r4, #20]
 800404e:	1d18      	adds	r0, r3, #4
 8004050:	6030      	str	r0, [r6, #0]
 8004052:	062e      	lsls	r6, r5, #24
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	d501      	bpl.n	800405c <_printf_i+0x1c0>
 8004058:	6019      	str	r1, [r3, #0]
 800405a:	e002      	b.n	8004062 <_printf_i+0x1c6>
 800405c:	0668      	lsls	r0, r5, #25
 800405e:	d5fb      	bpl.n	8004058 <_printf_i+0x1bc>
 8004060:	8019      	strh	r1, [r3, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	4616      	mov	r6, r2
 8004068:	e7bc      	b.n	8003fe4 <_printf_i+0x148>
 800406a:	6833      	ldr	r3, [r6, #0]
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	6032      	str	r2, [r6, #0]
 8004070:	681e      	ldr	r6, [r3, #0]
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	2100      	movs	r1, #0
 8004076:	4630      	mov	r0, r6
 8004078:	f7fc f8aa 	bl	80001d0 <memchr>
 800407c:	b108      	cbz	r0, 8004082 <_printf_i+0x1e6>
 800407e:	1b80      	subs	r0, r0, r6
 8004080:	6060      	str	r0, [r4, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	2300      	movs	r3, #0
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800408c:	e7aa      	b.n	8003fe4 <_printf_i+0x148>
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	4632      	mov	r2, r6
 8004092:	4649      	mov	r1, r9
 8004094:	4640      	mov	r0, r8
 8004096:	47d0      	blx	sl
 8004098:	3001      	adds	r0, #1
 800409a:	d0ad      	beq.n	8003ff8 <_printf_i+0x15c>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	079b      	lsls	r3, r3, #30
 80040a0:	d413      	bmi.n	80040ca <_printf_i+0x22e>
 80040a2:	68e0      	ldr	r0, [r4, #12]
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	4298      	cmp	r0, r3
 80040a8:	bfb8      	it	lt
 80040aa:	4618      	movlt	r0, r3
 80040ac:	e7a6      	b.n	8003ffc <_printf_i+0x160>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4632      	mov	r2, r6
 80040b2:	4649      	mov	r1, r9
 80040b4:	4640      	mov	r0, r8
 80040b6:	47d0      	blx	sl
 80040b8:	3001      	adds	r0, #1
 80040ba:	d09d      	beq.n	8003ff8 <_printf_i+0x15c>
 80040bc:	3501      	adds	r5, #1
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	9903      	ldr	r1, [sp, #12]
 80040c2:	1a5b      	subs	r3, r3, r1
 80040c4:	42ab      	cmp	r3, r5
 80040c6:	dcf2      	bgt.n	80040ae <_printf_i+0x212>
 80040c8:	e7eb      	b.n	80040a2 <_printf_i+0x206>
 80040ca:	2500      	movs	r5, #0
 80040cc:	f104 0619 	add.w	r6, r4, #25
 80040d0:	e7f5      	b.n	80040be <_printf_i+0x222>
 80040d2:	bf00      	nop
 80040d4:	08006521 	.word	0x08006521
 80040d8:	08006532 	.word	0x08006532

080040dc <std>:
 80040dc:	2300      	movs	r3, #0
 80040de:	b510      	push	{r4, lr}
 80040e0:	4604      	mov	r4, r0
 80040e2:	e9c0 3300 	strd	r3, r3, [r0]
 80040e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ea:	6083      	str	r3, [r0, #8]
 80040ec:	8181      	strh	r1, [r0, #12]
 80040ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80040f0:	81c2      	strh	r2, [r0, #14]
 80040f2:	6183      	str	r3, [r0, #24]
 80040f4:	4619      	mov	r1, r3
 80040f6:	2208      	movs	r2, #8
 80040f8:	305c      	adds	r0, #92	@ 0x5c
 80040fa:	f000 f914 	bl	8004326 <memset>
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <std+0x58>)
 8004100:	6263      	str	r3, [r4, #36]	@ 0x24
 8004102:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <std+0x5c>)
 8004104:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <std+0x60>)
 8004108:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <std+0x64>)
 800410c:	6323      	str	r3, [r4, #48]	@ 0x30
 800410e:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <std+0x68>)
 8004110:	6224      	str	r4, [r4, #32]
 8004112:	429c      	cmp	r4, r3
 8004114:	d006      	beq.n	8004124 <std+0x48>
 8004116:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800411a:	4294      	cmp	r4, r2
 800411c:	d002      	beq.n	8004124 <std+0x48>
 800411e:	33d0      	adds	r3, #208	@ 0xd0
 8004120:	429c      	cmp	r4, r3
 8004122:	d105      	bne.n	8004130 <std+0x54>
 8004124:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800412c:	f000 b978 	b.w	8004420 <__retarget_lock_init_recursive>
 8004130:	bd10      	pop	{r4, pc}
 8004132:	bf00      	nop
 8004134:	080042a1 	.word	0x080042a1
 8004138:	080042c3 	.word	0x080042c3
 800413c:	080042fb 	.word	0x080042fb
 8004140:	0800431f 	.word	0x0800431f
 8004144:	200002c0 	.word	0x200002c0

08004148 <stdio_exit_handler>:
 8004148:	4a02      	ldr	r2, [pc, #8]	@ (8004154 <stdio_exit_handler+0xc>)
 800414a:	4903      	ldr	r1, [pc, #12]	@ (8004158 <stdio_exit_handler+0x10>)
 800414c:	4803      	ldr	r0, [pc, #12]	@ (800415c <stdio_exit_handler+0x14>)
 800414e:	f000 b869 	b.w	8004224 <_fwalk_sglue>
 8004152:	bf00      	nop
 8004154:	2000000c 	.word	0x2000000c
 8004158:	08005d7d 	.word	0x08005d7d
 800415c:	2000001c 	.word	0x2000001c

08004160 <cleanup_stdio>:
 8004160:	6841      	ldr	r1, [r0, #4]
 8004162:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <cleanup_stdio+0x34>)
 8004164:	4299      	cmp	r1, r3
 8004166:	b510      	push	{r4, lr}
 8004168:	4604      	mov	r4, r0
 800416a:	d001      	beq.n	8004170 <cleanup_stdio+0x10>
 800416c:	f001 fe06 	bl	8005d7c <_fflush_r>
 8004170:	68a1      	ldr	r1, [r4, #8]
 8004172:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <cleanup_stdio+0x38>)
 8004174:	4299      	cmp	r1, r3
 8004176:	d002      	beq.n	800417e <cleanup_stdio+0x1e>
 8004178:	4620      	mov	r0, r4
 800417a:	f001 fdff 	bl	8005d7c <_fflush_r>
 800417e:	68e1      	ldr	r1, [r4, #12]
 8004180:	4b06      	ldr	r3, [pc, #24]	@ (800419c <cleanup_stdio+0x3c>)
 8004182:	4299      	cmp	r1, r3
 8004184:	d004      	beq.n	8004190 <cleanup_stdio+0x30>
 8004186:	4620      	mov	r0, r4
 8004188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800418c:	f001 bdf6 	b.w	8005d7c <_fflush_r>
 8004190:	bd10      	pop	{r4, pc}
 8004192:	bf00      	nop
 8004194:	200002c0 	.word	0x200002c0
 8004198:	20000328 	.word	0x20000328
 800419c:	20000390 	.word	0x20000390

080041a0 <global_stdio_init.part.0>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <global_stdio_init.part.0+0x30>)
 80041a4:	4c0b      	ldr	r4, [pc, #44]	@ (80041d4 <global_stdio_init.part.0+0x34>)
 80041a6:	4a0c      	ldr	r2, [pc, #48]	@ (80041d8 <global_stdio_init.part.0+0x38>)
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	4620      	mov	r0, r4
 80041ac:	2200      	movs	r2, #0
 80041ae:	2104      	movs	r1, #4
 80041b0:	f7ff ff94 	bl	80040dc <std>
 80041b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041b8:	2201      	movs	r2, #1
 80041ba:	2109      	movs	r1, #9
 80041bc:	f7ff ff8e 	bl	80040dc <std>
 80041c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041c4:	2202      	movs	r2, #2
 80041c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ca:	2112      	movs	r1, #18
 80041cc:	f7ff bf86 	b.w	80040dc <std>
 80041d0:	200003f8 	.word	0x200003f8
 80041d4:	200002c0 	.word	0x200002c0
 80041d8:	08004149 	.word	0x08004149

080041dc <__sfp_lock_acquire>:
 80041dc:	4801      	ldr	r0, [pc, #4]	@ (80041e4 <__sfp_lock_acquire+0x8>)
 80041de:	f000 b920 	b.w	8004422 <__retarget_lock_acquire_recursive>
 80041e2:	bf00      	nop
 80041e4:	20000401 	.word	0x20000401

080041e8 <__sfp_lock_release>:
 80041e8:	4801      	ldr	r0, [pc, #4]	@ (80041f0 <__sfp_lock_release+0x8>)
 80041ea:	f000 b91b 	b.w	8004424 <__retarget_lock_release_recursive>
 80041ee:	bf00      	nop
 80041f0:	20000401 	.word	0x20000401

080041f4 <__sinit>:
 80041f4:	b510      	push	{r4, lr}
 80041f6:	4604      	mov	r4, r0
 80041f8:	f7ff fff0 	bl	80041dc <__sfp_lock_acquire>
 80041fc:	6a23      	ldr	r3, [r4, #32]
 80041fe:	b11b      	cbz	r3, 8004208 <__sinit+0x14>
 8004200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004204:	f7ff bff0 	b.w	80041e8 <__sfp_lock_release>
 8004208:	4b04      	ldr	r3, [pc, #16]	@ (800421c <__sinit+0x28>)
 800420a:	6223      	str	r3, [r4, #32]
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <__sinit+0x2c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f5      	bne.n	8004200 <__sinit+0xc>
 8004214:	f7ff ffc4 	bl	80041a0 <global_stdio_init.part.0>
 8004218:	e7f2      	b.n	8004200 <__sinit+0xc>
 800421a:	bf00      	nop
 800421c:	08004161 	.word	0x08004161
 8004220:	200003f8 	.word	0x200003f8

08004224 <_fwalk_sglue>:
 8004224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004228:	4607      	mov	r7, r0
 800422a:	4688      	mov	r8, r1
 800422c:	4614      	mov	r4, r2
 800422e:	2600      	movs	r6, #0
 8004230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004234:	f1b9 0901 	subs.w	r9, r9, #1
 8004238:	d505      	bpl.n	8004246 <_fwalk_sglue+0x22>
 800423a:	6824      	ldr	r4, [r4, #0]
 800423c:	2c00      	cmp	r4, #0
 800423e:	d1f7      	bne.n	8004230 <_fwalk_sglue+0xc>
 8004240:	4630      	mov	r0, r6
 8004242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004246:	89ab      	ldrh	r3, [r5, #12]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d907      	bls.n	800425c <_fwalk_sglue+0x38>
 800424c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004250:	3301      	adds	r3, #1
 8004252:	d003      	beq.n	800425c <_fwalk_sglue+0x38>
 8004254:	4629      	mov	r1, r5
 8004256:	4638      	mov	r0, r7
 8004258:	47c0      	blx	r8
 800425a:	4306      	orrs	r6, r0
 800425c:	3568      	adds	r5, #104	@ 0x68
 800425e:	e7e9      	b.n	8004234 <_fwalk_sglue+0x10>

08004260 <siprintf>:
 8004260:	b40e      	push	{r1, r2, r3}
 8004262:	b500      	push	{lr}
 8004264:	b09c      	sub	sp, #112	@ 0x70
 8004266:	ab1d      	add	r3, sp, #116	@ 0x74
 8004268:	9002      	str	r0, [sp, #8]
 800426a:	9006      	str	r0, [sp, #24]
 800426c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004270:	4809      	ldr	r0, [pc, #36]	@ (8004298 <siprintf+0x38>)
 8004272:	9107      	str	r1, [sp, #28]
 8004274:	9104      	str	r1, [sp, #16]
 8004276:	4909      	ldr	r1, [pc, #36]	@ (800429c <siprintf+0x3c>)
 8004278:	f853 2b04 	ldr.w	r2, [r3], #4
 800427c:	9105      	str	r1, [sp, #20]
 800427e:	6800      	ldr	r0, [r0, #0]
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	a902      	add	r1, sp, #8
 8004284:	f001 fbfa 	bl	8005a7c <_svfiprintf_r>
 8004288:	9b02      	ldr	r3, [sp, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	b01c      	add	sp, #112	@ 0x70
 8004290:	f85d eb04 	ldr.w	lr, [sp], #4
 8004294:	b003      	add	sp, #12
 8004296:	4770      	bx	lr
 8004298:	20000018 	.word	0x20000018
 800429c:	ffff0208 	.word	0xffff0208

080042a0 <__sread>:
 80042a0:	b510      	push	{r4, lr}
 80042a2:	460c      	mov	r4, r1
 80042a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a8:	f000 f86c 	bl	8004384 <_read_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	bfab      	itete	ge
 80042b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042b2:	89a3      	ldrhlt	r3, [r4, #12]
 80042b4:	181b      	addge	r3, r3, r0
 80042b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042ba:	bfac      	ite	ge
 80042bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042be:	81a3      	strhlt	r3, [r4, #12]
 80042c0:	bd10      	pop	{r4, pc}

080042c2 <__swrite>:
 80042c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c6:	461f      	mov	r7, r3
 80042c8:	898b      	ldrh	r3, [r1, #12]
 80042ca:	05db      	lsls	r3, r3, #23
 80042cc:	4605      	mov	r5, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	4616      	mov	r6, r2
 80042d2:	d505      	bpl.n	80042e0 <__swrite+0x1e>
 80042d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d8:	2302      	movs	r3, #2
 80042da:	2200      	movs	r2, #0
 80042dc:	f000 f840 	bl	8004360 <_lseek_r>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	4632      	mov	r2, r6
 80042ee:	463b      	mov	r3, r7
 80042f0:	4628      	mov	r0, r5
 80042f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f6:	f000 b857 	b.w	80043a8 <_write_r>

080042fa <__sseek>:
 80042fa:	b510      	push	{r4, lr}
 80042fc:	460c      	mov	r4, r1
 80042fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004302:	f000 f82d 	bl	8004360 <_lseek_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	bf15      	itete	ne
 800430c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800430e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004316:	81a3      	strheq	r3, [r4, #12]
 8004318:	bf18      	it	ne
 800431a:	81a3      	strhne	r3, [r4, #12]
 800431c:	bd10      	pop	{r4, pc}

0800431e <__sclose>:
 800431e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004322:	f000 b80d 	b.w	8004340 <_close_r>

08004326 <memset>:
 8004326:	4402      	add	r2, r0
 8004328:	4603      	mov	r3, r0
 800432a:	4293      	cmp	r3, r2
 800432c:	d100      	bne.n	8004330 <memset+0xa>
 800432e:	4770      	bx	lr
 8004330:	f803 1b01 	strb.w	r1, [r3], #1
 8004334:	e7f9      	b.n	800432a <memset+0x4>
	...

08004338 <_localeconv_r>:
 8004338:	4800      	ldr	r0, [pc, #0]	@ (800433c <_localeconv_r+0x4>)
 800433a:	4770      	bx	lr
 800433c:	20000158 	.word	0x20000158

08004340 <_close_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4d06      	ldr	r5, [pc, #24]	@ (800435c <_close_r+0x1c>)
 8004344:	2300      	movs	r3, #0
 8004346:	4604      	mov	r4, r0
 8004348:	4608      	mov	r0, r1
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	f7fd fbce 	bl	8001aec <_close>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_close_r+0x1a>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_close_r+0x1a>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	200003fc 	.word	0x200003fc

08004360 <_lseek_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d07      	ldr	r5, [pc, #28]	@ (8004380 <_lseek_r+0x20>)
 8004364:	4604      	mov	r4, r0
 8004366:	4608      	mov	r0, r1
 8004368:	4611      	mov	r1, r2
 800436a:	2200      	movs	r2, #0
 800436c:	602a      	str	r2, [r5, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f7fd fbe3 	bl	8001b3a <_lseek>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_lseek_r+0x1e>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_lseek_r+0x1e>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	200003fc 	.word	0x200003fc

08004384 <_read_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4d07      	ldr	r5, [pc, #28]	@ (80043a4 <_read_r+0x20>)
 8004388:	4604      	mov	r4, r0
 800438a:	4608      	mov	r0, r1
 800438c:	4611      	mov	r1, r2
 800438e:	2200      	movs	r2, #0
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fd fb71 	bl	8001a7a <_read>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_read_r+0x1e>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_read_r+0x1e>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	200003fc 	.word	0x200003fc

080043a8 <_write_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4d07      	ldr	r5, [pc, #28]	@ (80043c8 <_write_r+0x20>)
 80043ac:	4604      	mov	r4, r0
 80043ae:	4608      	mov	r0, r1
 80043b0:	4611      	mov	r1, r2
 80043b2:	2200      	movs	r2, #0
 80043b4:	602a      	str	r2, [r5, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7fd fb7c 	bl	8001ab4 <_write>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d102      	bne.n	80043c6 <_write_r+0x1e>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	b103      	cbz	r3, 80043c6 <_write_r+0x1e>
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	200003fc 	.word	0x200003fc

080043cc <__errno>:
 80043cc:	4b01      	ldr	r3, [pc, #4]	@ (80043d4 <__errno+0x8>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000018 	.word	0x20000018

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	4d0d      	ldr	r5, [pc, #52]	@ (8004410 <__libc_init_array+0x38>)
 80043dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004414 <__libc_init_array+0x3c>)
 80043de:	1b64      	subs	r4, r4, r5
 80043e0:	10a4      	asrs	r4, r4, #2
 80043e2:	2600      	movs	r6, #0
 80043e4:	42a6      	cmp	r6, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004418 <__libc_init_array+0x40>)
 80043ea:	4c0c      	ldr	r4, [pc, #48]	@ (800441c <__libc_init_array+0x44>)
 80043ec:	f002 f864 	bl	80064b8 <_init>
 80043f0:	1b64      	subs	r4, r4, r5
 80043f2:	10a4      	asrs	r4, r4, #2
 80043f4:	2600      	movs	r6, #0
 80043f6:	42a6      	cmp	r6, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004400:	4798      	blx	r3
 8004402:	3601      	adds	r6, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	f855 3b04 	ldr.w	r3, [r5], #4
 800440a:	4798      	blx	r3
 800440c:	3601      	adds	r6, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	08006888 	.word	0x08006888
 8004414:	08006888 	.word	0x08006888
 8004418:	08006888 	.word	0x08006888
 800441c:	0800688c 	.word	0x0800688c

08004420 <__retarget_lock_init_recursive>:
 8004420:	4770      	bx	lr

08004422 <__retarget_lock_acquire_recursive>:
 8004422:	4770      	bx	lr

08004424 <__retarget_lock_release_recursive>:
 8004424:	4770      	bx	lr

08004426 <quorem>:
 8004426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	6903      	ldr	r3, [r0, #16]
 800442c:	690c      	ldr	r4, [r1, #16]
 800442e:	42a3      	cmp	r3, r4
 8004430:	4607      	mov	r7, r0
 8004432:	db7e      	blt.n	8004532 <quorem+0x10c>
 8004434:	3c01      	subs	r4, #1
 8004436:	f101 0814 	add.w	r8, r1, #20
 800443a:	00a3      	lsls	r3, r4, #2
 800443c:	f100 0514 	add.w	r5, r0, #20
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800444c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004450:	3301      	adds	r3, #1
 8004452:	429a      	cmp	r2, r3
 8004454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004458:	fbb2 f6f3 	udiv	r6, r2, r3
 800445c:	d32e      	bcc.n	80044bc <quorem+0x96>
 800445e:	f04f 0a00 	mov.w	sl, #0
 8004462:	46c4      	mov	ip, r8
 8004464:	46ae      	mov	lr, r5
 8004466:	46d3      	mov	fp, sl
 8004468:	f85c 3b04 	ldr.w	r3, [ip], #4
 800446c:	b298      	uxth	r0, r3
 800446e:	fb06 a000 	mla	r0, r6, r0, sl
 8004472:	0c02      	lsrs	r2, r0, #16
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	fb06 2303 	mla	r3, r6, r3, r2
 800447a:	f8de 2000 	ldr.w	r2, [lr]
 800447e:	b280      	uxth	r0, r0
 8004480:	b292      	uxth	r2, r2
 8004482:	1a12      	subs	r2, r2, r0
 8004484:	445a      	add	r2, fp
 8004486:	f8de 0000 	ldr.w	r0, [lr]
 800448a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800448e:	b29b      	uxth	r3, r3
 8004490:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004494:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004498:	b292      	uxth	r2, r2
 800449a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800449e:	45e1      	cmp	r9, ip
 80044a0:	f84e 2b04 	str.w	r2, [lr], #4
 80044a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80044a8:	d2de      	bcs.n	8004468 <quorem+0x42>
 80044aa:	9b00      	ldr	r3, [sp, #0]
 80044ac:	58eb      	ldr	r3, [r5, r3]
 80044ae:	b92b      	cbnz	r3, 80044bc <quorem+0x96>
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	429d      	cmp	r5, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	d32f      	bcc.n	800451a <quorem+0xf4>
 80044ba:	613c      	str	r4, [r7, #16]
 80044bc:	4638      	mov	r0, r7
 80044be:	f001 f979 	bl	80057b4 <__mcmp>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	db25      	blt.n	8004512 <quorem+0xec>
 80044c6:	4629      	mov	r1, r5
 80044c8:	2000      	movs	r0, #0
 80044ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80044ce:	f8d1 c000 	ldr.w	ip, [r1]
 80044d2:	fa1f fe82 	uxth.w	lr, r2
 80044d6:	fa1f f38c 	uxth.w	r3, ip
 80044da:	eba3 030e 	sub.w	r3, r3, lr
 80044de:	4403      	add	r3, r0
 80044e0:	0c12      	lsrs	r2, r2, #16
 80044e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80044e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044f0:	45c1      	cmp	r9, r8
 80044f2:	f841 3b04 	str.w	r3, [r1], #4
 80044f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80044fa:	d2e6      	bcs.n	80044ca <quorem+0xa4>
 80044fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004500:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004504:	b922      	cbnz	r2, 8004510 <quorem+0xea>
 8004506:	3b04      	subs	r3, #4
 8004508:	429d      	cmp	r5, r3
 800450a:	461a      	mov	r2, r3
 800450c:	d30b      	bcc.n	8004526 <quorem+0x100>
 800450e:	613c      	str	r4, [r7, #16]
 8004510:	3601      	adds	r6, #1
 8004512:	4630      	mov	r0, r6
 8004514:	b003      	add	sp, #12
 8004516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	3b04      	subs	r3, #4
 800451e:	2a00      	cmp	r2, #0
 8004520:	d1cb      	bne.n	80044ba <quorem+0x94>
 8004522:	3c01      	subs	r4, #1
 8004524:	e7c6      	b.n	80044b4 <quorem+0x8e>
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	3b04      	subs	r3, #4
 800452a:	2a00      	cmp	r2, #0
 800452c:	d1ef      	bne.n	800450e <quorem+0xe8>
 800452e:	3c01      	subs	r4, #1
 8004530:	e7ea      	b.n	8004508 <quorem+0xe2>
 8004532:	2000      	movs	r0, #0
 8004534:	e7ee      	b.n	8004514 <quorem+0xee>
	...

08004538 <_dtoa_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	69c7      	ldr	r7, [r0, #28]
 800453e:	b099      	sub	sp, #100	@ 0x64
 8004540:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004544:	ec55 4b10 	vmov	r4, r5, d0
 8004548:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800454a:	9109      	str	r1, [sp, #36]	@ 0x24
 800454c:	4683      	mov	fp, r0
 800454e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004550:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004552:	b97f      	cbnz	r7, 8004574 <_dtoa_r+0x3c>
 8004554:	2010      	movs	r0, #16
 8004556:	f000 fdfd 	bl	8005154 <malloc>
 800455a:	4602      	mov	r2, r0
 800455c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004560:	b920      	cbnz	r0, 800456c <_dtoa_r+0x34>
 8004562:	4ba7      	ldr	r3, [pc, #668]	@ (8004800 <_dtoa_r+0x2c8>)
 8004564:	21ef      	movs	r1, #239	@ 0xef
 8004566:	48a7      	ldr	r0, [pc, #668]	@ (8004804 <_dtoa_r+0x2cc>)
 8004568:	f001 fc68 	bl	8005e3c <__assert_func>
 800456c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004570:	6007      	str	r7, [r0, #0]
 8004572:	60c7      	str	r7, [r0, #12]
 8004574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	b159      	cbz	r1, 8004594 <_dtoa_r+0x5c>
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	604a      	str	r2, [r1, #4]
 8004580:	2301      	movs	r3, #1
 8004582:	4093      	lsls	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
 8004586:	4658      	mov	r0, fp
 8004588:	f000 feda 	bl	8005340 <_Bfree>
 800458c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	1e2b      	subs	r3, r5, #0
 8004596:	bfb9      	ittee	lt
 8004598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800459c:	9303      	strlt	r3, [sp, #12]
 800459e:	2300      	movge	r3, #0
 80045a0:	6033      	strge	r3, [r6, #0]
 80045a2:	9f03      	ldr	r7, [sp, #12]
 80045a4:	4b98      	ldr	r3, [pc, #608]	@ (8004808 <_dtoa_r+0x2d0>)
 80045a6:	bfbc      	itt	lt
 80045a8:	2201      	movlt	r2, #1
 80045aa:	6032      	strlt	r2, [r6, #0]
 80045ac:	43bb      	bics	r3, r7
 80045ae:	d112      	bne.n	80045d6 <_dtoa_r+0x9e>
 80045b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80045b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80045bc:	4323      	orrs	r3, r4
 80045be:	f000 854d 	beq.w	800505c <_dtoa_r+0xb24>
 80045c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800481c <_dtoa_r+0x2e4>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 854f 	beq.w	800506c <_dtoa_r+0xb34>
 80045ce:	f10a 0303 	add.w	r3, sl, #3
 80045d2:	f000 bd49 	b.w	8005068 <_dtoa_r+0xb30>
 80045d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045da:	2200      	movs	r2, #0
 80045dc:	ec51 0b17 	vmov	r0, r1, d7
 80045e0:	2300      	movs	r3, #0
 80045e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80045e6:	f7fc fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ea:	4680      	mov	r8, r0
 80045ec:	b158      	cbz	r0, 8004606 <_dtoa_r+0xce>
 80045ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80045f0:	2301      	movs	r3, #1
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045f6:	b113      	cbz	r3, 80045fe <_dtoa_r+0xc6>
 80045f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80045fa:	4b84      	ldr	r3, [pc, #528]	@ (800480c <_dtoa_r+0x2d4>)
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004820 <_dtoa_r+0x2e8>
 8004602:	f000 bd33 	b.w	800506c <_dtoa_r+0xb34>
 8004606:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800460a:	aa16      	add	r2, sp, #88	@ 0x58
 800460c:	a917      	add	r1, sp, #92	@ 0x5c
 800460e:	4658      	mov	r0, fp
 8004610:	f001 f980 	bl	8005914 <__d2b>
 8004614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004618:	4681      	mov	r9, r0
 800461a:	2e00      	cmp	r6, #0
 800461c:	d077      	beq.n	800470e <_dtoa_r+0x1d6>
 800461e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004620:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800462c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004638:	4619      	mov	r1, r3
 800463a:	2200      	movs	r2, #0
 800463c:	4b74      	ldr	r3, [pc, #464]	@ (8004810 <_dtoa_r+0x2d8>)
 800463e:	f7fb fe23 	bl	8000288 <__aeabi_dsub>
 8004642:	a369      	add	r3, pc, #420	@ (adr r3, 80047e8 <_dtoa_r+0x2b0>)
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f7fb ffd6 	bl	80005f8 <__aeabi_dmul>
 800464c:	a368      	add	r3, pc, #416	@ (adr r3, 80047f0 <_dtoa_r+0x2b8>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fb fe1b 	bl	800028c <__adddf3>
 8004656:	4604      	mov	r4, r0
 8004658:	4630      	mov	r0, r6
 800465a:	460d      	mov	r5, r1
 800465c:	f7fb ff62 	bl	8000524 <__aeabi_i2d>
 8004660:	a365      	add	r3, pc, #404	@ (adr r3, 80047f8 <_dtoa_r+0x2c0>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fb ffc7 	bl	80005f8 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fb fe0b 	bl	800028c <__adddf3>
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	f7fc fa6d 	bl	8000b58 <__aeabi_d2iz>
 800467e:	2200      	movs	r2, #0
 8004680:	4607      	mov	r7, r0
 8004682:	2300      	movs	r3, #0
 8004684:	4620      	mov	r0, r4
 8004686:	4629      	mov	r1, r5
 8004688:	f7fc fa28 	bl	8000adc <__aeabi_dcmplt>
 800468c:	b140      	cbz	r0, 80046a0 <_dtoa_r+0x168>
 800468e:	4638      	mov	r0, r7
 8004690:	f7fb ff48 	bl	8000524 <__aeabi_i2d>
 8004694:	4622      	mov	r2, r4
 8004696:	462b      	mov	r3, r5
 8004698:	f7fc fa16 	bl	8000ac8 <__aeabi_dcmpeq>
 800469c:	b900      	cbnz	r0, 80046a0 <_dtoa_r+0x168>
 800469e:	3f01      	subs	r7, #1
 80046a0:	2f16      	cmp	r7, #22
 80046a2:	d851      	bhi.n	8004748 <_dtoa_r+0x210>
 80046a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004814 <_dtoa_r+0x2dc>)
 80046a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046b2:	f7fc fa13 	bl	8000adc <__aeabi_dcmplt>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d048      	beq.n	800474c <_dtoa_r+0x214>
 80046ba:	3f01      	subs	r7, #1
 80046bc:	2300      	movs	r3, #0
 80046be:	9312      	str	r3, [sp, #72]	@ 0x48
 80046c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80046c2:	1b9b      	subs	r3, r3, r6
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	bf44      	itt	mi
 80046c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80046cc:	2300      	movmi	r3, #0
 80046ce:	9208      	str	r2, [sp, #32]
 80046d0:	bf54      	ite	pl
 80046d2:	f04f 0800 	movpl.w	r8, #0
 80046d6:	9308      	strmi	r3, [sp, #32]
 80046d8:	2f00      	cmp	r7, #0
 80046da:	db39      	blt.n	8004750 <_dtoa_r+0x218>
 80046dc:	9b08      	ldr	r3, [sp, #32]
 80046de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80046e0:	443b      	add	r3, r7
 80046e2:	9308      	str	r3, [sp, #32]
 80046e4:	2300      	movs	r3, #0
 80046e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	d864      	bhi.n	80047b8 <_dtoa_r+0x280>
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	bfc4      	itt	gt
 80046f2:	3b04      	subgt	r3, #4
 80046f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80046f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f8:	f1a3 0302 	sub.w	r3, r3, #2
 80046fc:	bfcc      	ite	gt
 80046fe:	2400      	movgt	r4, #0
 8004700:	2401      	movle	r4, #1
 8004702:	2b03      	cmp	r3, #3
 8004704:	d863      	bhi.n	80047ce <_dtoa_r+0x296>
 8004706:	e8df f003 	tbb	[pc, r3]
 800470a:	372a      	.short	0x372a
 800470c:	5535      	.short	0x5535
 800470e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004712:	441e      	add	r6, r3
 8004714:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004718:	2b20      	cmp	r3, #32
 800471a:	bfc1      	itttt	gt
 800471c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004720:	409f      	lslgt	r7, r3
 8004722:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004726:	fa24 f303 	lsrgt.w	r3, r4, r3
 800472a:	bfd6      	itet	le
 800472c:	f1c3 0320 	rsble	r3, r3, #32
 8004730:	ea47 0003 	orrgt.w	r0, r7, r3
 8004734:	fa04 f003 	lslle.w	r0, r4, r3
 8004738:	f7fb fee4 	bl	8000504 <__aeabi_ui2d>
 800473c:	2201      	movs	r2, #1
 800473e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004742:	3e01      	subs	r6, #1
 8004744:	9214      	str	r2, [sp, #80]	@ 0x50
 8004746:	e777      	b.n	8004638 <_dtoa_r+0x100>
 8004748:	2301      	movs	r3, #1
 800474a:	e7b8      	b.n	80046be <_dtoa_r+0x186>
 800474c:	9012      	str	r0, [sp, #72]	@ 0x48
 800474e:	e7b7      	b.n	80046c0 <_dtoa_r+0x188>
 8004750:	427b      	negs	r3, r7
 8004752:	930a      	str	r3, [sp, #40]	@ 0x28
 8004754:	2300      	movs	r3, #0
 8004756:	eba8 0807 	sub.w	r8, r8, r7
 800475a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800475c:	e7c4      	b.n	80046e8 <_dtoa_r+0x1b0>
 800475e:	2300      	movs	r3, #0
 8004760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	dc35      	bgt.n	80047d4 <_dtoa_r+0x29c>
 8004768:	2301      	movs	r3, #1
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	461a      	mov	r2, r3
 8004770:	920e      	str	r2, [sp, #56]	@ 0x38
 8004772:	e00b      	b.n	800478c <_dtoa_r+0x254>
 8004774:	2301      	movs	r3, #1
 8004776:	e7f3      	b.n	8004760 <_dtoa_r+0x228>
 8004778:	2300      	movs	r3, #0
 800477a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800477c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	bfb8      	it	lt
 800478a:	2301      	movlt	r3, #1
 800478c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004790:	2100      	movs	r1, #0
 8004792:	2204      	movs	r2, #4
 8004794:	f102 0514 	add.w	r5, r2, #20
 8004798:	429d      	cmp	r5, r3
 800479a:	d91f      	bls.n	80047dc <_dtoa_r+0x2a4>
 800479c:	6041      	str	r1, [r0, #4]
 800479e:	4658      	mov	r0, fp
 80047a0:	f000 fd8e 	bl	80052c0 <_Balloc>
 80047a4:	4682      	mov	sl, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d13c      	bne.n	8004824 <_dtoa_r+0x2ec>
 80047aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <_dtoa_r+0x2e0>)
 80047ac:	4602      	mov	r2, r0
 80047ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80047b2:	e6d8      	b.n	8004566 <_dtoa_r+0x2e>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e7e0      	b.n	800477a <_dtoa_r+0x242>
 80047b8:	2401      	movs	r4, #1
 80047ba:	2300      	movs	r3, #0
 80047bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	9307      	str	r3, [sp, #28]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2312      	movs	r3, #18
 80047cc:	e7d0      	b.n	8004770 <_dtoa_r+0x238>
 80047ce:	2301      	movs	r3, #1
 80047d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047d2:	e7f5      	b.n	80047c0 <_dtoa_r+0x288>
 80047d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	9307      	str	r3, [sp, #28]
 80047da:	e7d7      	b.n	800478c <_dtoa_r+0x254>
 80047dc:	3101      	adds	r1, #1
 80047de:	0052      	lsls	r2, r2, #1
 80047e0:	e7d8      	b.n	8004794 <_dtoa_r+0x25c>
 80047e2:	bf00      	nop
 80047e4:	f3af 8000 	nop.w
 80047e8:	636f4361 	.word	0x636f4361
 80047ec:	3fd287a7 	.word	0x3fd287a7
 80047f0:	8b60c8b3 	.word	0x8b60c8b3
 80047f4:	3fc68a28 	.word	0x3fc68a28
 80047f8:	509f79fb 	.word	0x509f79fb
 80047fc:	3fd34413 	.word	0x3fd34413
 8004800:	08006550 	.word	0x08006550
 8004804:	08006567 	.word	0x08006567
 8004808:	7ff00000 	.word	0x7ff00000
 800480c:	08006520 	.word	0x08006520
 8004810:	3ff80000 	.word	0x3ff80000
 8004814:	08006660 	.word	0x08006660
 8004818:	080065bf 	.word	0x080065bf
 800481c:	0800654c 	.word	0x0800654c
 8004820:	0800651f 	.word	0x0800651f
 8004824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004828:	6018      	str	r0, [r3, #0]
 800482a:	9b07      	ldr	r3, [sp, #28]
 800482c:	2b0e      	cmp	r3, #14
 800482e:	f200 80a4 	bhi.w	800497a <_dtoa_r+0x442>
 8004832:	2c00      	cmp	r4, #0
 8004834:	f000 80a1 	beq.w	800497a <_dtoa_r+0x442>
 8004838:	2f00      	cmp	r7, #0
 800483a:	dd33      	ble.n	80048a4 <_dtoa_r+0x36c>
 800483c:	4bad      	ldr	r3, [pc, #692]	@ (8004af4 <_dtoa_r+0x5bc>)
 800483e:	f007 020f 	and.w	r2, r7, #15
 8004842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004846:	ed93 7b00 	vldr	d7, [r3]
 800484a:	05f8      	lsls	r0, r7, #23
 800484c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004850:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004854:	d516      	bpl.n	8004884 <_dtoa_r+0x34c>
 8004856:	4ba8      	ldr	r3, [pc, #672]	@ (8004af8 <_dtoa_r+0x5c0>)
 8004858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800485c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004860:	f7fb fff4 	bl	800084c <__aeabi_ddiv>
 8004864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004868:	f004 040f 	and.w	r4, r4, #15
 800486c:	2603      	movs	r6, #3
 800486e:	4da2      	ldr	r5, [pc, #648]	@ (8004af8 <_dtoa_r+0x5c0>)
 8004870:	b954      	cbnz	r4, 8004888 <_dtoa_r+0x350>
 8004872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800487a:	f7fb ffe7 	bl	800084c <__aeabi_ddiv>
 800487e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004882:	e028      	b.n	80048d6 <_dtoa_r+0x39e>
 8004884:	2602      	movs	r6, #2
 8004886:	e7f2      	b.n	800486e <_dtoa_r+0x336>
 8004888:	07e1      	lsls	r1, r4, #31
 800488a:	d508      	bpl.n	800489e <_dtoa_r+0x366>
 800488c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004890:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004894:	f7fb feb0 	bl	80005f8 <__aeabi_dmul>
 8004898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800489c:	3601      	adds	r6, #1
 800489e:	1064      	asrs	r4, r4, #1
 80048a0:	3508      	adds	r5, #8
 80048a2:	e7e5      	b.n	8004870 <_dtoa_r+0x338>
 80048a4:	f000 80d2 	beq.w	8004a4c <_dtoa_r+0x514>
 80048a8:	427c      	negs	r4, r7
 80048aa:	4b92      	ldr	r3, [pc, #584]	@ (8004af4 <_dtoa_r+0x5bc>)
 80048ac:	4d92      	ldr	r5, [pc, #584]	@ (8004af8 <_dtoa_r+0x5c0>)
 80048ae:	f004 020f 	and.w	r2, r4, #15
 80048b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048be:	f7fb fe9b 	bl	80005f8 <__aeabi_dmul>
 80048c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048c6:	1124      	asrs	r4, r4, #4
 80048c8:	2300      	movs	r3, #0
 80048ca:	2602      	movs	r6, #2
 80048cc:	2c00      	cmp	r4, #0
 80048ce:	f040 80b2 	bne.w	8004a36 <_dtoa_r+0x4fe>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1d3      	bne.n	800487e <_dtoa_r+0x346>
 80048d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80048d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80b7 	beq.w	8004a50 <_dtoa_r+0x518>
 80048e2:	4b86      	ldr	r3, [pc, #536]	@ (8004afc <_dtoa_r+0x5c4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fc f8f7 	bl	8000adc <__aeabi_dcmplt>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f000 80ae 	beq.w	8004a50 <_dtoa_r+0x518>
 80048f4:	9b07      	ldr	r3, [sp, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80aa 	beq.w	8004a50 <_dtoa_r+0x518>
 80048fc:	9b00      	ldr	r3, [sp, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dd37      	ble.n	8004972 <_dtoa_r+0x43a>
 8004902:	1e7b      	subs	r3, r7, #1
 8004904:	9304      	str	r3, [sp, #16]
 8004906:	4620      	mov	r0, r4
 8004908:	4b7d      	ldr	r3, [pc, #500]	@ (8004b00 <_dtoa_r+0x5c8>)
 800490a:	2200      	movs	r2, #0
 800490c:	4629      	mov	r1, r5
 800490e:	f7fb fe73 	bl	80005f8 <__aeabi_dmul>
 8004912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004916:	9c00      	ldr	r4, [sp, #0]
 8004918:	3601      	adds	r6, #1
 800491a:	4630      	mov	r0, r6
 800491c:	f7fb fe02 	bl	8000524 <__aeabi_i2d>
 8004920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004924:	f7fb fe68 	bl	80005f8 <__aeabi_dmul>
 8004928:	4b76      	ldr	r3, [pc, #472]	@ (8004b04 <_dtoa_r+0x5cc>)
 800492a:	2200      	movs	r2, #0
 800492c:	f7fb fcae 	bl	800028c <__adddf3>
 8004930:	4605      	mov	r5, r0
 8004932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004936:	2c00      	cmp	r4, #0
 8004938:	f040 808d 	bne.w	8004a56 <_dtoa_r+0x51e>
 800493c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004940:	4b71      	ldr	r3, [pc, #452]	@ (8004b08 <_dtoa_r+0x5d0>)
 8004942:	2200      	movs	r2, #0
 8004944:	f7fb fca0 	bl	8000288 <__aeabi_dsub>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004950:	462a      	mov	r2, r5
 8004952:	4633      	mov	r3, r6
 8004954:	f7fc f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8004958:	2800      	cmp	r0, #0
 800495a:	f040 828b 	bne.w	8004e74 <_dtoa_r+0x93c>
 800495e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004962:	462a      	mov	r2, r5
 8004964:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004968:	f7fc f8b8 	bl	8000adc <__aeabi_dcmplt>
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 8128 	bne.w	8004bc2 <_dtoa_r+0x68a>
 8004972:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800497a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800497c:	2b00      	cmp	r3, #0
 800497e:	f2c0 815a 	blt.w	8004c36 <_dtoa_r+0x6fe>
 8004982:	2f0e      	cmp	r7, #14
 8004984:	f300 8157 	bgt.w	8004c36 <_dtoa_r+0x6fe>
 8004988:	4b5a      	ldr	r3, [pc, #360]	@ (8004af4 <_dtoa_r+0x5bc>)
 800498a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800498e:	ed93 7b00 	vldr	d7, [r3]
 8004992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	ed8d 7b00 	vstr	d7, [sp]
 800499a:	da03      	bge.n	80049a4 <_dtoa_r+0x46c>
 800499c:	9b07      	ldr	r3, [sp, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f340 8101 	ble.w	8004ba6 <_dtoa_r+0x66e>
 80049a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049a8:	4656      	mov	r6, sl
 80049aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	f7fb ff4b 	bl	800084c <__aeabi_ddiv>
 80049b6:	f7fc f8cf 	bl	8000b58 <__aeabi_d2iz>
 80049ba:	4680      	mov	r8, r0
 80049bc:	f7fb fdb2 	bl	8000524 <__aeabi_i2d>
 80049c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c4:	f7fb fe18 	bl	80005f8 <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4620      	mov	r0, r4
 80049ce:	4629      	mov	r1, r5
 80049d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80049d4:	f7fb fc58 	bl	8000288 <__aeabi_dsub>
 80049d8:	f806 4b01 	strb.w	r4, [r6], #1
 80049dc:	9d07      	ldr	r5, [sp, #28]
 80049de:	eba6 040a 	sub.w	r4, r6, sl
 80049e2:	42a5      	cmp	r5, r4
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	f040 8117 	bne.w	8004c1a <_dtoa_r+0x6e2>
 80049ec:	f7fb fc4e 	bl	800028c <__adddf3>
 80049f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049f4:	4604      	mov	r4, r0
 80049f6:	460d      	mov	r5, r1
 80049f8:	f7fc f88e 	bl	8000b18 <__aeabi_dcmpgt>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f040 80f9 	bne.w	8004bf4 <_dtoa_r+0x6bc>
 8004a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a06:	4620      	mov	r0, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f7fc f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a0e:	b118      	cbz	r0, 8004a18 <_dtoa_r+0x4e0>
 8004a10:	f018 0f01 	tst.w	r8, #1
 8004a14:	f040 80ee 	bne.w	8004bf4 <_dtoa_r+0x6bc>
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4658      	mov	r0, fp
 8004a1c:	f000 fc90 	bl	8005340 <_Bfree>
 8004a20:	2300      	movs	r3, #0
 8004a22:	7033      	strb	r3, [r6, #0]
 8004a24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004a26:	3701      	adds	r7, #1
 8004a28:	601f      	str	r7, [r3, #0]
 8004a2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 831d 	beq.w	800506c <_dtoa_r+0xb34>
 8004a32:	601e      	str	r6, [r3, #0]
 8004a34:	e31a      	b.n	800506c <_dtoa_r+0xb34>
 8004a36:	07e2      	lsls	r2, r4, #31
 8004a38:	d505      	bpl.n	8004a46 <_dtoa_r+0x50e>
 8004a3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a3e:	f7fb fddb 	bl	80005f8 <__aeabi_dmul>
 8004a42:	3601      	adds	r6, #1
 8004a44:	2301      	movs	r3, #1
 8004a46:	1064      	asrs	r4, r4, #1
 8004a48:	3508      	adds	r5, #8
 8004a4a:	e73f      	b.n	80048cc <_dtoa_r+0x394>
 8004a4c:	2602      	movs	r6, #2
 8004a4e:	e742      	b.n	80048d6 <_dtoa_r+0x39e>
 8004a50:	9c07      	ldr	r4, [sp, #28]
 8004a52:	9704      	str	r7, [sp, #16]
 8004a54:	e761      	b.n	800491a <_dtoa_r+0x3e2>
 8004a56:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <_dtoa_r+0x5bc>)
 8004a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a62:	4454      	add	r4, sl
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d053      	beq.n	8004b10 <_dtoa_r+0x5d8>
 8004a68:	4928      	ldr	r1, [pc, #160]	@ (8004b0c <_dtoa_r+0x5d4>)
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fb feee 	bl	800084c <__aeabi_ddiv>
 8004a70:	4633      	mov	r3, r6
 8004a72:	462a      	mov	r2, r5
 8004a74:	f7fb fc08 	bl	8000288 <__aeabi_dsub>
 8004a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a7c:	4656      	mov	r6, sl
 8004a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a82:	f7fc f869 	bl	8000b58 <__aeabi_d2iz>
 8004a86:	4605      	mov	r5, r0
 8004a88:	f7fb fd4c 	bl	8000524 <__aeabi_i2d>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a94:	f7fb fbf8 	bl	8000288 <__aeabi_dsub>
 8004a98:	3530      	adds	r5, #48	@ 0x30
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004aa2:	f806 5b01 	strb.w	r5, [r6], #1
 8004aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004aaa:	f7fc f817 	bl	8000adc <__aeabi_dcmplt>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d171      	bne.n	8004b96 <_dtoa_r+0x65e>
 8004ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ab6:	4911      	ldr	r1, [pc, #68]	@ (8004afc <_dtoa_r+0x5c4>)
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7fb fbe5 	bl	8000288 <__aeabi_dsub>
 8004abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ac2:	f7fc f80b 	bl	8000adc <__aeabi_dcmplt>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	f040 8095 	bne.w	8004bf6 <_dtoa_r+0x6be>
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	f43f af50 	beq.w	8004972 <_dtoa_r+0x43a>
 8004ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <_dtoa_r+0x5c8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f7fb fd8d 	bl	80005f8 <__aeabi_dmul>
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <_dtoa_r+0x5c8>)
 8004ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aea:	f7fb fd85 	bl	80005f8 <__aeabi_dmul>
 8004aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af2:	e7c4      	b.n	8004a7e <_dtoa_r+0x546>
 8004af4:	08006660 	.word	0x08006660
 8004af8:	08006638 	.word	0x08006638
 8004afc:	3ff00000 	.word	0x3ff00000
 8004b00:	40240000 	.word	0x40240000
 8004b04:	401c0000 	.word	0x401c0000
 8004b08:	40140000 	.word	0x40140000
 8004b0c:	3fe00000 	.word	0x3fe00000
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7fb fd70 	bl	80005f8 <__aeabi_dmul>
 8004b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004b1e:	4656      	mov	r6, sl
 8004b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b24:	f7fc f818 	bl	8000b58 <__aeabi_d2iz>
 8004b28:	4605      	mov	r5, r0
 8004b2a:	f7fb fcfb 	bl	8000524 <__aeabi_i2d>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b36:	f7fb fba7 	bl	8000288 <__aeabi_dsub>
 8004b3a:	3530      	adds	r5, #48	@ 0x30
 8004b3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	d124      	bne.n	8004b9a <_dtoa_r+0x662>
 8004b50:	4bac      	ldr	r3, [pc, #688]	@ (8004e04 <_dtoa_r+0x8cc>)
 8004b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b56:	f7fb fb99 	bl	800028c <__adddf3>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b62:	f7fb ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d145      	bne.n	8004bf6 <_dtoa_r+0x6be>
 8004b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b6e:	49a5      	ldr	r1, [pc, #660]	@ (8004e04 <_dtoa_r+0x8cc>)
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7fb fb89 	bl	8000288 <__aeabi_dsub>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7e:	f7fb ffad 	bl	8000adc <__aeabi_dcmplt>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f43f aef5 	beq.w	8004972 <_dtoa_r+0x43a>
 8004b88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004b8a:	1e73      	subs	r3, r6, #1
 8004b8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004b8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b92:	2b30      	cmp	r3, #48	@ 0x30
 8004b94:	d0f8      	beq.n	8004b88 <_dtoa_r+0x650>
 8004b96:	9f04      	ldr	r7, [sp, #16]
 8004b98:	e73e      	b.n	8004a18 <_dtoa_r+0x4e0>
 8004b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8004e08 <_dtoa_r+0x8d0>)
 8004b9c:	f7fb fd2c 	bl	80005f8 <__aeabi_dmul>
 8004ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba4:	e7bc      	b.n	8004b20 <_dtoa_r+0x5e8>
 8004ba6:	d10c      	bne.n	8004bc2 <_dtoa_r+0x68a>
 8004ba8:	4b98      	ldr	r3, [pc, #608]	@ (8004e0c <_dtoa_r+0x8d4>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bb0:	f7fb fd22 	bl	80005f8 <__aeabi_dmul>
 8004bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bb8:	f7fb ffa4 	bl	8000b04 <__aeabi_dcmpge>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f000 8157 	beq.w	8004e70 <_dtoa_r+0x938>
 8004bc2:	2400      	movs	r4, #0
 8004bc4:	4625      	mov	r5, r4
 8004bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	4656      	mov	r6, sl
 8004bce:	2700      	movs	r7, #0
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4658      	mov	r0, fp
 8004bd4:	f000 fbb4 	bl	8005340 <_Bfree>
 8004bd8:	2d00      	cmp	r5, #0
 8004bda:	d0dc      	beq.n	8004b96 <_dtoa_r+0x65e>
 8004bdc:	b12f      	cbz	r7, 8004bea <_dtoa_r+0x6b2>
 8004bde:	42af      	cmp	r7, r5
 8004be0:	d003      	beq.n	8004bea <_dtoa_r+0x6b2>
 8004be2:	4639      	mov	r1, r7
 8004be4:	4658      	mov	r0, fp
 8004be6:	f000 fbab 	bl	8005340 <_Bfree>
 8004bea:	4629      	mov	r1, r5
 8004bec:	4658      	mov	r0, fp
 8004bee:	f000 fba7 	bl	8005340 <_Bfree>
 8004bf2:	e7d0      	b.n	8004b96 <_dtoa_r+0x65e>
 8004bf4:	9704      	str	r7, [sp, #16]
 8004bf6:	4633      	mov	r3, r6
 8004bf8:	461e      	mov	r6, r3
 8004bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bfe:	2a39      	cmp	r2, #57	@ 0x39
 8004c00:	d107      	bne.n	8004c12 <_dtoa_r+0x6da>
 8004c02:	459a      	cmp	sl, r3
 8004c04:	d1f8      	bne.n	8004bf8 <_dtoa_r+0x6c0>
 8004c06:	9a04      	ldr	r2, [sp, #16]
 8004c08:	3201      	adds	r2, #1
 8004c0a:	9204      	str	r2, [sp, #16]
 8004c0c:	2230      	movs	r2, #48	@ 0x30
 8004c0e:	f88a 2000 	strb.w	r2, [sl]
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	3201      	adds	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e7bd      	b.n	8004b96 <_dtoa_r+0x65e>
 8004c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e08 <_dtoa_r+0x8d0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f7fb fceb 	bl	80005f8 <__aeabi_dmul>
 8004c22:	2200      	movs	r2, #0
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	f7fb ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f43f aebb 	beq.w	80049aa <_dtoa_r+0x472>
 8004c34:	e6f0      	b.n	8004a18 <_dtoa_r+0x4e0>
 8004c36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	f000 80db 	beq.w	8004df4 <_dtoa_r+0x8bc>
 8004c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	f300 80bf 	bgt.w	8004dc4 <_dtoa_r+0x88c>
 8004c46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	f000 80b7 	beq.w	8004dbc <_dtoa_r+0x884>
 8004c4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c54:	4646      	mov	r6, r8
 8004c56:	9a08      	ldr	r2, [sp, #32]
 8004c58:	2101      	movs	r1, #1
 8004c5a:	441a      	add	r2, r3
 8004c5c:	4658      	mov	r0, fp
 8004c5e:	4498      	add	r8, r3
 8004c60:	9208      	str	r2, [sp, #32]
 8004c62:	f000 fc21 	bl	80054a8 <__i2b>
 8004c66:	4605      	mov	r5, r0
 8004c68:	b15e      	cbz	r6, 8004c82 <_dtoa_r+0x74a>
 8004c6a:	9b08      	ldr	r3, [sp, #32]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	dd08      	ble.n	8004c82 <_dtoa_r+0x74a>
 8004c70:	42b3      	cmp	r3, r6
 8004c72:	9a08      	ldr	r2, [sp, #32]
 8004c74:	bfa8      	it	ge
 8004c76:	4633      	movge	r3, r6
 8004c78:	eba8 0803 	sub.w	r8, r8, r3
 8004c7c:	1af6      	subs	r6, r6, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	9308      	str	r3, [sp, #32]
 8004c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c84:	b1f3      	cbz	r3, 8004cc4 <_dtoa_r+0x78c>
 8004c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80b7 	beq.w	8004dfc <_dtoa_r+0x8c4>
 8004c8e:	b18c      	cbz	r4, 8004cb4 <_dtoa_r+0x77c>
 8004c90:	4629      	mov	r1, r5
 8004c92:	4622      	mov	r2, r4
 8004c94:	4658      	mov	r0, fp
 8004c96:	f000 fcc7 	bl	8005628 <__pow5mult>
 8004c9a:	464a      	mov	r2, r9
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	4658      	mov	r0, fp
 8004ca2:	f000 fc17 	bl	80054d4 <__multiply>
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	9004      	str	r0, [sp, #16]
 8004caa:	4658      	mov	r0, fp
 8004cac:	f000 fb48 	bl	8005340 <_Bfree>
 8004cb0:	9b04      	ldr	r3, [sp, #16]
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cb6:	1b1a      	subs	r2, r3, r4
 8004cb8:	d004      	beq.n	8004cc4 <_dtoa_r+0x78c>
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	f000 fcb3 	bl	8005628 <__pow5mult>
 8004cc2:	4681      	mov	r9, r0
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4658      	mov	r0, fp
 8004cc8:	f000 fbee 	bl	80054a8 <__i2b>
 8004ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cce:	4604      	mov	r4, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 81cf 	beq.w	8005074 <_dtoa_r+0xb3c>
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4601      	mov	r1, r0
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f000 fca4 	bl	8005628 <__pow5mult>
 8004ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	f300 8095 	bgt.w	8004e14 <_dtoa_r+0x8dc>
 8004cea:	9b02      	ldr	r3, [sp, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8087 	bne.w	8004e00 <_dtoa_r+0x8c8>
 8004cf2:	9b03      	ldr	r3, [sp, #12]
 8004cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 8089 	bne.w	8004e10 <_dtoa_r+0x8d8>
 8004cfe:	9b03      	ldr	r3, [sp, #12]
 8004d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d04:	0d1b      	lsrs	r3, r3, #20
 8004d06:	051b      	lsls	r3, r3, #20
 8004d08:	b12b      	cbz	r3, 8004d16 <_dtoa_r+0x7de>
 8004d0a:	9b08      	ldr	r3, [sp, #32]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	9308      	str	r3, [sp, #32]
 8004d10:	f108 0801 	add.w	r8, r8, #1
 8004d14:	2301      	movs	r3, #1
 8004d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 81b0 	beq.w	8005080 <_dtoa_r+0xb48>
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d26:	6918      	ldr	r0, [r3, #16]
 8004d28:	f000 fb72 	bl	8005410 <__hi0bits>
 8004d2c:	f1c0 0020 	rsb	r0, r0, #32
 8004d30:	9b08      	ldr	r3, [sp, #32]
 8004d32:	4418      	add	r0, r3
 8004d34:	f010 001f 	ands.w	r0, r0, #31
 8004d38:	d077      	beq.n	8004e2a <_dtoa_r+0x8f2>
 8004d3a:	f1c0 0320 	rsb	r3, r0, #32
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	dd6b      	ble.n	8004e1a <_dtoa_r+0x8e2>
 8004d42:	9b08      	ldr	r3, [sp, #32]
 8004d44:	f1c0 001c 	rsb	r0, r0, #28
 8004d48:	4403      	add	r3, r0
 8004d4a:	4480      	add	r8, r0
 8004d4c:	4406      	add	r6, r0
 8004d4e:	9308      	str	r3, [sp, #32]
 8004d50:	f1b8 0f00 	cmp.w	r8, #0
 8004d54:	dd05      	ble.n	8004d62 <_dtoa_r+0x82a>
 8004d56:	4649      	mov	r1, r9
 8004d58:	4642      	mov	r2, r8
 8004d5a:	4658      	mov	r0, fp
 8004d5c:	f000 fcbe 	bl	80056dc <__lshift>
 8004d60:	4681      	mov	r9, r0
 8004d62:	9b08      	ldr	r3, [sp, #32]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dd05      	ble.n	8004d74 <_dtoa_r+0x83c>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4658      	mov	r0, fp
 8004d6e:	f000 fcb5 	bl	80056dc <__lshift>
 8004d72:	4604      	mov	r4, r0
 8004d74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d059      	beq.n	8004e2e <_dtoa_r+0x8f6>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4648      	mov	r0, r9
 8004d7e:	f000 fd19 	bl	80057b4 <__mcmp>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	da53      	bge.n	8004e2e <_dtoa_r+0x8f6>
 8004d86:	1e7b      	subs	r3, r7, #1
 8004d88:	9304      	str	r3, [sp, #16]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	220a      	movs	r2, #10
 8004d90:	4658      	mov	r0, fp
 8004d92:	f000 faf7 	bl	8005384 <__multadd>
 8004d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d98:	4681      	mov	r9, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8172 	beq.w	8005084 <_dtoa_r+0xb4c>
 8004da0:	2300      	movs	r3, #0
 8004da2:	4629      	mov	r1, r5
 8004da4:	220a      	movs	r2, #10
 8004da6:	4658      	mov	r0, fp
 8004da8:	f000 faec 	bl	8005384 <__multadd>
 8004dac:	9b00      	ldr	r3, [sp, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	4605      	mov	r5, r0
 8004db2:	dc67      	bgt.n	8004e84 <_dtoa_r+0x94c>
 8004db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	dc41      	bgt.n	8004e3e <_dtoa_r+0x906>
 8004dba:	e063      	b.n	8004e84 <_dtoa_r+0x94c>
 8004dbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004dbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004dc2:	e746      	b.n	8004c52 <_dtoa_r+0x71a>
 8004dc4:	9b07      	ldr	r3, [sp, #28]
 8004dc6:	1e5c      	subs	r4, r3, #1
 8004dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	bfbf      	itttt	lt
 8004dce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004dd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004dd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004dd4:	1ae3      	sublt	r3, r4, r3
 8004dd6:	bfb4      	ite	lt
 8004dd8:	18d2      	addlt	r2, r2, r3
 8004dda:	1b1c      	subge	r4, r3, r4
 8004ddc:	9b07      	ldr	r3, [sp, #28]
 8004dde:	bfbc      	itt	lt
 8004de0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004de2:	2400      	movlt	r4, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bfb5      	itete	lt
 8004de8:	eba8 0603 	sublt.w	r6, r8, r3
 8004dec:	9b07      	ldrge	r3, [sp, #28]
 8004dee:	2300      	movlt	r3, #0
 8004df0:	4646      	movge	r6, r8
 8004df2:	e730      	b.n	8004c56 <_dtoa_r+0x71e>
 8004df4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004df6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004df8:	4646      	mov	r6, r8
 8004dfa:	e735      	b.n	8004c68 <_dtoa_r+0x730>
 8004dfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dfe:	e75c      	b.n	8004cba <_dtoa_r+0x782>
 8004e00:	2300      	movs	r3, #0
 8004e02:	e788      	b.n	8004d16 <_dtoa_r+0x7de>
 8004e04:	3fe00000 	.word	0x3fe00000
 8004e08:	40240000 	.word	0x40240000
 8004e0c:	40140000 	.word	0x40140000
 8004e10:	9b02      	ldr	r3, [sp, #8]
 8004e12:	e780      	b.n	8004d16 <_dtoa_r+0x7de>
 8004e14:	2300      	movs	r3, #0
 8004e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e18:	e782      	b.n	8004d20 <_dtoa_r+0x7e8>
 8004e1a:	d099      	beq.n	8004d50 <_dtoa_r+0x818>
 8004e1c:	9a08      	ldr	r2, [sp, #32]
 8004e1e:	331c      	adds	r3, #28
 8004e20:	441a      	add	r2, r3
 8004e22:	4498      	add	r8, r3
 8004e24:	441e      	add	r6, r3
 8004e26:	9208      	str	r2, [sp, #32]
 8004e28:	e792      	b.n	8004d50 <_dtoa_r+0x818>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	e7f6      	b.n	8004e1c <_dtoa_r+0x8e4>
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	9704      	str	r7, [sp, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	dc20      	bgt.n	8004e78 <_dtoa_r+0x940>
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	dd1e      	ble.n	8004e7c <_dtoa_r+0x944>
 8004e3e:	9b00      	ldr	r3, [sp, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f47f aec0 	bne.w	8004bc6 <_dtoa_r+0x68e>
 8004e46:	4621      	mov	r1, r4
 8004e48:	2205      	movs	r2, #5
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f000 fa9a 	bl	8005384 <__multadd>
 8004e50:	4601      	mov	r1, r0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4648      	mov	r0, r9
 8004e56:	f000 fcad 	bl	80057b4 <__mcmp>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f77f aeb3 	ble.w	8004bc6 <_dtoa_r+0x68e>
 8004e60:	4656      	mov	r6, sl
 8004e62:	2331      	movs	r3, #49	@ 0x31
 8004e64:	f806 3b01 	strb.w	r3, [r6], #1
 8004e68:	9b04      	ldr	r3, [sp, #16]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	e6ae      	b.n	8004bce <_dtoa_r+0x696>
 8004e70:	9c07      	ldr	r4, [sp, #28]
 8004e72:	9704      	str	r7, [sp, #16]
 8004e74:	4625      	mov	r5, r4
 8004e76:	e7f3      	b.n	8004e60 <_dtoa_r+0x928>
 8004e78:	9b07      	ldr	r3, [sp, #28]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8104 	beq.w	800508c <_dtoa_r+0xb54>
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	dd05      	ble.n	8004e94 <_dtoa_r+0x95c>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	4658      	mov	r0, fp
 8004e8e:	f000 fc25 	bl	80056dc <__lshift>
 8004e92:	4605      	mov	r5, r0
 8004e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d05a      	beq.n	8004f50 <_dtoa_r+0xa18>
 8004e9a:	6869      	ldr	r1, [r5, #4]
 8004e9c:	4658      	mov	r0, fp
 8004e9e:	f000 fa0f 	bl	80052c0 <_Balloc>
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	b928      	cbnz	r0, 8004eb2 <_dtoa_r+0x97a>
 8004ea6:	4b84      	ldr	r3, [pc, #528]	@ (80050b8 <_dtoa_r+0xb80>)
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004eae:	f7ff bb5a 	b.w	8004566 <_dtoa_r+0x2e>
 8004eb2:	692a      	ldr	r2, [r5, #16]
 8004eb4:	3202      	adds	r2, #2
 8004eb6:	0092      	lsls	r2, r2, #2
 8004eb8:	f105 010c 	add.w	r1, r5, #12
 8004ebc:	300c      	adds	r0, #12
 8004ebe:	f000 ffaf 	bl	8005e20 <memcpy>
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4658      	mov	r0, fp
 8004ec8:	f000 fc08 	bl	80056dc <__lshift>
 8004ecc:	f10a 0301 	add.w	r3, sl, #1
 8004ed0:	9307      	str	r3, [sp, #28]
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	4453      	add	r3, sl
 8004ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ed8:	9b02      	ldr	r3, [sp, #8]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	462f      	mov	r7, r5
 8004ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4648      	mov	r0, r9
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	f7ff fa9a 	bl	8004426 <quorem>
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	9002      	str	r0, [sp, #8]
 8004ef6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004efa:	4648      	mov	r0, r9
 8004efc:	f000 fc5a 	bl	80057b4 <__mcmp>
 8004f00:	462a      	mov	r2, r5
 8004f02:	9008      	str	r0, [sp, #32]
 8004f04:	4621      	mov	r1, r4
 8004f06:	4658      	mov	r0, fp
 8004f08:	f000 fc70 	bl	80057ec <__mdiff>
 8004f0c:	68c2      	ldr	r2, [r0, #12]
 8004f0e:	4606      	mov	r6, r0
 8004f10:	bb02      	cbnz	r2, 8004f54 <_dtoa_r+0xa1c>
 8004f12:	4601      	mov	r1, r0
 8004f14:	4648      	mov	r0, r9
 8004f16:	f000 fc4d 	bl	80057b4 <__mcmp>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4658      	mov	r0, fp
 8004f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f22:	f000 fa0d 	bl	8005340 <_Bfree>
 8004f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f2a:	9e07      	ldr	r6, [sp, #28]
 8004f2c:	ea43 0102 	orr.w	r1, r3, r2
 8004f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f32:	4319      	orrs	r1, r3
 8004f34:	d110      	bne.n	8004f58 <_dtoa_r+0xa20>
 8004f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f3a:	d029      	beq.n	8004f90 <_dtoa_r+0xa58>
 8004f3c:	9b08      	ldr	r3, [sp, #32]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dd02      	ble.n	8004f48 <_dtoa_r+0xa10>
 8004f42:	9b02      	ldr	r3, [sp, #8]
 8004f44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004f48:	9b00      	ldr	r3, [sp, #0]
 8004f4a:	f883 8000 	strb.w	r8, [r3]
 8004f4e:	e63f      	b.n	8004bd0 <_dtoa_r+0x698>
 8004f50:	4628      	mov	r0, r5
 8004f52:	e7bb      	b.n	8004ecc <_dtoa_r+0x994>
 8004f54:	2201      	movs	r2, #1
 8004f56:	e7e1      	b.n	8004f1c <_dtoa_r+0x9e4>
 8004f58:	9b08      	ldr	r3, [sp, #32]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	db04      	blt.n	8004f68 <_dtoa_r+0xa30>
 8004f5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f60:	430b      	orrs	r3, r1
 8004f62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f64:	430b      	orrs	r3, r1
 8004f66:	d120      	bne.n	8004faa <_dtoa_r+0xa72>
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	dded      	ble.n	8004f48 <_dtoa_r+0xa10>
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4658      	mov	r0, fp
 8004f72:	f000 fbb3 	bl	80056dc <__lshift>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4681      	mov	r9, r0
 8004f7a:	f000 fc1b 	bl	80057b4 <__mcmp>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	dc03      	bgt.n	8004f8a <_dtoa_r+0xa52>
 8004f82:	d1e1      	bne.n	8004f48 <_dtoa_r+0xa10>
 8004f84:	f018 0f01 	tst.w	r8, #1
 8004f88:	d0de      	beq.n	8004f48 <_dtoa_r+0xa10>
 8004f8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f8e:	d1d8      	bne.n	8004f42 <_dtoa_r+0xa0a>
 8004f90:	9a00      	ldr	r2, [sp, #0]
 8004f92:	2339      	movs	r3, #57	@ 0x39
 8004f94:	7013      	strb	r3, [r2, #0]
 8004f96:	4633      	mov	r3, r6
 8004f98:	461e      	mov	r6, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004fa0:	2a39      	cmp	r2, #57	@ 0x39
 8004fa2:	d052      	beq.n	800504a <_dtoa_r+0xb12>
 8004fa4:	3201      	adds	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e612      	b.n	8004bd0 <_dtoa_r+0x698>
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	dd07      	ble.n	8004fbe <_dtoa_r+0xa86>
 8004fae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004fb2:	d0ed      	beq.n	8004f90 <_dtoa_r+0xa58>
 8004fb4:	9a00      	ldr	r2, [sp, #0]
 8004fb6:	f108 0301 	add.w	r3, r8, #1
 8004fba:	7013      	strb	r3, [r2, #0]
 8004fbc:	e608      	b.n	8004bd0 <_dtoa_r+0x698>
 8004fbe:	9b07      	ldr	r3, [sp, #28]
 8004fc0:	9a07      	ldr	r2, [sp, #28]
 8004fc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d028      	beq.n	800501e <_dtoa_r+0xae6>
 8004fcc:	4649      	mov	r1, r9
 8004fce:	2300      	movs	r3, #0
 8004fd0:	220a      	movs	r2, #10
 8004fd2:	4658      	mov	r0, fp
 8004fd4:	f000 f9d6 	bl	8005384 <__multadd>
 8004fd8:	42af      	cmp	r7, r5
 8004fda:	4681      	mov	r9, r0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 020a 	mov.w	r2, #10
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	d107      	bne.n	8004ffa <_dtoa_r+0xac2>
 8004fea:	f000 f9cb 	bl	8005384 <__multadd>
 8004fee:	4607      	mov	r7, r0
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	9b07      	ldr	r3, [sp, #28]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	9307      	str	r3, [sp, #28]
 8004ff8:	e774      	b.n	8004ee4 <_dtoa_r+0x9ac>
 8004ffa:	f000 f9c3 	bl	8005384 <__multadd>
 8004ffe:	4629      	mov	r1, r5
 8005000:	4607      	mov	r7, r0
 8005002:	2300      	movs	r3, #0
 8005004:	220a      	movs	r2, #10
 8005006:	4658      	mov	r0, fp
 8005008:	f000 f9bc 	bl	8005384 <__multadd>
 800500c:	4605      	mov	r5, r0
 800500e:	e7f0      	b.n	8004ff2 <_dtoa_r+0xaba>
 8005010:	9b00      	ldr	r3, [sp, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfcc      	ite	gt
 8005016:	461e      	movgt	r6, r3
 8005018:	2601      	movle	r6, #1
 800501a:	4456      	add	r6, sl
 800501c:	2700      	movs	r7, #0
 800501e:	4649      	mov	r1, r9
 8005020:	2201      	movs	r2, #1
 8005022:	4658      	mov	r0, fp
 8005024:	f000 fb5a 	bl	80056dc <__lshift>
 8005028:	4621      	mov	r1, r4
 800502a:	4681      	mov	r9, r0
 800502c:	f000 fbc2 	bl	80057b4 <__mcmp>
 8005030:	2800      	cmp	r0, #0
 8005032:	dcb0      	bgt.n	8004f96 <_dtoa_r+0xa5e>
 8005034:	d102      	bne.n	800503c <_dtoa_r+0xb04>
 8005036:	f018 0f01 	tst.w	r8, #1
 800503a:	d1ac      	bne.n	8004f96 <_dtoa_r+0xa5e>
 800503c:	4633      	mov	r3, r6
 800503e:	461e      	mov	r6, r3
 8005040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005044:	2a30      	cmp	r2, #48	@ 0x30
 8005046:	d0fa      	beq.n	800503e <_dtoa_r+0xb06>
 8005048:	e5c2      	b.n	8004bd0 <_dtoa_r+0x698>
 800504a:	459a      	cmp	sl, r3
 800504c:	d1a4      	bne.n	8004f98 <_dtoa_r+0xa60>
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	3301      	adds	r3, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	2331      	movs	r3, #49	@ 0x31
 8005056:	f88a 3000 	strb.w	r3, [sl]
 800505a:	e5b9      	b.n	8004bd0 <_dtoa_r+0x698>
 800505c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800505e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80050bc <_dtoa_r+0xb84>
 8005062:	b11b      	cbz	r3, 800506c <_dtoa_r+0xb34>
 8005064:	f10a 0308 	add.w	r3, sl, #8
 8005068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4650      	mov	r0, sl
 800506e:	b019      	add	sp, #100	@ 0x64
 8005070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005076:	2b01      	cmp	r3, #1
 8005078:	f77f ae37 	ble.w	8004cea <_dtoa_r+0x7b2>
 800507c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800507e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005080:	2001      	movs	r0, #1
 8005082:	e655      	b.n	8004d30 <_dtoa_r+0x7f8>
 8005084:	9b00      	ldr	r3, [sp, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f77f aed6 	ble.w	8004e38 <_dtoa_r+0x900>
 800508c:	4656      	mov	r6, sl
 800508e:	4621      	mov	r1, r4
 8005090:	4648      	mov	r0, r9
 8005092:	f7ff f9c8 	bl	8004426 <quorem>
 8005096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800509a:	f806 8b01 	strb.w	r8, [r6], #1
 800509e:	9b00      	ldr	r3, [sp, #0]
 80050a0:	eba6 020a 	sub.w	r2, r6, sl
 80050a4:	4293      	cmp	r3, r2
 80050a6:	ddb3      	ble.n	8005010 <_dtoa_r+0xad8>
 80050a8:	4649      	mov	r1, r9
 80050aa:	2300      	movs	r3, #0
 80050ac:	220a      	movs	r2, #10
 80050ae:	4658      	mov	r0, fp
 80050b0:	f000 f968 	bl	8005384 <__multadd>
 80050b4:	4681      	mov	r9, r0
 80050b6:	e7ea      	b.n	800508e <_dtoa_r+0xb56>
 80050b8:	080065bf 	.word	0x080065bf
 80050bc:	08006543 	.word	0x08006543

080050c0 <_free_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4605      	mov	r5, r0
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d041      	beq.n	800514c <_free_r+0x8c>
 80050c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050cc:	1f0c      	subs	r4, r1, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfb8      	it	lt
 80050d2:	18e4      	addlt	r4, r4, r3
 80050d4:	f000 f8e8 	bl	80052a8 <__malloc_lock>
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <_free_r+0x90>)
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	b933      	cbnz	r3, 80050ec <_free_r+0x2c>
 80050de:	6063      	str	r3, [r4, #4]
 80050e0:	6014      	str	r4, [r2, #0]
 80050e2:	4628      	mov	r0, r5
 80050e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e8:	f000 b8e4 	b.w	80052b4 <__malloc_unlock>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d908      	bls.n	8005102 <_free_r+0x42>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	1821      	adds	r1, r4, r0
 80050f4:	428b      	cmp	r3, r1
 80050f6:	bf01      	itttt	eq
 80050f8:	6819      	ldreq	r1, [r3, #0]
 80050fa:	685b      	ldreq	r3, [r3, #4]
 80050fc:	1809      	addeq	r1, r1, r0
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	e7ed      	b.n	80050de <_free_r+0x1e>
 8005102:	461a      	mov	r2, r3
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b10b      	cbz	r3, 800510c <_free_r+0x4c>
 8005108:	42a3      	cmp	r3, r4
 800510a:	d9fa      	bls.n	8005102 <_free_r+0x42>
 800510c:	6811      	ldr	r1, [r2, #0]
 800510e:	1850      	adds	r0, r2, r1
 8005110:	42a0      	cmp	r0, r4
 8005112:	d10b      	bne.n	800512c <_free_r+0x6c>
 8005114:	6820      	ldr	r0, [r4, #0]
 8005116:	4401      	add	r1, r0
 8005118:	1850      	adds	r0, r2, r1
 800511a:	4283      	cmp	r3, r0
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	d1e0      	bne.n	80050e2 <_free_r+0x22>
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	6053      	str	r3, [r2, #4]
 8005126:	4408      	add	r0, r1
 8005128:	6010      	str	r0, [r2, #0]
 800512a:	e7da      	b.n	80050e2 <_free_r+0x22>
 800512c:	d902      	bls.n	8005134 <_free_r+0x74>
 800512e:	230c      	movs	r3, #12
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	e7d6      	b.n	80050e2 <_free_r+0x22>
 8005134:	6820      	ldr	r0, [r4, #0]
 8005136:	1821      	adds	r1, r4, r0
 8005138:	428b      	cmp	r3, r1
 800513a:	bf04      	itt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	bf04      	itt	eq
 8005144:	1809      	addeq	r1, r1, r0
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	6054      	str	r4, [r2, #4]
 800514a:	e7ca      	b.n	80050e2 <_free_r+0x22>
 800514c:	bd38      	pop	{r3, r4, r5, pc}
 800514e:	bf00      	nop
 8005150:	20000408 	.word	0x20000408

08005154 <malloc>:
 8005154:	4b02      	ldr	r3, [pc, #8]	@ (8005160 <malloc+0xc>)
 8005156:	4601      	mov	r1, r0
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f000 b825 	b.w	80051a8 <_malloc_r>
 800515e:	bf00      	nop
 8005160:	20000018 	.word	0x20000018

08005164 <sbrk_aligned>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4e0f      	ldr	r6, [pc, #60]	@ (80051a4 <sbrk_aligned+0x40>)
 8005168:	460c      	mov	r4, r1
 800516a:	6831      	ldr	r1, [r6, #0]
 800516c:	4605      	mov	r5, r0
 800516e:	b911      	cbnz	r1, 8005176 <sbrk_aligned+0x12>
 8005170:	f000 fe46 	bl	8005e00 <_sbrk_r>
 8005174:	6030      	str	r0, [r6, #0]
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 fe41 	bl	8005e00 <_sbrk_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d103      	bne.n	800518a <sbrk_aligned+0x26>
 8005182:	f04f 34ff 	mov.w	r4, #4294967295
 8005186:	4620      	mov	r0, r4
 8005188:	bd70      	pop	{r4, r5, r6, pc}
 800518a:	1cc4      	adds	r4, r0, #3
 800518c:	f024 0403 	bic.w	r4, r4, #3
 8005190:	42a0      	cmp	r0, r4
 8005192:	d0f8      	beq.n	8005186 <sbrk_aligned+0x22>
 8005194:	1a21      	subs	r1, r4, r0
 8005196:	4628      	mov	r0, r5
 8005198:	f000 fe32 	bl	8005e00 <_sbrk_r>
 800519c:	3001      	adds	r0, #1
 800519e:	d1f2      	bne.n	8005186 <sbrk_aligned+0x22>
 80051a0:	e7ef      	b.n	8005182 <sbrk_aligned+0x1e>
 80051a2:	bf00      	nop
 80051a4:	20000404 	.word	0x20000404

080051a8 <_malloc_r>:
 80051a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ac:	1ccd      	adds	r5, r1, #3
 80051ae:	f025 0503 	bic.w	r5, r5, #3
 80051b2:	3508      	adds	r5, #8
 80051b4:	2d0c      	cmp	r5, #12
 80051b6:	bf38      	it	cc
 80051b8:	250c      	movcc	r5, #12
 80051ba:	2d00      	cmp	r5, #0
 80051bc:	4606      	mov	r6, r0
 80051be:	db01      	blt.n	80051c4 <_malloc_r+0x1c>
 80051c0:	42a9      	cmp	r1, r5
 80051c2:	d904      	bls.n	80051ce <_malloc_r+0x26>
 80051c4:	230c      	movs	r3, #12
 80051c6:	6033      	str	r3, [r6, #0]
 80051c8:	2000      	movs	r0, #0
 80051ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052a4 <_malloc_r+0xfc>
 80051d2:	f000 f869 	bl	80052a8 <__malloc_lock>
 80051d6:	f8d8 3000 	ldr.w	r3, [r8]
 80051da:	461c      	mov	r4, r3
 80051dc:	bb44      	cbnz	r4, 8005230 <_malloc_r+0x88>
 80051de:	4629      	mov	r1, r5
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7ff ffbf 	bl	8005164 <sbrk_aligned>
 80051e6:	1c43      	adds	r3, r0, #1
 80051e8:	4604      	mov	r4, r0
 80051ea:	d158      	bne.n	800529e <_malloc_r+0xf6>
 80051ec:	f8d8 4000 	ldr.w	r4, [r8]
 80051f0:	4627      	mov	r7, r4
 80051f2:	2f00      	cmp	r7, #0
 80051f4:	d143      	bne.n	800527e <_malloc_r+0xd6>
 80051f6:	2c00      	cmp	r4, #0
 80051f8:	d04b      	beq.n	8005292 <_malloc_r+0xea>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	4639      	mov	r1, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	eb04 0903 	add.w	r9, r4, r3
 8005204:	f000 fdfc 	bl	8005e00 <_sbrk_r>
 8005208:	4581      	cmp	r9, r0
 800520a:	d142      	bne.n	8005292 <_malloc_r+0xea>
 800520c:	6821      	ldr	r1, [r4, #0]
 800520e:	1a6d      	subs	r5, r5, r1
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffa6 	bl	8005164 <sbrk_aligned>
 8005218:	3001      	adds	r0, #1
 800521a:	d03a      	beq.n	8005292 <_malloc_r+0xea>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	442b      	add	r3, r5
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	f8d8 3000 	ldr.w	r3, [r8]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	bb62      	cbnz	r2, 8005284 <_malloc_r+0xdc>
 800522a:	f8c8 7000 	str.w	r7, [r8]
 800522e:	e00f      	b.n	8005250 <_malloc_r+0xa8>
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	1b52      	subs	r2, r2, r5
 8005234:	d420      	bmi.n	8005278 <_malloc_r+0xd0>
 8005236:	2a0b      	cmp	r2, #11
 8005238:	d917      	bls.n	800526a <_malloc_r+0xc2>
 800523a:	1961      	adds	r1, r4, r5
 800523c:	42a3      	cmp	r3, r4
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	bf18      	it	ne
 8005242:	6059      	strne	r1, [r3, #4]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	bf08      	it	eq
 8005248:	f8c8 1000 	streq.w	r1, [r8]
 800524c:	5162      	str	r2, [r4, r5]
 800524e:	604b      	str	r3, [r1, #4]
 8005250:	4630      	mov	r0, r6
 8005252:	f000 f82f 	bl	80052b4 <__malloc_unlock>
 8005256:	f104 000b 	add.w	r0, r4, #11
 800525a:	1d23      	adds	r3, r4, #4
 800525c:	f020 0007 	bic.w	r0, r0, #7
 8005260:	1ac2      	subs	r2, r0, r3
 8005262:	bf1c      	itt	ne
 8005264:	1a1b      	subne	r3, r3, r0
 8005266:	50a3      	strne	r3, [r4, r2]
 8005268:	e7af      	b.n	80051ca <_malloc_r+0x22>
 800526a:	6862      	ldr	r2, [r4, #4]
 800526c:	42a3      	cmp	r3, r4
 800526e:	bf0c      	ite	eq
 8005270:	f8c8 2000 	streq.w	r2, [r8]
 8005274:	605a      	strne	r2, [r3, #4]
 8005276:	e7eb      	b.n	8005250 <_malloc_r+0xa8>
 8005278:	4623      	mov	r3, r4
 800527a:	6864      	ldr	r4, [r4, #4]
 800527c:	e7ae      	b.n	80051dc <_malloc_r+0x34>
 800527e:	463c      	mov	r4, r7
 8005280:	687f      	ldr	r7, [r7, #4]
 8005282:	e7b6      	b.n	80051f2 <_malloc_r+0x4a>
 8005284:	461a      	mov	r2, r3
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	42a3      	cmp	r3, r4
 800528a:	d1fb      	bne.n	8005284 <_malloc_r+0xdc>
 800528c:	2300      	movs	r3, #0
 800528e:	6053      	str	r3, [r2, #4]
 8005290:	e7de      	b.n	8005250 <_malloc_r+0xa8>
 8005292:	230c      	movs	r3, #12
 8005294:	6033      	str	r3, [r6, #0]
 8005296:	4630      	mov	r0, r6
 8005298:	f000 f80c 	bl	80052b4 <__malloc_unlock>
 800529c:	e794      	b.n	80051c8 <_malloc_r+0x20>
 800529e:	6005      	str	r5, [r0, #0]
 80052a0:	e7d6      	b.n	8005250 <_malloc_r+0xa8>
 80052a2:	bf00      	nop
 80052a4:	20000408 	.word	0x20000408

080052a8 <__malloc_lock>:
 80052a8:	4801      	ldr	r0, [pc, #4]	@ (80052b0 <__malloc_lock+0x8>)
 80052aa:	f7ff b8ba 	b.w	8004422 <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000400 	.word	0x20000400

080052b4 <__malloc_unlock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <__malloc_unlock+0x8>)
 80052b6:	f7ff b8b5 	b.w	8004424 <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000400 	.word	0x20000400

080052c0 <_Balloc>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	69c6      	ldr	r6, [r0, #28]
 80052c4:	4604      	mov	r4, r0
 80052c6:	460d      	mov	r5, r1
 80052c8:	b976      	cbnz	r6, 80052e8 <_Balloc+0x28>
 80052ca:	2010      	movs	r0, #16
 80052cc:	f7ff ff42 	bl	8005154 <malloc>
 80052d0:	4602      	mov	r2, r0
 80052d2:	61e0      	str	r0, [r4, #28]
 80052d4:	b920      	cbnz	r0, 80052e0 <_Balloc+0x20>
 80052d6:	4b18      	ldr	r3, [pc, #96]	@ (8005338 <_Balloc+0x78>)
 80052d8:	4818      	ldr	r0, [pc, #96]	@ (800533c <_Balloc+0x7c>)
 80052da:	216b      	movs	r1, #107	@ 0x6b
 80052dc:	f000 fdae 	bl	8005e3c <__assert_func>
 80052e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052e4:	6006      	str	r6, [r0, #0]
 80052e6:	60c6      	str	r6, [r0, #12]
 80052e8:	69e6      	ldr	r6, [r4, #28]
 80052ea:	68f3      	ldr	r3, [r6, #12]
 80052ec:	b183      	cbz	r3, 8005310 <_Balloc+0x50>
 80052ee:	69e3      	ldr	r3, [r4, #28]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052f6:	b9b8      	cbnz	r0, 8005328 <_Balloc+0x68>
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f605 	lsl.w	r6, r1, r5
 80052fe:	1d72      	adds	r2, r6, #5
 8005300:	0092      	lsls	r2, r2, #2
 8005302:	4620      	mov	r0, r4
 8005304:	f000 fdb8 	bl	8005e78 <_calloc_r>
 8005308:	b160      	cbz	r0, 8005324 <_Balloc+0x64>
 800530a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800530e:	e00e      	b.n	800532e <_Balloc+0x6e>
 8005310:	2221      	movs	r2, #33	@ 0x21
 8005312:	2104      	movs	r1, #4
 8005314:	4620      	mov	r0, r4
 8005316:	f000 fdaf 	bl	8005e78 <_calloc_r>
 800531a:	69e3      	ldr	r3, [r4, #28]
 800531c:	60f0      	str	r0, [r6, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e4      	bne.n	80052ee <_Balloc+0x2e>
 8005324:	2000      	movs	r0, #0
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	6802      	ldr	r2, [r0, #0]
 800532a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800532e:	2300      	movs	r3, #0
 8005330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005334:	e7f7      	b.n	8005326 <_Balloc+0x66>
 8005336:	bf00      	nop
 8005338:	08006550 	.word	0x08006550
 800533c:	080065d0 	.word	0x080065d0

08005340 <_Bfree>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	69c6      	ldr	r6, [r0, #28]
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	b976      	cbnz	r6, 8005368 <_Bfree+0x28>
 800534a:	2010      	movs	r0, #16
 800534c:	f7ff ff02 	bl	8005154 <malloc>
 8005350:	4602      	mov	r2, r0
 8005352:	61e8      	str	r0, [r5, #28]
 8005354:	b920      	cbnz	r0, 8005360 <_Bfree+0x20>
 8005356:	4b09      	ldr	r3, [pc, #36]	@ (800537c <_Bfree+0x3c>)
 8005358:	4809      	ldr	r0, [pc, #36]	@ (8005380 <_Bfree+0x40>)
 800535a:	218f      	movs	r1, #143	@ 0x8f
 800535c:	f000 fd6e 	bl	8005e3c <__assert_func>
 8005360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005364:	6006      	str	r6, [r0, #0]
 8005366:	60c6      	str	r6, [r0, #12]
 8005368:	b13c      	cbz	r4, 800537a <_Bfree+0x3a>
 800536a:	69eb      	ldr	r3, [r5, #28]
 800536c:	6862      	ldr	r2, [r4, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005374:	6021      	str	r1, [r4, #0]
 8005376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	08006550 	.word	0x08006550
 8005380:	080065d0 	.word	0x080065d0

08005384 <__multadd>:
 8005384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005388:	690d      	ldr	r5, [r1, #16]
 800538a:	4607      	mov	r7, r0
 800538c:	460c      	mov	r4, r1
 800538e:	461e      	mov	r6, r3
 8005390:	f101 0c14 	add.w	ip, r1, #20
 8005394:	2000      	movs	r0, #0
 8005396:	f8dc 3000 	ldr.w	r3, [ip]
 800539a:	b299      	uxth	r1, r3
 800539c:	fb02 6101 	mla	r1, r2, r1, r6
 80053a0:	0c1e      	lsrs	r6, r3, #16
 80053a2:	0c0b      	lsrs	r3, r1, #16
 80053a4:	fb02 3306 	mla	r3, r2, r6, r3
 80053a8:	b289      	uxth	r1, r1
 80053aa:	3001      	adds	r0, #1
 80053ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053b0:	4285      	cmp	r5, r0
 80053b2:	f84c 1b04 	str.w	r1, [ip], #4
 80053b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053ba:	dcec      	bgt.n	8005396 <__multadd+0x12>
 80053bc:	b30e      	cbz	r6, 8005402 <__multadd+0x7e>
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	42ab      	cmp	r3, r5
 80053c2:	dc19      	bgt.n	80053f8 <__multadd+0x74>
 80053c4:	6861      	ldr	r1, [r4, #4]
 80053c6:	4638      	mov	r0, r7
 80053c8:	3101      	adds	r1, #1
 80053ca:	f7ff ff79 	bl	80052c0 <_Balloc>
 80053ce:	4680      	mov	r8, r0
 80053d0:	b928      	cbnz	r0, 80053de <__multadd+0x5a>
 80053d2:	4602      	mov	r2, r0
 80053d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <__multadd+0x84>)
 80053d6:	480d      	ldr	r0, [pc, #52]	@ (800540c <__multadd+0x88>)
 80053d8:	21ba      	movs	r1, #186	@ 0xba
 80053da:	f000 fd2f 	bl	8005e3c <__assert_func>
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	3202      	adds	r2, #2
 80053e2:	f104 010c 	add.w	r1, r4, #12
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	300c      	adds	r0, #12
 80053ea:	f000 fd19 	bl	8005e20 <memcpy>
 80053ee:	4621      	mov	r1, r4
 80053f0:	4638      	mov	r0, r7
 80053f2:	f7ff ffa5 	bl	8005340 <_Bfree>
 80053f6:	4644      	mov	r4, r8
 80053f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053fc:	3501      	adds	r5, #1
 80053fe:	615e      	str	r6, [r3, #20]
 8005400:	6125      	str	r5, [r4, #16]
 8005402:	4620      	mov	r0, r4
 8005404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005408:	080065bf 	.word	0x080065bf
 800540c:	080065d0 	.word	0x080065d0

08005410 <__hi0bits>:
 8005410:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005414:	4603      	mov	r3, r0
 8005416:	bf36      	itet	cc
 8005418:	0403      	lslcc	r3, r0, #16
 800541a:	2000      	movcs	r0, #0
 800541c:	2010      	movcc	r0, #16
 800541e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005422:	bf3c      	itt	cc
 8005424:	021b      	lslcc	r3, r3, #8
 8005426:	3008      	addcc	r0, #8
 8005428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542c:	bf3c      	itt	cc
 800542e:	011b      	lslcc	r3, r3, #4
 8005430:	3004      	addcc	r0, #4
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	bf3c      	itt	cc
 8005438:	009b      	lslcc	r3, r3, #2
 800543a:	3002      	addcc	r0, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	db05      	blt.n	800544c <__hi0bits+0x3c>
 8005440:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005444:	f100 0001 	add.w	r0, r0, #1
 8005448:	bf08      	it	eq
 800544a:	2020      	moveq	r0, #32
 800544c:	4770      	bx	lr

0800544e <__lo0bits>:
 800544e:	6803      	ldr	r3, [r0, #0]
 8005450:	4602      	mov	r2, r0
 8005452:	f013 0007 	ands.w	r0, r3, #7
 8005456:	d00b      	beq.n	8005470 <__lo0bits+0x22>
 8005458:	07d9      	lsls	r1, r3, #31
 800545a:	d421      	bmi.n	80054a0 <__lo0bits+0x52>
 800545c:	0798      	lsls	r0, r3, #30
 800545e:	bf49      	itett	mi
 8005460:	085b      	lsrmi	r3, r3, #1
 8005462:	089b      	lsrpl	r3, r3, #2
 8005464:	2001      	movmi	r0, #1
 8005466:	6013      	strmi	r3, [r2, #0]
 8005468:	bf5c      	itt	pl
 800546a:	6013      	strpl	r3, [r2, #0]
 800546c:	2002      	movpl	r0, #2
 800546e:	4770      	bx	lr
 8005470:	b299      	uxth	r1, r3
 8005472:	b909      	cbnz	r1, 8005478 <__lo0bits+0x2a>
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	2010      	movs	r0, #16
 8005478:	b2d9      	uxtb	r1, r3
 800547a:	b909      	cbnz	r1, 8005480 <__lo0bits+0x32>
 800547c:	3008      	adds	r0, #8
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	0719      	lsls	r1, r3, #28
 8005482:	bf04      	itt	eq
 8005484:	091b      	lsreq	r3, r3, #4
 8005486:	3004      	addeq	r0, #4
 8005488:	0799      	lsls	r1, r3, #30
 800548a:	bf04      	itt	eq
 800548c:	089b      	lsreq	r3, r3, #2
 800548e:	3002      	addeq	r0, #2
 8005490:	07d9      	lsls	r1, r3, #31
 8005492:	d403      	bmi.n	800549c <__lo0bits+0x4e>
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	f100 0001 	add.w	r0, r0, #1
 800549a:	d003      	beq.n	80054a4 <__lo0bits+0x56>
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4770      	bx	lr
 80054a0:	2000      	movs	r0, #0
 80054a2:	4770      	bx	lr
 80054a4:	2020      	movs	r0, #32
 80054a6:	4770      	bx	lr

080054a8 <__i2b>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	460c      	mov	r4, r1
 80054ac:	2101      	movs	r1, #1
 80054ae:	f7ff ff07 	bl	80052c0 <_Balloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	b928      	cbnz	r0, 80054c2 <__i2b+0x1a>
 80054b6:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <__i2b+0x24>)
 80054b8:	4805      	ldr	r0, [pc, #20]	@ (80054d0 <__i2b+0x28>)
 80054ba:	f240 1145 	movw	r1, #325	@ 0x145
 80054be:	f000 fcbd 	bl	8005e3c <__assert_func>
 80054c2:	2301      	movs	r3, #1
 80054c4:	6144      	str	r4, [r0, #20]
 80054c6:	6103      	str	r3, [r0, #16]
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	080065bf 	.word	0x080065bf
 80054d0:	080065d0 	.word	0x080065d0

080054d4 <__multiply>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	4614      	mov	r4, r2
 80054da:	690a      	ldr	r2, [r1, #16]
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bfa8      	it	ge
 80054e2:	4623      	movge	r3, r4
 80054e4:	460f      	mov	r7, r1
 80054e6:	bfa4      	itt	ge
 80054e8:	460c      	movge	r4, r1
 80054ea:	461f      	movge	r7, r3
 80054ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80054f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	6861      	ldr	r1, [r4, #4]
 80054f8:	eb0a 0609 	add.w	r6, sl, r9
 80054fc:	42b3      	cmp	r3, r6
 80054fe:	b085      	sub	sp, #20
 8005500:	bfb8      	it	lt
 8005502:	3101      	addlt	r1, #1
 8005504:	f7ff fedc 	bl	80052c0 <_Balloc>
 8005508:	b930      	cbnz	r0, 8005518 <__multiply+0x44>
 800550a:	4602      	mov	r2, r0
 800550c:	4b44      	ldr	r3, [pc, #272]	@ (8005620 <__multiply+0x14c>)
 800550e:	4845      	ldr	r0, [pc, #276]	@ (8005624 <__multiply+0x150>)
 8005510:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005514:	f000 fc92 	bl	8005e3c <__assert_func>
 8005518:	f100 0514 	add.w	r5, r0, #20
 800551c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005520:	462b      	mov	r3, r5
 8005522:	2200      	movs	r2, #0
 8005524:	4543      	cmp	r3, r8
 8005526:	d321      	bcc.n	800556c <__multiply+0x98>
 8005528:	f107 0114 	add.w	r1, r7, #20
 800552c:	f104 0214 	add.w	r2, r4, #20
 8005530:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005534:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	1b13      	subs	r3, r2, r4
 800553c:	3b15      	subs	r3, #21
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	3304      	adds	r3, #4
 8005544:	f104 0715 	add.w	r7, r4, #21
 8005548:	42ba      	cmp	r2, r7
 800554a:	bf38      	it	cc
 800554c:	2304      	movcc	r3, #4
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	9103      	str	r1, [sp, #12]
 8005554:	428b      	cmp	r3, r1
 8005556:	d80c      	bhi.n	8005572 <__multiply+0x9e>
 8005558:	2e00      	cmp	r6, #0
 800555a:	dd03      	ble.n	8005564 <__multiply+0x90>
 800555c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05b      	beq.n	800561c <__multiply+0x148>
 8005564:	6106      	str	r6, [r0, #16]
 8005566:	b005      	add	sp, #20
 8005568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556c:	f843 2b04 	str.w	r2, [r3], #4
 8005570:	e7d8      	b.n	8005524 <__multiply+0x50>
 8005572:	f8b1 a000 	ldrh.w	sl, [r1]
 8005576:	f1ba 0f00 	cmp.w	sl, #0
 800557a:	d024      	beq.n	80055c6 <__multiply+0xf2>
 800557c:	f104 0e14 	add.w	lr, r4, #20
 8005580:	46a9      	mov	r9, r5
 8005582:	f04f 0c00 	mov.w	ip, #0
 8005586:	f85e 7b04 	ldr.w	r7, [lr], #4
 800558a:	f8d9 3000 	ldr.w	r3, [r9]
 800558e:	fa1f fb87 	uxth.w	fp, r7
 8005592:	b29b      	uxth	r3, r3
 8005594:	fb0a 330b 	mla	r3, sl, fp, r3
 8005598:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800559c:	f8d9 7000 	ldr.w	r7, [r9]
 80055a0:	4463      	add	r3, ip
 80055a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80055aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055b4:	4572      	cmp	r2, lr
 80055b6:	f849 3b04 	str.w	r3, [r9], #4
 80055ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055be:	d8e2      	bhi.n	8005586 <__multiply+0xb2>
 80055c0:	9b01      	ldr	r3, [sp, #4]
 80055c2:	f845 c003 	str.w	ip, [r5, r3]
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80055cc:	3104      	adds	r1, #4
 80055ce:	f1b9 0f00 	cmp.w	r9, #0
 80055d2:	d021      	beq.n	8005618 <__multiply+0x144>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	f104 0c14 	add.w	ip, r4, #20
 80055da:	46ae      	mov	lr, r5
 80055dc:	f04f 0a00 	mov.w	sl, #0
 80055e0:	f8bc b000 	ldrh.w	fp, [ip]
 80055e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80055e8:	fb09 770b 	mla	r7, r9, fp, r7
 80055ec:	4457      	add	r7, sl
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055f4:	f84e 3b04 	str.w	r3, [lr], #4
 80055f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005600:	f8be 3000 	ldrh.w	r3, [lr]
 8005604:	fb09 330a 	mla	r3, r9, sl, r3
 8005608:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800560c:	4562      	cmp	r2, ip
 800560e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005612:	d8e5      	bhi.n	80055e0 <__multiply+0x10c>
 8005614:	9f01      	ldr	r7, [sp, #4]
 8005616:	51eb      	str	r3, [r5, r7]
 8005618:	3504      	adds	r5, #4
 800561a:	e799      	b.n	8005550 <__multiply+0x7c>
 800561c:	3e01      	subs	r6, #1
 800561e:	e79b      	b.n	8005558 <__multiply+0x84>
 8005620:	080065bf 	.word	0x080065bf
 8005624:	080065d0 	.word	0x080065d0

08005628 <__pow5mult>:
 8005628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800562c:	4615      	mov	r5, r2
 800562e:	f012 0203 	ands.w	r2, r2, #3
 8005632:	4607      	mov	r7, r0
 8005634:	460e      	mov	r6, r1
 8005636:	d007      	beq.n	8005648 <__pow5mult+0x20>
 8005638:	4c25      	ldr	r4, [pc, #148]	@ (80056d0 <__pow5mult+0xa8>)
 800563a:	3a01      	subs	r2, #1
 800563c:	2300      	movs	r3, #0
 800563e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005642:	f7ff fe9f 	bl	8005384 <__multadd>
 8005646:	4606      	mov	r6, r0
 8005648:	10ad      	asrs	r5, r5, #2
 800564a:	d03d      	beq.n	80056c8 <__pow5mult+0xa0>
 800564c:	69fc      	ldr	r4, [r7, #28]
 800564e:	b97c      	cbnz	r4, 8005670 <__pow5mult+0x48>
 8005650:	2010      	movs	r0, #16
 8005652:	f7ff fd7f 	bl	8005154 <malloc>
 8005656:	4602      	mov	r2, r0
 8005658:	61f8      	str	r0, [r7, #28]
 800565a:	b928      	cbnz	r0, 8005668 <__pow5mult+0x40>
 800565c:	4b1d      	ldr	r3, [pc, #116]	@ (80056d4 <__pow5mult+0xac>)
 800565e:	481e      	ldr	r0, [pc, #120]	@ (80056d8 <__pow5mult+0xb0>)
 8005660:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005664:	f000 fbea 	bl	8005e3c <__assert_func>
 8005668:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800566c:	6004      	str	r4, [r0, #0]
 800566e:	60c4      	str	r4, [r0, #12]
 8005670:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005674:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005678:	b94c      	cbnz	r4, 800568e <__pow5mult+0x66>
 800567a:	f240 2171 	movw	r1, #625	@ 0x271
 800567e:	4638      	mov	r0, r7
 8005680:	f7ff ff12 	bl	80054a8 <__i2b>
 8005684:	2300      	movs	r3, #0
 8005686:	f8c8 0008 	str.w	r0, [r8, #8]
 800568a:	4604      	mov	r4, r0
 800568c:	6003      	str	r3, [r0, #0]
 800568e:	f04f 0900 	mov.w	r9, #0
 8005692:	07eb      	lsls	r3, r5, #31
 8005694:	d50a      	bpl.n	80056ac <__pow5mult+0x84>
 8005696:	4631      	mov	r1, r6
 8005698:	4622      	mov	r2, r4
 800569a:	4638      	mov	r0, r7
 800569c:	f7ff ff1a 	bl	80054d4 <__multiply>
 80056a0:	4631      	mov	r1, r6
 80056a2:	4680      	mov	r8, r0
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff fe4b 	bl	8005340 <_Bfree>
 80056aa:	4646      	mov	r6, r8
 80056ac:	106d      	asrs	r5, r5, #1
 80056ae:	d00b      	beq.n	80056c8 <__pow5mult+0xa0>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	b938      	cbnz	r0, 80056c4 <__pow5mult+0x9c>
 80056b4:	4622      	mov	r2, r4
 80056b6:	4621      	mov	r1, r4
 80056b8:	4638      	mov	r0, r7
 80056ba:	f7ff ff0b 	bl	80054d4 <__multiply>
 80056be:	6020      	str	r0, [r4, #0]
 80056c0:	f8c0 9000 	str.w	r9, [r0]
 80056c4:	4604      	mov	r4, r0
 80056c6:	e7e4      	b.n	8005692 <__pow5mult+0x6a>
 80056c8:	4630      	mov	r0, r6
 80056ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ce:	bf00      	nop
 80056d0:	0800662c 	.word	0x0800662c
 80056d4:	08006550 	.word	0x08006550
 80056d8:	080065d0 	.word	0x080065d0

080056dc <__lshift>:
 80056dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	460c      	mov	r4, r1
 80056e2:	6849      	ldr	r1, [r1, #4]
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	4607      	mov	r7, r0
 80056ee:	4691      	mov	r9, r2
 80056f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056f4:	f108 0601 	add.w	r6, r8, #1
 80056f8:	42b3      	cmp	r3, r6
 80056fa:	db0b      	blt.n	8005714 <__lshift+0x38>
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff fddf 	bl	80052c0 <_Balloc>
 8005702:	4605      	mov	r5, r0
 8005704:	b948      	cbnz	r0, 800571a <__lshift+0x3e>
 8005706:	4602      	mov	r2, r0
 8005708:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <__lshift+0xd0>)
 800570a:	4829      	ldr	r0, [pc, #164]	@ (80057b0 <__lshift+0xd4>)
 800570c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005710:	f000 fb94 	bl	8005e3c <__assert_func>
 8005714:	3101      	adds	r1, #1
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	e7ee      	b.n	80056f8 <__lshift+0x1c>
 800571a:	2300      	movs	r3, #0
 800571c:	f100 0114 	add.w	r1, r0, #20
 8005720:	f100 0210 	add.w	r2, r0, #16
 8005724:	4618      	mov	r0, r3
 8005726:	4553      	cmp	r3, sl
 8005728:	db33      	blt.n	8005792 <__lshift+0xb6>
 800572a:	6920      	ldr	r0, [r4, #16]
 800572c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005730:	f104 0314 	add.w	r3, r4, #20
 8005734:	f019 091f 	ands.w	r9, r9, #31
 8005738:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800573c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005740:	d02b      	beq.n	800579a <__lshift+0xbe>
 8005742:	f1c9 0e20 	rsb	lr, r9, #32
 8005746:	468a      	mov	sl, r1
 8005748:	2200      	movs	r2, #0
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	fa00 f009 	lsl.w	r0, r0, r9
 8005750:	4310      	orrs	r0, r2
 8005752:	f84a 0b04 	str.w	r0, [sl], #4
 8005756:	f853 2b04 	ldr.w	r2, [r3], #4
 800575a:	459c      	cmp	ip, r3
 800575c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005760:	d8f3      	bhi.n	800574a <__lshift+0x6e>
 8005762:	ebac 0304 	sub.w	r3, ip, r4
 8005766:	3b15      	subs	r3, #21
 8005768:	f023 0303 	bic.w	r3, r3, #3
 800576c:	3304      	adds	r3, #4
 800576e:	f104 0015 	add.w	r0, r4, #21
 8005772:	4584      	cmp	ip, r0
 8005774:	bf38      	it	cc
 8005776:	2304      	movcc	r3, #4
 8005778:	50ca      	str	r2, [r1, r3]
 800577a:	b10a      	cbz	r2, 8005780 <__lshift+0xa4>
 800577c:	f108 0602 	add.w	r6, r8, #2
 8005780:	3e01      	subs	r6, #1
 8005782:	4638      	mov	r0, r7
 8005784:	612e      	str	r6, [r5, #16]
 8005786:	4621      	mov	r1, r4
 8005788:	f7ff fdda 	bl	8005340 <_Bfree>
 800578c:	4628      	mov	r0, r5
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	f842 0f04 	str.w	r0, [r2, #4]!
 8005796:	3301      	adds	r3, #1
 8005798:	e7c5      	b.n	8005726 <__lshift+0x4a>
 800579a:	3904      	subs	r1, #4
 800579c:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80057a4:	459c      	cmp	ip, r3
 80057a6:	d8f9      	bhi.n	800579c <__lshift+0xc0>
 80057a8:	e7ea      	b.n	8005780 <__lshift+0xa4>
 80057aa:	bf00      	nop
 80057ac:	080065bf 	.word	0x080065bf
 80057b0:	080065d0 	.word	0x080065d0

080057b4 <__mcmp>:
 80057b4:	690a      	ldr	r2, [r1, #16]
 80057b6:	4603      	mov	r3, r0
 80057b8:	6900      	ldr	r0, [r0, #16]
 80057ba:	1a80      	subs	r0, r0, r2
 80057bc:	b530      	push	{r4, r5, lr}
 80057be:	d10e      	bne.n	80057de <__mcmp+0x2a>
 80057c0:	3314      	adds	r3, #20
 80057c2:	3114      	adds	r1, #20
 80057c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80057c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80057cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80057d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80057d4:	4295      	cmp	r5, r2
 80057d6:	d003      	beq.n	80057e0 <__mcmp+0x2c>
 80057d8:	d205      	bcs.n	80057e6 <__mcmp+0x32>
 80057da:	f04f 30ff 	mov.w	r0, #4294967295
 80057de:	bd30      	pop	{r4, r5, pc}
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d3f3      	bcc.n	80057cc <__mcmp+0x18>
 80057e4:	e7fb      	b.n	80057de <__mcmp+0x2a>
 80057e6:	2001      	movs	r0, #1
 80057e8:	e7f9      	b.n	80057de <__mcmp+0x2a>
	...

080057ec <__mdiff>:
 80057ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	4689      	mov	r9, r1
 80057f2:	4606      	mov	r6, r0
 80057f4:	4611      	mov	r1, r2
 80057f6:	4648      	mov	r0, r9
 80057f8:	4614      	mov	r4, r2
 80057fa:	f7ff ffdb 	bl	80057b4 <__mcmp>
 80057fe:	1e05      	subs	r5, r0, #0
 8005800:	d112      	bne.n	8005828 <__mdiff+0x3c>
 8005802:	4629      	mov	r1, r5
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff fd5b 	bl	80052c0 <_Balloc>
 800580a:	4602      	mov	r2, r0
 800580c:	b928      	cbnz	r0, 800581a <__mdiff+0x2e>
 800580e:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <__mdiff+0x120>)
 8005810:	f240 2137 	movw	r1, #567	@ 0x237
 8005814:	483e      	ldr	r0, [pc, #248]	@ (8005910 <__mdiff+0x124>)
 8005816:	f000 fb11 	bl	8005e3c <__assert_func>
 800581a:	2301      	movs	r3, #1
 800581c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005820:	4610      	mov	r0, r2
 8005822:	b003      	add	sp, #12
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	bfbc      	itt	lt
 800582a:	464b      	movlt	r3, r9
 800582c:	46a1      	movlt	r9, r4
 800582e:	4630      	mov	r0, r6
 8005830:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005834:	bfba      	itte	lt
 8005836:	461c      	movlt	r4, r3
 8005838:	2501      	movlt	r5, #1
 800583a:	2500      	movge	r5, #0
 800583c:	f7ff fd40 	bl	80052c0 <_Balloc>
 8005840:	4602      	mov	r2, r0
 8005842:	b918      	cbnz	r0, 800584c <__mdiff+0x60>
 8005844:	4b31      	ldr	r3, [pc, #196]	@ (800590c <__mdiff+0x120>)
 8005846:	f240 2145 	movw	r1, #581	@ 0x245
 800584a:	e7e3      	b.n	8005814 <__mdiff+0x28>
 800584c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005850:	6926      	ldr	r6, [r4, #16]
 8005852:	60c5      	str	r5, [r0, #12]
 8005854:	f109 0310 	add.w	r3, r9, #16
 8005858:	f109 0514 	add.w	r5, r9, #20
 800585c:	f104 0e14 	add.w	lr, r4, #20
 8005860:	f100 0b14 	add.w	fp, r0, #20
 8005864:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005868:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	46d9      	mov	r9, fp
 8005870:	f04f 0c00 	mov.w	ip, #0
 8005874:	9b01      	ldr	r3, [sp, #4]
 8005876:	f85e 0b04 	ldr.w	r0, [lr], #4
 800587a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	fa1f f38a 	uxth.w	r3, sl
 8005884:	4619      	mov	r1, r3
 8005886:	b283      	uxth	r3, r0
 8005888:	1acb      	subs	r3, r1, r3
 800588a:	0c00      	lsrs	r0, r0, #16
 800588c:	4463      	add	r3, ip
 800588e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005892:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005896:	b29b      	uxth	r3, r3
 8005898:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800589c:	4576      	cmp	r6, lr
 800589e:	f849 3b04 	str.w	r3, [r9], #4
 80058a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058a6:	d8e5      	bhi.n	8005874 <__mdiff+0x88>
 80058a8:	1b33      	subs	r3, r6, r4
 80058aa:	3b15      	subs	r3, #21
 80058ac:	f023 0303 	bic.w	r3, r3, #3
 80058b0:	3415      	adds	r4, #21
 80058b2:	3304      	adds	r3, #4
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	bf38      	it	cc
 80058b8:	2304      	movcc	r3, #4
 80058ba:	441d      	add	r5, r3
 80058bc:	445b      	add	r3, fp
 80058be:	461e      	mov	r6, r3
 80058c0:	462c      	mov	r4, r5
 80058c2:	4544      	cmp	r4, r8
 80058c4:	d30e      	bcc.n	80058e4 <__mdiff+0xf8>
 80058c6:	f108 0103 	add.w	r1, r8, #3
 80058ca:	1b49      	subs	r1, r1, r5
 80058cc:	f021 0103 	bic.w	r1, r1, #3
 80058d0:	3d03      	subs	r5, #3
 80058d2:	45a8      	cmp	r8, r5
 80058d4:	bf38      	it	cc
 80058d6:	2100      	movcc	r1, #0
 80058d8:	440b      	add	r3, r1
 80058da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058de:	b191      	cbz	r1, 8005906 <__mdiff+0x11a>
 80058e0:	6117      	str	r7, [r2, #16]
 80058e2:	e79d      	b.n	8005820 <__mdiff+0x34>
 80058e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80058e8:	46e6      	mov	lr, ip
 80058ea:	0c08      	lsrs	r0, r1, #16
 80058ec:	fa1c fc81 	uxtah	ip, ip, r1
 80058f0:	4471      	add	r1, lr
 80058f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80058f6:	b289      	uxth	r1, r1
 80058f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058fc:	f846 1b04 	str.w	r1, [r6], #4
 8005900:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005904:	e7dd      	b.n	80058c2 <__mdiff+0xd6>
 8005906:	3f01      	subs	r7, #1
 8005908:	e7e7      	b.n	80058da <__mdiff+0xee>
 800590a:	bf00      	nop
 800590c:	080065bf 	.word	0x080065bf
 8005910:	080065d0 	.word	0x080065d0

08005914 <__d2b>:
 8005914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005918:	460f      	mov	r7, r1
 800591a:	2101      	movs	r1, #1
 800591c:	ec59 8b10 	vmov	r8, r9, d0
 8005920:	4616      	mov	r6, r2
 8005922:	f7ff fccd 	bl	80052c0 <_Balloc>
 8005926:	4604      	mov	r4, r0
 8005928:	b930      	cbnz	r0, 8005938 <__d2b+0x24>
 800592a:	4602      	mov	r2, r0
 800592c:	4b23      	ldr	r3, [pc, #140]	@ (80059bc <__d2b+0xa8>)
 800592e:	4824      	ldr	r0, [pc, #144]	@ (80059c0 <__d2b+0xac>)
 8005930:	f240 310f 	movw	r1, #783	@ 0x30f
 8005934:	f000 fa82 	bl	8005e3c <__assert_func>
 8005938:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800593c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005940:	b10d      	cbz	r5, 8005946 <__d2b+0x32>
 8005942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	f1b8 0300 	subs.w	r3, r8, #0
 800594c:	d023      	beq.n	8005996 <__d2b+0x82>
 800594e:	4668      	mov	r0, sp
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	f7ff fd7c 	bl	800544e <__lo0bits>
 8005956:	e9dd 1200 	ldrd	r1, r2, [sp]
 800595a:	b1d0      	cbz	r0, 8005992 <__d2b+0x7e>
 800595c:	f1c0 0320 	rsb	r3, r0, #32
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	430b      	orrs	r3, r1
 8005966:	40c2      	lsrs	r2, r0
 8005968:	6163      	str	r3, [r4, #20]
 800596a:	9201      	str	r2, [sp, #4]
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	61a3      	str	r3, [r4, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2201      	moveq	r2, #1
 8005976:	2202      	movne	r2, #2
 8005978:	6122      	str	r2, [r4, #16]
 800597a:	b1a5      	cbz	r5, 80059a6 <__d2b+0x92>
 800597c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005980:	4405      	add	r5, r0
 8005982:	603d      	str	r5, [r7, #0]
 8005984:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005988:	6030      	str	r0, [r6, #0]
 800598a:	4620      	mov	r0, r4
 800598c:	b003      	add	sp, #12
 800598e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005992:	6161      	str	r1, [r4, #20]
 8005994:	e7ea      	b.n	800596c <__d2b+0x58>
 8005996:	a801      	add	r0, sp, #4
 8005998:	f7ff fd59 	bl	800544e <__lo0bits>
 800599c:	9b01      	ldr	r3, [sp, #4]
 800599e:	6163      	str	r3, [r4, #20]
 80059a0:	3020      	adds	r0, #32
 80059a2:	2201      	movs	r2, #1
 80059a4:	e7e8      	b.n	8005978 <__d2b+0x64>
 80059a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80059aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80059ae:	6038      	str	r0, [r7, #0]
 80059b0:	6918      	ldr	r0, [r3, #16]
 80059b2:	f7ff fd2d 	bl	8005410 <__hi0bits>
 80059b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059ba:	e7e5      	b.n	8005988 <__d2b+0x74>
 80059bc:	080065bf 	.word	0x080065bf
 80059c0:	080065d0 	.word	0x080065d0

080059c4 <__ssputs_r>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	688e      	ldr	r6, [r1, #8]
 80059ca:	461f      	mov	r7, r3
 80059cc:	42be      	cmp	r6, r7
 80059ce:	680b      	ldr	r3, [r1, #0]
 80059d0:	4682      	mov	sl, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	4690      	mov	r8, r2
 80059d6:	d82d      	bhi.n	8005a34 <__ssputs_r+0x70>
 80059d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059e0:	d026      	beq.n	8005a30 <__ssputs_r+0x6c>
 80059e2:	6965      	ldr	r5, [r4, #20]
 80059e4:	6909      	ldr	r1, [r1, #16]
 80059e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059ea:	eba3 0901 	sub.w	r9, r3, r1
 80059ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059f2:	1c7b      	adds	r3, r7, #1
 80059f4:	444b      	add	r3, r9
 80059f6:	106d      	asrs	r5, r5, #1
 80059f8:	429d      	cmp	r5, r3
 80059fa:	bf38      	it	cc
 80059fc:	461d      	movcc	r5, r3
 80059fe:	0553      	lsls	r3, r2, #21
 8005a00:	d527      	bpl.n	8005a52 <__ssputs_r+0x8e>
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7ff fbd0 	bl	80051a8 <_malloc_r>
 8005a08:	4606      	mov	r6, r0
 8005a0a:	b360      	cbz	r0, 8005a66 <__ssputs_r+0xa2>
 8005a0c:	6921      	ldr	r1, [r4, #16]
 8005a0e:	464a      	mov	r2, r9
 8005a10:	f000 fa06 	bl	8005e20 <memcpy>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	6126      	str	r6, [r4, #16]
 8005a22:	6165      	str	r5, [r4, #20]
 8005a24:	444e      	add	r6, r9
 8005a26:	eba5 0509 	sub.w	r5, r5, r9
 8005a2a:	6026      	str	r6, [r4, #0]
 8005a2c:	60a5      	str	r5, [r4, #8]
 8005a2e:	463e      	mov	r6, r7
 8005a30:	42be      	cmp	r6, r7
 8005a32:	d900      	bls.n	8005a36 <__ssputs_r+0x72>
 8005a34:	463e      	mov	r6, r7
 8005a36:	6820      	ldr	r0, [r4, #0]
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	f000 f9c6 	bl	8005dcc <memmove>
 8005a40:	68a3      	ldr	r3, [r4, #8]
 8005a42:	1b9b      	subs	r3, r3, r6
 8005a44:	60a3      	str	r3, [r4, #8]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	4433      	add	r3, r6
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a52:	462a      	mov	r2, r5
 8005a54:	f000 fa36 	bl	8005ec4 <_realloc_r>
 8005a58:	4606      	mov	r6, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1e0      	bne.n	8005a20 <__ssputs_r+0x5c>
 8005a5e:	6921      	ldr	r1, [r4, #16]
 8005a60:	4650      	mov	r0, sl
 8005a62:	f7ff fb2d 	bl	80050c0 <_free_r>
 8005a66:	230c      	movs	r3, #12
 8005a68:	f8ca 3000 	str.w	r3, [sl]
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a72:	81a3      	strh	r3, [r4, #12]
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	e7e9      	b.n	8005a4e <__ssputs_r+0x8a>
	...

08005a7c <_svfiprintf_r>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	4698      	mov	r8, r3
 8005a82:	898b      	ldrh	r3, [r1, #12]
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	b09d      	sub	sp, #116	@ 0x74
 8005a88:	4607      	mov	r7, r0
 8005a8a:	460d      	mov	r5, r1
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	d510      	bpl.n	8005ab2 <_svfiprintf_r+0x36>
 8005a90:	690b      	ldr	r3, [r1, #16]
 8005a92:	b973      	cbnz	r3, 8005ab2 <_svfiprintf_r+0x36>
 8005a94:	2140      	movs	r1, #64	@ 0x40
 8005a96:	f7ff fb87 	bl	80051a8 <_malloc_r>
 8005a9a:	6028      	str	r0, [r5, #0]
 8005a9c:	6128      	str	r0, [r5, #16]
 8005a9e:	b930      	cbnz	r0, 8005aae <_svfiprintf_r+0x32>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b01d      	add	sp, #116	@ 0x74
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	2340      	movs	r3, #64	@ 0x40
 8005ab0:	616b      	str	r3, [r5, #20]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005abc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac0:	2330      	movs	r3, #48	@ 0x30
 8005ac2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c60 <_svfiprintf_r+0x1e4>
 8005ac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005aca:	f04f 0901 	mov.w	r9, #1
 8005ace:	4623      	mov	r3, r4
 8005ad0:	469a      	mov	sl, r3
 8005ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad6:	b10a      	cbz	r2, 8005adc <_svfiprintf_r+0x60>
 8005ad8:	2a25      	cmp	r2, #37	@ 0x25
 8005ada:	d1f9      	bne.n	8005ad0 <_svfiprintf_r+0x54>
 8005adc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae0:	d00b      	beq.n	8005afa <_svfiprintf_r+0x7e>
 8005ae2:	465b      	mov	r3, fp
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff ff6b 	bl	80059c4 <__ssputs_r>
 8005aee:	3001      	adds	r0, #1
 8005af0:	f000 80a7 	beq.w	8005c42 <_svfiprintf_r+0x1c6>
 8005af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af6:	445a      	add	r2, fp
 8005af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005afa:	f89a 3000 	ldrb.w	r3, [sl]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 809f 	beq.w	8005c42 <_svfiprintf_r+0x1c6>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b0e:	f10a 0a01 	add.w	sl, sl, #1
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	9307      	str	r3, [sp, #28]
 8005b16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b1c:	4654      	mov	r4, sl
 8005b1e:	2205      	movs	r2, #5
 8005b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b24:	484e      	ldr	r0, [pc, #312]	@ (8005c60 <_svfiprintf_r+0x1e4>)
 8005b26:	f7fa fb53 	bl	80001d0 <memchr>
 8005b2a:	9a04      	ldr	r2, [sp, #16]
 8005b2c:	b9d8      	cbnz	r0, 8005b66 <_svfiprintf_r+0xea>
 8005b2e:	06d0      	lsls	r0, r2, #27
 8005b30:	bf44      	itt	mi
 8005b32:	2320      	movmi	r3, #32
 8005b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b38:	0711      	lsls	r1, r2, #28
 8005b3a:	bf44      	itt	mi
 8005b3c:	232b      	movmi	r3, #43	@ 0x2b
 8005b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b42:	f89a 3000 	ldrb.w	r3, [sl]
 8005b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b48:	d015      	beq.n	8005b76 <_svfiprintf_r+0xfa>
 8005b4a:	9a07      	ldr	r2, [sp, #28]
 8005b4c:	4654      	mov	r4, sl
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f04f 0c0a 	mov.w	ip, #10
 8005b54:	4621      	mov	r1, r4
 8005b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5a:	3b30      	subs	r3, #48	@ 0x30
 8005b5c:	2b09      	cmp	r3, #9
 8005b5e:	d94b      	bls.n	8005bf8 <_svfiprintf_r+0x17c>
 8005b60:	b1b0      	cbz	r0, 8005b90 <_svfiprintf_r+0x114>
 8005b62:	9207      	str	r2, [sp, #28]
 8005b64:	e014      	b.n	8005b90 <_svfiprintf_r+0x114>
 8005b66:	eba0 0308 	sub.w	r3, r0, r8
 8005b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	46a2      	mov	sl, r4
 8005b74:	e7d2      	b.n	8005b1c <_svfiprintf_r+0xa0>
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	9103      	str	r1, [sp, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfbb      	ittet	lt
 8005b82:	425b      	neglt	r3, r3
 8005b84:	f042 0202 	orrlt.w	r2, r2, #2
 8005b88:	9307      	strge	r3, [sp, #28]
 8005b8a:	9307      	strlt	r3, [sp, #28]
 8005b8c:	bfb8      	it	lt
 8005b8e:	9204      	strlt	r2, [sp, #16]
 8005b90:	7823      	ldrb	r3, [r4, #0]
 8005b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b94:	d10a      	bne.n	8005bac <_svfiprintf_r+0x130>
 8005b96:	7863      	ldrb	r3, [r4, #1]
 8005b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b9a:	d132      	bne.n	8005c02 <_svfiprintf_r+0x186>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	9203      	str	r2, [sp, #12]
 8005ba4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ba8:	3402      	adds	r4, #2
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c70 <_svfiprintf_r+0x1f4>
 8005bb0:	7821      	ldrb	r1, [r4, #0]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	f7fa fb0b 	bl	80001d0 <memchr>
 8005bba:	b138      	cbz	r0, 8005bcc <_svfiprintf_r+0x150>
 8005bbc:	9b04      	ldr	r3, [sp, #16]
 8005bbe:	eba0 000a 	sub.w	r0, r0, sl
 8005bc2:	2240      	movs	r2, #64	@ 0x40
 8005bc4:	4082      	lsls	r2, r0
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	3401      	adds	r4, #1
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd0:	4824      	ldr	r0, [pc, #144]	@ (8005c64 <_svfiprintf_r+0x1e8>)
 8005bd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bd6:	2206      	movs	r2, #6
 8005bd8:	f7fa fafa 	bl	80001d0 <memchr>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d036      	beq.n	8005c4e <_svfiprintf_r+0x1d2>
 8005be0:	4b21      	ldr	r3, [pc, #132]	@ (8005c68 <_svfiprintf_r+0x1ec>)
 8005be2:	bb1b      	cbnz	r3, 8005c2c <_svfiprintf_r+0x1b0>
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	3307      	adds	r3, #7
 8005be8:	f023 0307 	bic.w	r3, r3, #7
 8005bec:	3308      	adds	r3, #8
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf2:	4433      	add	r3, r6
 8005bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf6:	e76a      	b.n	8005ace <_svfiprintf_r+0x52>
 8005bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	2001      	movs	r0, #1
 8005c00:	e7a8      	b.n	8005b54 <_svfiprintf_r+0xd8>
 8005c02:	2300      	movs	r3, #0
 8005c04:	3401      	adds	r4, #1
 8005c06:	9305      	str	r3, [sp, #20]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f04f 0c0a 	mov.w	ip, #10
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c14:	3a30      	subs	r2, #48	@ 0x30
 8005c16:	2a09      	cmp	r2, #9
 8005c18:	d903      	bls.n	8005c22 <_svfiprintf_r+0x1a6>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0c6      	beq.n	8005bac <_svfiprintf_r+0x130>
 8005c1e:	9105      	str	r1, [sp, #20]
 8005c20:	e7c4      	b.n	8005bac <_svfiprintf_r+0x130>
 8005c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c26:	4604      	mov	r4, r0
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e7f0      	b.n	8005c0e <_svfiprintf_r+0x192>
 8005c2c:	ab03      	add	r3, sp, #12
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4b0e      	ldr	r3, [pc, #56]	@ (8005c6c <_svfiprintf_r+0x1f0>)
 8005c34:	a904      	add	r1, sp, #16
 8005c36:	4638      	mov	r0, r7
 8005c38:	f7fd fe98 	bl	800396c <_printf_float>
 8005c3c:	1c42      	adds	r2, r0, #1
 8005c3e:	4606      	mov	r6, r0
 8005c40:	d1d6      	bne.n	8005bf0 <_svfiprintf_r+0x174>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	065b      	lsls	r3, r3, #25
 8005c46:	f53f af2d 	bmi.w	8005aa4 <_svfiprintf_r+0x28>
 8005c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c4c:	e72c      	b.n	8005aa8 <_svfiprintf_r+0x2c>
 8005c4e:	ab03      	add	r3, sp, #12
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	462a      	mov	r2, r5
 8005c54:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <_svfiprintf_r+0x1f0>)
 8005c56:	a904      	add	r1, sp, #16
 8005c58:	4638      	mov	r0, r7
 8005c5a:	f7fe f91f 	bl	8003e9c <_printf_i>
 8005c5e:	e7ed      	b.n	8005c3c <_svfiprintf_r+0x1c0>
 8005c60:	08006728 	.word	0x08006728
 8005c64:	08006732 	.word	0x08006732
 8005c68:	0800396d 	.word	0x0800396d
 8005c6c:	080059c5 	.word	0x080059c5
 8005c70:	0800672e 	.word	0x0800672e

08005c74 <__sflush_r>:
 8005c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7c:	0716      	lsls	r6, r2, #28
 8005c7e:	4605      	mov	r5, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	d454      	bmi.n	8005d2e <__sflush_r+0xba>
 8005c84:	684b      	ldr	r3, [r1, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dc02      	bgt.n	8005c90 <__sflush_r+0x1c>
 8005c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dd48      	ble.n	8005d22 <__sflush_r+0xae>
 8005c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	d045      	beq.n	8005d22 <__sflush_r+0xae>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c9c:	682f      	ldr	r7, [r5, #0]
 8005c9e:	6a21      	ldr	r1, [r4, #32]
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	d030      	beq.n	8005d06 <__sflush_r+0x92>
 8005ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	0759      	lsls	r1, r3, #29
 8005caa:	d505      	bpl.n	8005cb8 <__sflush_r+0x44>
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cb2:	b10b      	cbz	r3, 8005cb8 <__sflush_r+0x44>
 8005cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cbc:	6a21      	ldr	r1, [r4, #32]
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b0      	blx	r6
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	d106      	bne.n	8005cd6 <__sflush_r+0x62>
 8005cc8:	6829      	ldr	r1, [r5, #0]
 8005cca:	291d      	cmp	r1, #29
 8005ccc:	d82b      	bhi.n	8005d26 <__sflush_r+0xb2>
 8005cce:	4a2a      	ldr	r2, [pc, #168]	@ (8005d78 <__sflush_r+0x104>)
 8005cd0:	410a      	asrs	r2, r1
 8005cd2:	07d6      	lsls	r6, r2, #31
 8005cd4:	d427      	bmi.n	8005d26 <__sflush_r+0xb2>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	6062      	str	r2, [r4, #4]
 8005cda:	04d9      	lsls	r1, r3, #19
 8005cdc:	6922      	ldr	r2, [r4, #16]
 8005cde:	6022      	str	r2, [r4, #0]
 8005ce0:	d504      	bpl.n	8005cec <__sflush_r+0x78>
 8005ce2:	1c42      	adds	r2, r0, #1
 8005ce4:	d101      	bne.n	8005cea <__sflush_r+0x76>
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	b903      	cbnz	r3, 8005cec <__sflush_r+0x78>
 8005cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cee:	602f      	str	r7, [r5, #0]
 8005cf0:	b1b9      	cbz	r1, 8005d22 <__sflush_r+0xae>
 8005cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cf6:	4299      	cmp	r1, r3
 8005cf8:	d002      	beq.n	8005d00 <__sflush_r+0x8c>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7ff f9e0 	bl	80050c0 <_free_r>
 8005d00:	2300      	movs	r3, #0
 8005d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d04:	e00d      	b.n	8005d22 <__sflush_r+0xae>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b0      	blx	r6
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	1c50      	adds	r0, r2, #1
 8005d10:	d1c9      	bne.n	8005ca6 <__sflush_r+0x32>
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0c6      	beq.n	8005ca6 <__sflush_r+0x32>
 8005d18:	2b1d      	cmp	r3, #29
 8005d1a:	d001      	beq.n	8005d20 <__sflush_r+0xac>
 8005d1c:	2b16      	cmp	r3, #22
 8005d1e:	d11e      	bne.n	8005d5e <__sflush_r+0xea>
 8005d20:	602f      	str	r7, [r5, #0]
 8005d22:	2000      	movs	r0, #0
 8005d24:	e022      	b.n	8005d6c <__sflush_r+0xf8>
 8005d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2a:	b21b      	sxth	r3, r3
 8005d2c:	e01b      	b.n	8005d66 <__sflush_r+0xf2>
 8005d2e:	690f      	ldr	r7, [r1, #16]
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	d0f6      	beq.n	8005d22 <__sflush_r+0xae>
 8005d34:	0793      	lsls	r3, r2, #30
 8005d36:	680e      	ldr	r6, [r1, #0]
 8005d38:	bf08      	it	eq
 8005d3a:	694b      	ldreq	r3, [r1, #20]
 8005d3c:	600f      	str	r7, [r1, #0]
 8005d3e:	bf18      	it	ne
 8005d40:	2300      	movne	r3, #0
 8005d42:	eba6 0807 	sub.w	r8, r6, r7
 8005d46:	608b      	str	r3, [r1, #8]
 8005d48:	f1b8 0f00 	cmp.w	r8, #0
 8005d4c:	dde9      	ble.n	8005d22 <__sflush_r+0xae>
 8005d4e:	6a21      	ldr	r1, [r4, #32]
 8005d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d52:	4643      	mov	r3, r8
 8005d54:	463a      	mov	r2, r7
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b0      	blx	r6
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	dc08      	bgt.n	8005d70 <__sflush_r+0xfc>
 8005d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d70:	4407      	add	r7, r0
 8005d72:	eba8 0800 	sub.w	r8, r8, r0
 8005d76:	e7e7      	b.n	8005d48 <__sflush_r+0xd4>
 8005d78:	dfbffffe 	.word	0xdfbffffe

08005d7c <_fflush_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	690b      	ldr	r3, [r1, #16]
 8005d80:	4605      	mov	r5, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	b913      	cbnz	r3, 8005d8c <_fflush_r+0x10>
 8005d86:	2500      	movs	r5, #0
 8005d88:	4628      	mov	r0, r5
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	b118      	cbz	r0, 8005d96 <_fflush_r+0x1a>
 8005d8e:	6a03      	ldr	r3, [r0, #32]
 8005d90:	b90b      	cbnz	r3, 8005d96 <_fflush_r+0x1a>
 8005d92:	f7fe fa2f 	bl	80041f4 <__sinit>
 8005d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0f3      	beq.n	8005d86 <_fflush_r+0xa>
 8005d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005da0:	07d0      	lsls	r0, r2, #31
 8005da2:	d404      	bmi.n	8005dae <_fflush_r+0x32>
 8005da4:	0599      	lsls	r1, r3, #22
 8005da6:	d402      	bmi.n	8005dae <_fflush_r+0x32>
 8005da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005daa:	f7fe fb3a 	bl	8004422 <__retarget_lock_acquire_recursive>
 8005dae:	4628      	mov	r0, r5
 8005db0:	4621      	mov	r1, r4
 8005db2:	f7ff ff5f 	bl	8005c74 <__sflush_r>
 8005db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005db8:	07da      	lsls	r2, r3, #31
 8005dba:	4605      	mov	r5, r0
 8005dbc:	d4e4      	bmi.n	8005d88 <_fflush_r+0xc>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	059b      	lsls	r3, r3, #22
 8005dc2:	d4e1      	bmi.n	8005d88 <_fflush_r+0xc>
 8005dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dc6:	f7fe fb2d 	bl	8004424 <__retarget_lock_release_recursive>
 8005dca:	e7dd      	b.n	8005d88 <_fflush_r+0xc>

08005dcc <memmove>:
 8005dcc:	4288      	cmp	r0, r1
 8005dce:	b510      	push	{r4, lr}
 8005dd0:	eb01 0402 	add.w	r4, r1, r2
 8005dd4:	d902      	bls.n	8005ddc <memmove+0x10>
 8005dd6:	4284      	cmp	r4, r0
 8005dd8:	4623      	mov	r3, r4
 8005dda:	d807      	bhi.n	8005dec <memmove+0x20>
 8005ddc:	1e43      	subs	r3, r0, #1
 8005dde:	42a1      	cmp	r1, r4
 8005de0:	d008      	beq.n	8005df4 <memmove+0x28>
 8005de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dea:	e7f8      	b.n	8005dde <memmove+0x12>
 8005dec:	4402      	add	r2, r0
 8005dee:	4601      	mov	r1, r0
 8005df0:	428a      	cmp	r2, r1
 8005df2:	d100      	bne.n	8005df6 <memmove+0x2a>
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dfe:	e7f7      	b.n	8005df0 <memmove+0x24>

08005e00 <_sbrk_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	@ (8005e1c <_sbrk_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fb fea2 	bl	8001b54 <_sbrk>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_sbrk_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_sbrk_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	200003fc 	.word	0x200003fc

08005e20 <memcpy>:
 8005e20:	440a      	add	r2, r1
 8005e22:	4291      	cmp	r1, r2
 8005e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e28:	d100      	bne.n	8005e2c <memcpy+0xc>
 8005e2a:	4770      	bx	lr
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e36:	4291      	cmp	r1, r2
 8005e38:	d1f9      	bne.n	8005e2e <memcpy+0xe>
 8005e3a:	bd10      	pop	{r4, pc}

08005e3c <__assert_func>:
 8005e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e3e:	4614      	mov	r4, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <__assert_func+0x2c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4605      	mov	r5, r0
 8005e48:	68d8      	ldr	r0, [r3, #12]
 8005e4a:	b954      	cbnz	r4, 8005e62 <__assert_func+0x26>
 8005e4c:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <__assert_func+0x30>)
 8005e4e:	461c      	mov	r4, r3
 8005e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e54:	9100      	str	r1, [sp, #0]
 8005e56:	462b      	mov	r3, r5
 8005e58:	4905      	ldr	r1, [pc, #20]	@ (8005e70 <__assert_func+0x34>)
 8005e5a:	f000 f86f 	bl	8005f3c <fiprintf>
 8005e5e:	f000 f87f 	bl	8005f60 <abort>
 8005e62:	4b04      	ldr	r3, [pc, #16]	@ (8005e74 <__assert_func+0x38>)
 8005e64:	e7f4      	b.n	8005e50 <__assert_func+0x14>
 8005e66:	bf00      	nop
 8005e68:	20000018 	.word	0x20000018
 8005e6c:	0800677e 	.word	0x0800677e
 8005e70:	08006750 	.word	0x08006750
 8005e74:	08006743 	.word	0x08006743

08005e78 <_calloc_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	fba1 5402 	umull	r5, r4, r1, r2
 8005e7e:	b93c      	cbnz	r4, 8005e90 <_calloc_r+0x18>
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7ff f991 	bl	80051a8 <_malloc_r>
 8005e86:	4606      	mov	r6, r0
 8005e88:	b928      	cbnz	r0, 8005e96 <_calloc_r+0x1e>
 8005e8a:	2600      	movs	r6, #0
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	220c      	movs	r2, #12
 8005e92:	6002      	str	r2, [r0, #0]
 8005e94:	e7f9      	b.n	8005e8a <_calloc_r+0x12>
 8005e96:	462a      	mov	r2, r5
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f7fe fa44 	bl	8004326 <memset>
 8005e9e:	e7f5      	b.n	8005e8c <_calloc_r+0x14>

08005ea0 <__ascii_mbtowc>:
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	b901      	cbnz	r1, 8005ea6 <__ascii_mbtowc+0x6>
 8005ea4:	a901      	add	r1, sp, #4
 8005ea6:	b142      	cbz	r2, 8005eba <__ascii_mbtowc+0x1a>
 8005ea8:	b14b      	cbz	r3, 8005ebe <__ascii_mbtowc+0x1e>
 8005eaa:	7813      	ldrb	r3, [r2, #0]
 8005eac:	600b      	str	r3, [r1, #0]
 8005eae:	7812      	ldrb	r2, [r2, #0]
 8005eb0:	1e10      	subs	r0, r2, #0
 8005eb2:	bf18      	it	ne
 8005eb4:	2001      	movne	r0, #1
 8005eb6:	b002      	add	sp, #8
 8005eb8:	4770      	bx	lr
 8005eba:	4610      	mov	r0, r2
 8005ebc:	e7fb      	b.n	8005eb6 <__ascii_mbtowc+0x16>
 8005ebe:	f06f 0001 	mvn.w	r0, #1
 8005ec2:	e7f8      	b.n	8005eb6 <__ascii_mbtowc+0x16>

08005ec4 <_realloc_r>:
 8005ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4615      	mov	r5, r2
 8005ecc:	460c      	mov	r4, r1
 8005ece:	b921      	cbnz	r1, 8005eda <_realloc_r+0x16>
 8005ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	f7ff b967 	b.w	80051a8 <_malloc_r>
 8005eda:	b92a      	cbnz	r2, 8005ee8 <_realloc_r+0x24>
 8005edc:	f7ff f8f0 	bl	80050c0 <_free_r>
 8005ee0:	2400      	movs	r4, #0
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee8:	f000 f841 	bl	8005f6e <_malloc_usable_size_r>
 8005eec:	4285      	cmp	r5, r0
 8005eee:	4606      	mov	r6, r0
 8005ef0:	d802      	bhi.n	8005ef8 <_realloc_r+0x34>
 8005ef2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ef6:	d8f4      	bhi.n	8005ee2 <_realloc_r+0x1e>
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4640      	mov	r0, r8
 8005efc:	f7ff f954 	bl	80051a8 <_malloc_r>
 8005f00:	4607      	mov	r7, r0
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d0ec      	beq.n	8005ee0 <_realloc_r+0x1c>
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	462a      	mov	r2, r5
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	bf28      	it	cs
 8005f0e:	4632      	movcs	r2, r6
 8005f10:	f7ff ff86 	bl	8005e20 <memcpy>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff f8d2 	bl	80050c0 <_free_r>
 8005f1c:	463c      	mov	r4, r7
 8005f1e:	e7e0      	b.n	8005ee2 <_realloc_r+0x1e>

08005f20 <__ascii_wctomb>:
 8005f20:	4603      	mov	r3, r0
 8005f22:	4608      	mov	r0, r1
 8005f24:	b141      	cbz	r1, 8005f38 <__ascii_wctomb+0x18>
 8005f26:	2aff      	cmp	r2, #255	@ 0xff
 8005f28:	d904      	bls.n	8005f34 <__ascii_wctomb+0x14>
 8005f2a:	228a      	movs	r2, #138	@ 0x8a
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	4770      	bx	lr
 8005f34:	700a      	strb	r2, [r1, #0]
 8005f36:	2001      	movs	r0, #1
 8005f38:	4770      	bx	lr
	...

08005f3c <fiprintf>:
 8005f3c:	b40e      	push	{r1, r2, r3}
 8005f3e:	b503      	push	{r0, r1, lr}
 8005f40:	4601      	mov	r1, r0
 8005f42:	ab03      	add	r3, sp, #12
 8005f44:	4805      	ldr	r0, [pc, #20]	@ (8005f5c <fiprintf+0x20>)
 8005f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	f000 f83f 	bl	8005fd0 <_vfiprintf_r>
 8005f52:	b002      	add	sp, #8
 8005f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f58:	b003      	add	sp, #12
 8005f5a:	4770      	bx	lr
 8005f5c:	20000018 	.word	0x20000018

08005f60 <abort>:
 8005f60:	b508      	push	{r3, lr}
 8005f62:	2006      	movs	r0, #6
 8005f64:	f000 fa08 	bl	8006378 <raise>
 8005f68:	2001      	movs	r0, #1
 8005f6a:	f7fb fd7b 	bl	8001a64 <_exit>

08005f6e <_malloc_usable_size_r>:
 8005f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f72:	1f18      	subs	r0, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfbc      	itt	lt
 8005f78:	580b      	ldrlt	r3, [r1, r0]
 8005f7a:	18c0      	addlt	r0, r0, r3
 8005f7c:	4770      	bx	lr

08005f7e <__sfputc_r>:
 8005f7e:	6893      	ldr	r3, [r2, #8]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	b410      	push	{r4}
 8005f86:	6093      	str	r3, [r2, #8]
 8005f88:	da08      	bge.n	8005f9c <__sfputc_r+0x1e>
 8005f8a:	6994      	ldr	r4, [r2, #24]
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	db01      	blt.n	8005f94 <__sfputc_r+0x16>
 8005f90:	290a      	cmp	r1, #10
 8005f92:	d103      	bne.n	8005f9c <__sfputc_r+0x1e>
 8005f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f98:	f000 b932 	b.w	8006200 <__swbuf_r>
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	1c58      	adds	r0, r3, #1
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	7019      	strb	r1, [r3, #0]
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <__sfputs_r>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	4614      	mov	r4, r2
 8005fb4:	18d5      	adds	r5, r2, r3
 8005fb6:	42ac      	cmp	r4, r5
 8005fb8:	d101      	bne.n	8005fbe <__sfputs_r+0x12>
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e007      	b.n	8005fce <__sfputs_r+0x22>
 8005fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7ff ffda 	bl	8005f7e <__sfputc_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d1f3      	bne.n	8005fb6 <__sfputs_r+0xa>
 8005fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fd0 <_vfiprintf_r>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	b09d      	sub	sp, #116	@ 0x74
 8005fd8:	4614      	mov	r4, r2
 8005fda:	4698      	mov	r8, r3
 8005fdc:	4606      	mov	r6, r0
 8005fde:	b118      	cbz	r0, 8005fe8 <_vfiprintf_r+0x18>
 8005fe0:	6a03      	ldr	r3, [r0, #32]
 8005fe2:	b90b      	cbnz	r3, 8005fe8 <_vfiprintf_r+0x18>
 8005fe4:	f7fe f906 	bl	80041f4 <__sinit>
 8005fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fea:	07d9      	lsls	r1, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_vfiprintf_r+0x2a>
 8005fee:	89ab      	ldrh	r3, [r5, #12]
 8005ff0:	059a      	lsls	r2, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_vfiprintf_r+0x2a>
 8005ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ff6:	f7fe fa14 	bl	8004422 <__retarget_lock_acquire_recursive>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	071b      	lsls	r3, r3, #28
 8005ffe:	d501      	bpl.n	8006004 <_vfiprintf_r+0x34>
 8006000:	692b      	ldr	r3, [r5, #16]
 8006002:	b99b      	cbnz	r3, 800602c <_vfiprintf_r+0x5c>
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f938 	bl	800627c <__swsetup_r>
 800600c:	b170      	cbz	r0, 800602c <_vfiprintf_r+0x5c>
 800600e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006010:	07dc      	lsls	r4, r3, #31
 8006012:	d504      	bpl.n	800601e <_vfiprintf_r+0x4e>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	b01d      	add	sp, #116	@ 0x74
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d4f7      	bmi.n	8006014 <_vfiprintf_r+0x44>
 8006024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006026:	f7fe f9fd 	bl	8004424 <__retarget_lock_release_recursive>
 800602a:	e7f3      	b.n	8006014 <_vfiprintf_r+0x44>
 800602c:	2300      	movs	r3, #0
 800602e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006030:	2320      	movs	r3, #32
 8006032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006036:	f8cd 800c 	str.w	r8, [sp, #12]
 800603a:	2330      	movs	r3, #48	@ 0x30
 800603c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061ec <_vfiprintf_r+0x21c>
 8006040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006044:	f04f 0901 	mov.w	r9, #1
 8006048:	4623      	mov	r3, r4
 800604a:	469a      	mov	sl, r3
 800604c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006050:	b10a      	cbz	r2, 8006056 <_vfiprintf_r+0x86>
 8006052:	2a25      	cmp	r2, #37	@ 0x25
 8006054:	d1f9      	bne.n	800604a <_vfiprintf_r+0x7a>
 8006056:	ebba 0b04 	subs.w	fp, sl, r4
 800605a:	d00b      	beq.n	8006074 <_vfiprintf_r+0xa4>
 800605c:	465b      	mov	r3, fp
 800605e:	4622      	mov	r2, r4
 8006060:	4629      	mov	r1, r5
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ffa2 	bl	8005fac <__sfputs_r>
 8006068:	3001      	adds	r0, #1
 800606a:	f000 80a7 	beq.w	80061bc <_vfiprintf_r+0x1ec>
 800606e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006070:	445a      	add	r2, fp
 8006072:	9209      	str	r2, [sp, #36]	@ 0x24
 8006074:	f89a 3000 	ldrb.w	r3, [sl]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 809f 	beq.w	80061bc <_vfiprintf_r+0x1ec>
 800607e:	2300      	movs	r3, #0
 8006080:	f04f 32ff 	mov.w	r2, #4294967295
 8006084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006088:	f10a 0a01 	add.w	sl, sl, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006094:	931a      	str	r3, [sp, #104]	@ 0x68
 8006096:	4654      	mov	r4, sl
 8006098:	2205      	movs	r2, #5
 800609a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609e:	4853      	ldr	r0, [pc, #332]	@ (80061ec <_vfiprintf_r+0x21c>)
 80060a0:	f7fa f896 	bl	80001d0 <memchr>
 80060a4:	9a04      	ldr	r2, [sp, #16]
 80060a6:	b9d8      	cbnz	r0, 80060e0 <_vfiprintf_r+0x110>
 80060a8:	06d1      	lsls	r1, r2, #27
 80060aa:	bf44      	itt	mi
 80060ac:	2320      	movmi	r3, #32
 80060ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060b2:	0713      	lsls	r3, r2, #28
 80060b4:	bf44      	itt	mi
 80060b6:	232b      	movmi	r3, #43	@ 0x2b
 80060b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060bc:	f89a 3000 	ldrb.w	r3, [sl]
 80060c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060c2:	d015      	beq.n	80060f0 <_vfiprintf_r+0x120>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4654      	mov	r4, sl
 80060c8:	2000      	movs	r0, #0
 80060ca:	f04f 0c0a 	mov.w	ip, #10
 80060ce:	4621      	mov	r1, r4
 80060d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d4:	3b30      	subs	r3, #48	@ 0x30
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d94b      	bls.n	8006172 <_vfiprintf_r+0x1a2>
 80060da:	b1b0      	cbz	r0, 800610a <_vfiprintf_r+0x13a>
 80060dc:	9207      	str	r2, [sp, #28]
 80060de:	e014      	b.n	800610a <_vfiprintf_r+0x13a>
 80060e0:	eba0 0308 	sub.w	r3, r0, r8
 80060e4:	fa09 f303 	lsl.w	r3, r9, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	46a2      	mov	sl, r4
 80060ee:	e7d2      	b.n	8006096 <_vfiprintf_r+0xc6>
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	1d19      	adds	r1, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9103      	str	r1, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bfbb      	ittet	lt
 80060fc:	425b      	neglt	r3, r3
 80060fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006102:	9307      	strge	r3, [sp, #28]
 8006104:	9307      	strlt	r3, [sp, #28]
 8006106:	bfb8      	it	lt
 8006108:	9204      	strlt	r2, [sp, #16]
 800610a:	7823      	ldrb	r3, [r4, #0]
 800610c:	2b2e      	cmp	r3, #46	@ 0x2e
 800610e:	d10a      	bne.n	8006126 <_vfiprintf_r+0x156>
 8006110:	7863      	ldrb	r3, [r4, #1]
 8006112:	2b2a      	cmp	r3, #42	@ 0x2a
 8006114:	d132      	bne.n	800617c <_vfiprintf_r+0x1ac>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9203      	str	r2, [sp, #12]
 800611e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006122:	3402      	adds	r4, #2
 8006124:	9305      	str	r3, [sp, #20]
 8006126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061fc <_vfiprintf_r+0x22c>
 800612a:	7821      	ldrb	r1, [r4, #0]
 800612c:	2203      	movs	r2, #3
 800612e:	4650      	mov	r0, sl
 8006130:	f7fa f84e 	bl	80001d0 <memchr>
 8006134:	b138      	cbz	r0, 8006146 <_vfiprintf_r+0x176>
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	eba0 000a 	sub.w	r0, r0, sl
 800613c:	2240      	movs	r2, #64	@ 0x40
 800613e:	4082      	lsls	r2, r0
 8006140:	4313      	orrs	r3, r2
 8006142:	3401      	adds	r4, #1
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614a:	4829      	ldr	r0, [pc, #164]	@ (80061f0 <_vfiprintf_r+0x220>)
 800614c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006150:	2206      	movs	r2, #6
 8006152:	f7fa f83d 	bl	80001d0 <memchr>
 8006156:	2800      	cmp	r0, #0
 8006158:	d03f      	beq.n	80061da <_vfiprintf_r+0x20a>
 800615a:	4b26      	ldr	r3, [pc, #152]	@ (80061f4 <_vfiprintf_r+0x224>)
 800615c:	bb1b      	cbnz	r3, 80061a6 <_vfiprintf_r+0x1d6>
 800615e:	9b03      	ldr	r3, [sp, #12]
 8006160:	3307      	adds	r3, #7
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	3308      	adds	r3, #8
 8006168:	9303      	str	r3, [sp, #12]
 800616a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616c:	443b      	add	r3, r7
 800616e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006170:	e76a      	b.n	8006048 <_vfiprintf_r+0x78>
 8006172:	fb0c 3202 	mla	r2, ip, r2, r3
 8006176:	460c      	mov	r4, r1
 8006178:	2001      	movs	r0, #1
 800617a:	e7a8      	b.n	80060ce <_vfiprintf_r+0xfe>
 800617c:	2300      	movs	r3, #0
 800617e:	3401      	adds	r4, #1
 8006180:	9305      	str	r3, [sp, #20]
 8006182:	4619      	mov	r1, r3
 8006184:	f04f 0c0a 	mov.w	ip, #10
 8006188:	4620      	mov	r0, r4
 800618a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800618e:	3a30      	subs	r2, #48	@ 0x30
 8006190:	2a09      	cmp	r2, #9
 8006192:	d903      	bls.n	800619c <_vfiprintf_r+0x1cc>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0c6      	beq.n	8006126 <_vfiprintf_r+0x156>
 8006198:	9105      	str	r1, [sp, #20]
 800619a:	e7c4      	b.n	8006126 <_vfiprintf_r+0x156>
 800619c:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a0:	4604      	mov	r4, r0
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7f0      	b.n	8006188 <_vfiprintf_r+0x1b8>
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	462a      	mov	r2, r5
 80061ac:	4b12      	ldr	r3, [pc, #72]	@ (80061f8 <_vfiprintf_r+0x228>)
 80061ae:	a904      	add	r1, sp, #16
 80061b0:	4630      	mov	r0, r6
 80061b2:	f7fd fbdb 	bl	800396c <_printf_float>
 80061b6:	4607      	mov	r7, r0
 80061b8:	1c78      	adds	r0, r7, #1
 80061ba:	d1d6      	bne.n	800616a <_vfiprintf_r+0x19a>
 80061bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061be:	07d9      	lsls	r1, r3, #31
 80061c0:	d405      	bmi.n	80061ce <_vfiprintf_r+0x1fe>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	059a      	lsls	r2, r3, #22
 80061c6:	d402      	bmi.n	80061ce <_vfiprintf_r+0x1fe>
 80061c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ca:	f7fe f92b 	bl	8004424 <__retarget_lock_release_recursive>
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	065b      	lsls	r3, r3, #25
 80061d2:	f53f af1f 	bmi.w	8006014 <_vfiprintf_r+0x44>
 80061d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d8:	e71e      	b.n	8006018 <_vfiprintf_r+0x48>
 80061da:	ab03      	add	r3, sp, #12
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	462a      	mov	r2, r5
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <_vfiprintf_r+0x228>)
 80061e2:	a904      	add	r1, sp, #16
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7fd fe59 	bl	8003e9c <_printf_i>
 80061ea:	e7e4      	b.n	80061b6 <_vfiprintf_r+0x1e6>
 80061ec:	08006728 	.word	0x08006728
 80061f0:	08006732 	.word	0x08006732
 80061f4:	0800396d 	.word	0x0800396d
 80061f8:	08005fad 	.word	0x08005fad
 80061fc:	0800672e 	.word	0x0800672e

08006200 <__swbuf_r>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	460e      	mov	r6, r1
 8006204:	4614      	mov	r4, r2
 8006206:	4605      	mov	r5, r0
 8006208:	b118      	cbz	r0, 8006212 <__swbuf_r+0x12>
 800620a:	6a03      	ldr	r3, [r0, #32]
 800620c:	b90b      	cbnz	r3, 8006212 <__swbuf_r+0x12>
 800620e:	f7fd fff1 	bl	80041f4 <__sinit>
 8006212:	69a3      	ldr	r3, [r4, #24]
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	071a      	lsls	r2, r3, #28
 800621a:	d501      	bpl.n	8006220 <__swbuf_r+0x20>
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	b943      	cbnz	r3, 8006232 <__swbuf_r+0x32>
 8006220:	4621      	mov	r1, r4
 8006222:	4628      	mov	r0, r5
 8006224:	f000 f82a 	bl	800627c <__swsetup_r>
 8006228:	b118      	cbz	r0, 8006232 <__swbuf_r+0x32>
 800622a:	f04f 37ff 	mov.w	r7, #4294967295
 800622e:	4638      	mov	r0, r7
 8006230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	6922      	ldr	r2, [r4, #16]
 8006236:	1a98      	subs	r0, r3, r2
 8006238:	6963      	ldr	r3, [r4, #20]
 800623a:	b2f6      	uxtb	r6, r6
 800623c:	4283      	cmp	r3, r0
 800623e:	4637      	mov	r7, r6
 8006240:	dc05      	bgt.n	800624e <__swbuf_r+0x4e>
 8006242:	4621      	mov	r1, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f7ff fd99 	bl	8005d7c <_fflush_r>
 800624a:	2800      	cmp	r0, #0
 800624c:	d1ed      	bne.n	800622a <__swbuf_r+0x2a>
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	3b01      	subs	r3, #1
 8006252:	60a3      	str	r3, [r4, #8]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	6022      	str	r2, [r4, #0]
 800625a:	701e      	strb	r6, [r3, #0]
 800625c:	6962      	ldr	r2, [r4, #20]
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	429a      	cmp	r2, r3
 8006262:	d004      	beq.n	800626e <__swbuf_r+0x6e>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	07db      	lsls	r3, r3, #31
 8006268:	d5e1      	bpl.n	800622e <__swbuf_r+0x2e>
 800626a:	2e0a      	cmp	r6, #10
 800626c:	d1df      	bne.n	800622e <__swbuf_r+0x2e>
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f7ff fd83 	bl	8005d7c <_fflush_r>
 8006276:	2800      	cmp	r0, #0
 8006278:	d0d9      	beq.n	800622e <__swbuf_r+0x2e>
 800627a:	e7d6      	b.n	800622a <__swbuf_r+0x2a>

0800627c <__swsetup_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <__swsetup_r+0xa8>)
 8006280:	4605      	mov	r5, r0
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	460c      	mov	r4, r1
 8006286:	b118      	cbz	r0, 8006290 <__swsetup_r+0x14>
 8006288:	6a03      	ldr	r3, [r0, #32]
 800628a:	b90b      	cbnz	r3, 8006290 <__swsetup_r+0x14>
 800628c:	f7fd ffb2 	bl	80041f4 <__sinit>
 8006290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006294:	0719      	lsls	r1, r3, #28
 8006296:	d422      	bmi.n	80062de <__swsetup_r+0x62>
 8006298:	06da      	lsls	r2, r3, #27
 800629a:	d407      	bmi.n	80062ac <__swsetup_r+0x30>
 800629c:	2209      	movs	r2, #9
 800629e:	602a      	str	r2, [r5, #0]
 80062a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	e033      	b.n	8006314 <__swsetup_r+0x98>
 80062ac:	0758      	lsls	r0, r3, #29
 80062ae:	d512      	bpl.n	80062d6 <__swsetup_r+0x5a>
 80062b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062b2:	b141      	cbz	r1, 80062c6 <__swsetup_r+0x4a>
 80062b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062b8:	4299      	cmp	r1, r3
 80062ba:	d002      	beq.n	80062c2 <__swsetup_r+0x46>
 80062bc:	4628      	mov	r0, r5
 80062be:	f7fe feff 	bl	80050c0 <_free_r>
 80062c2:	2300      	movs	r3, #0
 80062c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	2300      	movs	r3, #0
 80062d0:	6063      	str	r3, [r4, #4]
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	f043 0308 	orr.w	r3, r3, #8
 80062dc:	81a3      	strh	r3, [r4, #12]
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	b94b      	cbnz	r3, 80062f6 <__swsetup_r+0x7a>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ec:	d003      	beq.n	80062f6 <__swsetup_r+0x7a>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f883 	bl	80063fc <__smakebuf_r>
 80062f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062fa:	f013 0201 	ands.w	r2, r3, #1
 80062fe:	d00a      	beq.n	8006316 <__swsetup_r+0x9a>
 8006300:	2200      	movs	r2, #0
 8006302:	60a2      	str	r2, [r4, #8]
 8006304:	6962      	ldr	r2, [r4, #20]
 8006306:	4252      	negs	r2, r2
 8006308:	61a2      	str	r2, [r4, #24]
 800630a:	6922      	ldr	r2, [r4, #16]
 800630c:	b942      	cbnz	r2, 8006320 <__swsetup_r+0xa4>
 800630e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006312:	d1c5      	bne.n	80062a0 <__swsetup_r+0x24>
 8006314:	bd38      	pop	{r3, r4, r5, pc}
 8006316:	0799      	lsls	r1, r3, #30
 8006318:	bf58      	it	pl
 800631a:	6962      	ldrpl	r2, [r4, #20]
 800631c:	60a2      	str	r2, [r4, #8]
 800631e:	e7f4      	b.n	800630a <__swsetup_r+0x8e>
 8006320:	2000      	movs	r0, #0
 8006322:	e7f7      	b.n	8006314 <__swsetup_r+0x98>
 8006324:	20000018 	.word	0x20000018

08006328 <_raise_r>:
 8006328:	291f      	cmp	r1, #31
 800632a:	b538      	push	{r3, r4, r5, lr}
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	d904      	bls.n	800633c <_raise_r+0x14>
 8006332:	2316      	movs	r3, #22
 8006334:	6003      	str	r3, [r0, #0]
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800633e:	b112      	cbz	r2, 8006346 <_raise_r+0x1e>
 8006340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006344:	b94b      	cbnz	r3, 800635a <_raise_r+0x32>
 8006346:	4628      	mov	r0, r5
 8006348:	f000 f830 	bl	80063ac <_getpid_r>
 800634c:	4622      	mov	r2, r4
 800634e:	4601      	mov	r1, r0
 8006350:	4628      	mov	r0, r5
 8006352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006356:	f000 b817 	b.w	8006388 <_kill_r>
 800635a:	2b01      	cmp	r3, #1
 800635c:	d00a      	beq.n	8006374 <_raise_r+0x4c>
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	d103      	bne.n	800636a <_raise_r+0x42>
 8006362:	2316      	movs	r3, #22
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	2001      	movs	r0, #1
 8006368:	e7e7      	b.n	800633a <_raise_r+0x12>
 800636a:	2100      	movs	r1, #0
 800636c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006370:	4620      	mov	r0, r4
 8006372:	4798      	blx	r3
 8006374:	2000      	movs	r0, #0
 8006376:	e7e0      	b.n	800633a <_raise_r+0x12>

08006378 <raise>:
 8006378:	4b02      	ldr	r3, [pc, #8]	@ (8006384 <raise+0xc>)
 800637a:	4601      	mov	r1, r0
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	f7ff bfd3 	b.w	8006328 <_raise_r>
 8006382:	bf00      	nop
 8006384:	20000018 	.word	0x20000018

08006388 <_kill_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d07      	ldr	r5, [pc, #28]	@ (80063a8 <_kill_r+0x20>)
 800638c:	2300      	movs	r3, #0
 800638e:	4604      	mov	r4, r0
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	f7fb fb55 	bl	8001a44 <_kill>
 800639a:	1c43      	adds	r3, r0, #1
 800639c:	d102      	bne.n	80063a4 <_kill_r+0x1c>
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	b103      	cbz	r3, 80063a4 <_kill_r+0x1c>
 80063a2:	6023      	str	r3, [r4, #0]
 80063a4:	bd38      	pop	{r3, r4, r5, pc}
 80063a6:	bf00      	nop
 80063a8:	200003fc 	.word	0x200003fc

080063ac <_getpid_r>:
 80063ac:	f7fb bb42 	b.w	8001a34 <_getpid>

080063b0 <__swhatbuf_r>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	460c      	mov	r4, r1
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	b096      	sub	sp, #88	@ 0x58
 80063bc:	4615      	mov	r5, r2
 80063be:	461e      	mov	r6, r3
 80063c0:	da0d      	bge.n	80063de <__swhatbuf_r+0x2e>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2340      	movne	r3, #64	@ 0x40
 80063d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063d4:	2000      	movs	r0, #0
 80063d6:	6031      	str	r1, [r6, #0]
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	b016      	add	sp, #88	@ 0x58
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	466a      	mov	r2, sp
 80063e0:	f000 f848 	bl	8006474 <_fstat_r>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dbec      	blt.n	80063c2 <__swhatbuf_r+0x12>
 80063e8:	9901      	ldr	r1, [sp, #4]
 80063ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063f2:	4259      	negs	r1, r3
 80063f4:	4159      	adcs	r1, r3
 80063f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063fa:	e7eb      	b.n	80063d4 <__swhatbuf_r+0x24>

080063fc <__smakebuf_r>:
 80063fc:	898b      	ldrh	r3, [r1, #12]
 80063fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006400:	079d      	lsls	r5, r3, #30
 8006402:	4606      	mov	r6, r0
 8006404:	460c      	mov	r4, r1
 8006406:	d507      	bpl.n	8006418 <__smakebuf_r+0x1c>
 8006408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2301      	movs	r3, #1
 8006412:	6163      	str	r3, [r4, #20]
 8006414:	b003      	add	sp, #12
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006418:	ab01      	add	r3, sp, #4
 800641a:	466a      	mov	r2, sp
 800641c:	f7ff ffc8 	bl	80063b0 <__swhatbuf_r>
 8006420:	9f00      	ldr	r7, [sp, #0]
 8006422:	4605      	mov	r5, r0
 8006424:	4639      	mov	r1, r7
 8006426:	4630      	mov	r0, r6
 8006428:	f7fe febe 	bl	80051a8 <_malloc_r>
 800642c:	b948      	cbnz	r0, 8006442 <__smakebuf_r+0x46>
 800642e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006432:	059a      	lsls	r2, r3, #22
 8006434:	d4ee      	bmi.n	8006414 <__smakebuf_r+0x18>
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	e7e2      	b.n	8006408 <__smakebuf_r+0xc>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	6020      	str	r0, [r4, #0]
 8006446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	9b01      	ldr	r3, [sp, #4]
 800644e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006452:	b15b      	cbz	r3, 800646c <__smakebuf_r+0x70>
 8006454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006458:	4630      	mov	r0, r6
 800645a:	f000 f81d 	bl	8006498 <_isatty_r>
 800645e:	b128      	cbz	r0, 800646c <__smakebuf_r+0x70>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	431d      	orrs	r5, r3
 8006470:	81a5      	strh	r5, [r4, #12]
 8006472:	e7cf      	b.n	8006414 <__smakebuf_r+0x18>

08006474 <_fstat_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d07      	ldr	r5, [pc, #28]	@ (8006494 <_fstat_r+0x20>)
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	f7fb fb3f 	bl	8001b04 <_fstat>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	d102      	bne.n	8006490 <_fstat_r+0x1c>
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	b103      	cbz	r3, 8006490 <_fstat_r+0x1c>
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	bd38      	pop	{r3, r4, r5, pc}
 8006492:	bf00      	nop
 8006494:	200003fc 	.word	0x200003fc

08006498 <_isatty_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	@ (80064b4 <_isatty_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fb fb3e 	bl	8001b24 <_isatty>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_isatty_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_isatty_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	200003fc 	.word	0x200003fc

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
