
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007420  08007420  00008420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007808  08007808  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007808  08007808  00008808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007810  08007810  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007810  08007810  00008810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007814  08007814  00008814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007818  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091e8  2**0
                  CONTENTS
 10 .bss          00000238  200001e8  200001e8  000091e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000091e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008189  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222d  00000000  00000000  000113a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  000135d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e3  00000000  00000000  000140c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e96b  00000000  00000000  000148a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce9d  00000000  00000000  0003320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3609  00000000  00000000  000400ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e36b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f14  00000000  00000000  000e36f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000e760c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007404 	.word	0x08007404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08007404 	.word	0x08007404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	@ (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_DMA_Init+0x68>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <MX_DMA_Init+0x68>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_DMA_Init+0x68>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d7a:	f7ff ff65 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ffb5 	bl	8000cf4 <NVIC_EncodePriority>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2010      	movs	r0, #16
 8000d90:	f7ff ff86 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d94:	2010      	movs	r0, #16
 8000d96:	f7ff ff65 	bl	8000c64 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d9a:	f7ff ff55 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffa5 	bl	8000cf4 <NVIC_EncodePriority>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4619      	mov	r1, r3
 8000dae:	2011      	movs	r0, #17
 8000db0:	f7ff ff76 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000db4:	2011      	movs	r0, #17
 8000db6:	f7ff ff55 	bl	8000c64 <__NVIC_EnableIRQ>

}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000

08000df8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000dfc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e00:	f7ff ffe2 	bl	8000dc8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e04:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000e08:	f7ff ffde 	bl	8000dc8 <LL_AHB1_GRP1_EnableClock>

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <__NVIC_GetPriorityGrouping>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f96:	f023 0306 	bic.w	r3, r3, #6
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	60da      	str	r2, [r3, #12]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60da      	str	r2, [r3, #12]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d101      	bne.n	8000fea <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b04      	cmp	r3, #4
 800100a:	d101      	bne.n	8001010 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b20      	cmp	r3, #32
 8001030:	d101      	bne.n	8001036 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001054:	2b40      	cmp	r3, #64	@ 0x40
 8001056:	d101      	bne.n	800105c <LL_I2C_IsActiveFlag_TC+0x18>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <LL_I2C_IsActiveFlag_TC+0x1a>
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f043 0220 	orr.w	r2, r3, #32
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	61da      	str	r2, [r3, #28]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	605a      	str	r2, [r3, #4]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010e6:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010f0:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	4313      	orrs	r3, r2
 80010fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <LL_I2C_HandleTransfer+0x5c>)
 800110e:	430b      	orrs	r3, r1
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	03ff7bff 	.word	0x03ff7bff

0800112c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001138:	b2db      	uxtb	r3, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_AHB1_GRP1_EnableClock>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	4907      	ldr	r1, [pc, #28]	@ (8001190 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4013      	ands	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000

08001194 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011aa:	69da      	ldr	r2, [r3, #28]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000

080011c4 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	@ 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011ee:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80011f2:	f7ff ffb7 	bl	8001164 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011f6:	23c0      	movs	r3, #192	@ 0xc0
 80011f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001202:	2301      	movs	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800120a:	2304      	movs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4821      	ldr	r0, [pc, #132]	@ (8001298 <MX_I2C1_Init+0xd4>)
 8001214:	f001 fca8 	bl	8002b68 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001218:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800121c:	f7ff ffba 	bl	8001194 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN I2C1_Init 1 */
    NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001220:	f7ff fdf6 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8001224:	4603      	mov	r3, r0
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fe46 	bl	8000ebc <NVIC_EncodePriority>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	201f      	movs	r0, #31
 8001236:	f7ff fe17 	bl	8000e68 <__NVIC_SetPriority>
    NVIC_EnableIRQ(I2C1_EV_IRQn);
 800123a:	201f      	movs	r0, #31
 800123c:	f7ff fdf6 	bl	8000e2c <__NVIC_EnableIRQ>

    /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001240:	4816      	ldr	r0, [pc, #88]	@ (800129c <MX_I2C1_Init+0xd8>)
 8001242:	f7ff ff22 	bl	800108a <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001246:	4815      	ldr	r0, [pc, #84]	@ (800129c <MX_I2C1_Init+0xd8>)
 8001248:	f7ff feb3 	bl	8000fb2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800124c:	4813      	ldr	r0, [pc, #76]	@ (800129c <MX_I2C1_Init+0xd8>)
 800124e:	f7ff fe88 	bl	8000f62 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <MX_I2C1_Init+0xd8>)
 8001254:	f7ff fe75 	bl	8000f42 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <MX_I2C1_Init+0xdc>)
 800125e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4808      	ldr	r0, [pc, #32]	@ (800129c <MX_I2C1_Init+0xd8>)
 800127c:	f001 fd87 	bl	8002d8e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_I2C1_Init+0xd8>)
 8001286:	f7ff fe7c 	bl	8000f82 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_I2C1_Init+0xd8>)
 800128c:	f7ff fe49 	bl	8000f22 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3738      	adds	r7, #56	@ 0x38
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	48000400 	.word	0x48000400
 800129c:	40005400 	.word	0x40005400
 80012a0:	2000090e 	.word	0x2000090e

080012a4 <i2c_master_write>:

/* USER CODE BEGIN 1 */


void i2c_master_write(uint8_t slave_address, uint8_t register_address, uint8_t* data, uint8_t size) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	603a      	str	r2, [r7, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	460b      	mov	r3, r1
 80012b4:	71bb      	strb	r3, [r7, #6]
 80012b6:	4613      	mov	r3, r2
 80012b8:	717b      	strb	r3, [r7, #5]

	if(size > 1) {
 80012ba:	797b      	ldrb	r3, [r7, #5]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d902      	bls.n	80012c6 <i2c_master_write+0x22>
		register_address = register_address + 128;
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	3b80      	subs	r3, #128	@ 0x80
 80012c4:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, size + 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 80012c6:	79f9      	ldrb	r1, [r7, #7]
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	3301      	adds	r3, #1
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <i2c_master_write+0xb8>)
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2300      	movs	r3, #0
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	4821      	ldr	r0, [pc, #132]	@ (8001360 <i2c_master_write+0xbc>)
 80012dc:	f7ff fef6 	bl	80010cc <LL_I2C_HandleTransfer>
    while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80012e0:	bf00      	nop
 80012e2:	481f      	ldr	r0, [pc, #124]	@ (8001360 <i2c_master_write+0xbc>)
 80012e4:	f7ff fe75 	bl	8000fd2 <LL_I2C_IsActiveFlag_TXIS>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <i2c_master_write+0x3e>
    LL_I2C_TransmitData8(I2C1, register_address);
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	4619      	mov	r1, r3
 80012f2:	481b      	ldr	r0, [pc, #108]	@ (8001360 <i2c_master_write+0xbc>)
 80012f4:	f7ff ff27 	bl	8001146 <LL_I2C_TransmitData8>

    for (uint8_t i = 0; i < size; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e011      	b.n	8001322 <i2c_master_write+0x7e>
		while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80012fe:	bf00      	nop
 8001300:	4817      	ldr	r0, [pc, #92]	@ (8001360 <i2c_master_write+0xbc>)
 8001302:	f7ff fe66 	bl	8000fd2 <LL_I2C_IsActiveFlag_TXIS>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f9      	beq.n	8001300 <i2c_master_write+0x5c>
		LL_I2C_TransmitData8(I2C1, data[i]);
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4812      	ldr	r0, [pc, #72]	@ (8001360 <i2c_master_write+0xbc>)
 8001318:	f7ff ff15 	bl	8001146 <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < size; i++) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	3301      	adds	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3e9      	bcc.n	80012fe <i2c_master_write+0x5a>
    }

    while (!LL_I2C_IsActiveFlag_TC(I2C1));
 800132a:	bf00      	nop
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <i2c_master_write+0xbc>)
 800132e:	f7ff fe89 	bl	8001044 <LL_I2C_IsActiveFlag_TC>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f9      	beq.n	800132c <i2c_master_write+0x88>
	LL_I2C_GenerateStopCondition(I2C1);
 8001338:	4809      	ldr	r0, [pc, #36]	@ (8001360 <i2c_master_write+0xbc>)
 800133a:	f7ff feb6 	bl	80010aa <LL_I2C_GenerateStopCondition>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800133e:	bf00      	nop
 8001340:	4807      	ldr	r0, [pc, #28]	@ (8001360 <i2c_master_write+0xbc>)
 8001342:	f7ff fe6c 	bl	800101e <LL_I2C_IsActiveFlag_STOP>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f9      	beq.n	8001340 <i2c_master_write+0x9c>
	LL_I2C_ClearFlag_STOP(I2C1);
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <i2c_master_write+0xbc>)
 800134e:	f7ff fe8c 	bl	800106a <LL_I2C_ClearFlag_STOP>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	80002000 	.word	0x80002000
 8001360:	40005400 	.word	0x40005400

08001364 <i2c_master_read>:

void i2c_master_read(uint8_t slave_address, uint8_t register_address, uint8_t* data, uint8_t size) {
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b087      	sub	sp, #28
 8001368:	af02      	add	r7, sp, #8
 800136a:	603a      	str	r2, [r7, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	460b      	mov	r3, r1
 8001374:	71bb      	strb	r3, [r7, #6]
 8001376:	4613      	mov	r3, r2
 8001378:	717b      	strb	r3, [r7, #5]

	if(size > 1) {
 800137a:	797b      	ldrb	r3, [r7, #5]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d902      	bls.n	8001386 <i2c_master_read+0x22>
		register_address = register_address + 128;
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	3b80      	subs	r3, #128	@ 0x80
 8001384:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8001386:	79f9      	ldrb	r1, [r7, #7]
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <i2c_master_read+0xc4>)
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	2200      	movs	r2, #0
 8001394:	4825      	ldr	r0, [pc, #148]	@ (800142c <i2c_master_read+0xc8>)
 8001396:	f7ff fe99 	bl	80010cc <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 800139a:	bf00      	nop
 800139c:	4823      	ldr	r0, [pc, #140]	@ (800142c <i2c_master_read+0xc8>)
 800139e:	f7ff fe18 	bl	8000fd2 <LL_I2C_IsActiveFlag_TXIS>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f9      	beq.n	800139c <i2c_master_read+0x38>
	LL_I2C_TransmitData8(I2C1, register_address);
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	4619      	mov	r1, r3
 80013ac:	481f      	ldr	r0, [pc, #124]	@ (800142c <i2c_master_read+0xc8>)
 80013ae:	f7ff feca 	bl	8001146 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TC(I2C1)){};
 80013b2:	bf00      	nop
 80013b4:	481d      	ldr	r0, [pc, #116]	@ (800142c <i2c_master_read+0xc8>)
 80013b6:	f7ff fe45 	bl	8001044 <LL_I2C_IsActiveFlag_TC>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f9      	beq.n	80013b4 <i2c_master_read+0x50>

	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, size, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_READ);
 80013c0:	79f9      	ldrb	r1, [r7, #7]
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <i2c_master_read+0xcc>)
 80013c6:	9201      	str	r2, [sp, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4817      	ldr	r0, [pc, #92]	@ (800142c <i2c_master_read+0xc8>)
 80013d0:	f7ff fe7c 	bl	80010cc <LL_I2C_HandleTransfer>
	for (uint8_t i = 0; i < size; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e011      	b.n	80013fe <i2c_master_read+0x9a>
	{
		while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80013da:	bf00      	nop
 80013dc:	4813      	ldr	r0, [pc, #76]	@ (800142c <i2c_master_read+0xc8>)
 80013de:	f7ff fe0b 	bl	8000ff8 <LL_I2C_IsActiveFlag_RXNE>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f9      	beq.n	80013dc <i2c_master_read+0x78>
		data[i] = LL_I2C_ReceiveData8(I2C1);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	18d4      	adds	r4, r2, r3
 80013ee:	480f      	ldr	r0, [pc, #60]	@ (800142c <i2c_master_read+0xc8>)
 80013f0:	f7ff fe9c 	bl	800112c <LL_I2C_ReceiveData8>
 80013f4:	4603      	mov	r3, r0
 80013f6:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < size; i++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	797b      	ldrb	r3, [r7, #5]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3e9      	bcc.n	80013da <i2c_master_read+0x76>
	}

	LL_I2C_GenerateStopCondition(I2C1);
 8001406:	4809      	ldr	r0, [pc, #36]	@ (800142c <i2c_master_read+0xc8>)
 8001408:	f7ff fe4f 	bl	80010aa <LL_I2C_GenerateStopCondition>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800140c:	bf00      	nop
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <i2c_master_read+0xc8>)
 8001410:	f7ff fe05 	bl	800101e <LL_I2C_IsActiveFlag_STOP>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f9      	beq.n	800140e <i2c_master_read+0xaa>
	LL_I2C_ClearFlag_STOP(I2C1);
 800141a:	4804      	ldr	r0, [pc, #16]	@ (800142c <i2c_master_read+0xc8>)
 800141c:	f7ff fe25 	bl	800106a <LL_I2C_ClearFlag_STOP>
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	80002000 	.word	0x80002000
 800142c:	40005400 	.word	0x40005400
 8001430:	80002400 	.word	0x80002400

08001434 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <__NVIC_SetPriorityGrouping>:
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <LL_RCC_HSI_Enable+0x1c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <LL_RCC_HSI_Enable+0x1c>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <LL_RCC_HSI_IsReady+0x20>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000

080014d0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <LL_RCC_SetSysClkSource+0x24>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 0203 	bic.w	r2, r3, #3
 800150c:	4904      	ldr	r1, [pc, #16]	@ (8001520 <LL_RCC_SetSysClkSource+0x24>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <LL_RCC_GetSysClkSource+0x18>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <LL_RCC_SetAHBPrescaler+0x24>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001550:	4904      	ldr	r1, [pc, #16]	@ (8001564 <LL_RCC_SetAHBPrescaler+0x24>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000

08001568 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001578:	4904      	ldr	r1, [pc, #16]	@ (800158c <LL_RCC_SetAPB1Prescaler+0x24>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000

08001590 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015a0:	4904      	ldr	r1, [pc, #16]	@ (80015b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <LL_RCC_SetI2CClockSource+0x2c>)
 80015c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0e1b      	lsrs	r3, r3, #24
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80015d2:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <LL_RCC_SetI2CClockSource+0x2c>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_APB1_GRP1_EnableClock>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	4907      	ldr	r1, [pc, #28]	@ (8001614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015fe:	69da      	ldr	r2, [r3, #28]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000

08001618 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	4907      	ldr	r1, [pc, #28]	@ (8001644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4313      	orrs	r3, r2
 800162a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <LL_APB2_GRP1_EnableClock+0x2c>)
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <LL_FLASH_SetLatency+0x24>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 0207 	bic.w	r2, r3, #7
 8001658:	4904      	ldr	r1, [pc, #16]	@ (800166c <LL_FLASH_SetLatency+0x24>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40022000 	.word	0x40022000

08001670 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <LL_FLASH_GetLatency+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <main>:
sensor_data data;
float initial_pressure;

void SystemClock_Config(void);

int main(void) {
 800168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001690:	b089      	sub	sp, #36	@ 0x24
 8001692:	af08      	add	r7, sp, #32
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff ffbf 	bl	8001618 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800169a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800169e:	f7ff ffa3 	bl	80015e8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7ff fece 	bl	8001444 <__NVIC_SetPriorityGrouping>

	HAL_Init();
 80016a8:	f001 f81a 	bl	80026e0 <HAL_Init>

	SystemClock_Config();
 80016ac:	f000 f872 	bl	8001794 <SystemClock_Config>

	MX_GPIO_Init();
 80016b0:	f7ff fba2 	bl	8000df8 <MX_GPIO_Init>
	MX_DMA_Init();
 80016b4:	f7ff fb52 	bl	8000d5c <MX_DMA_Init>
	MX_I2C1_Init();
 80016b8:	f7ff fd84 	bl	80011c4 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80016bc:	f000 fe98 	bl	80023f0 <MX_USART2_UART_Init>

	if(!HTS221_Init(i2c_master_read, i2c_master_write))
 80016c0:	492e      	ldr	r1, [pc, #184]	@ (800177c <main+0xf0>)
 80016c2:	482f      	ldr	r0, [pc, #188]	@ (8001780 <main+0xf4>)
 80016c4:	f001 feb8 	bl	8003438 <HTS221_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d04e      	beq.n	800176c <main+0xe0>
		return;



	if(!LPS25HB_Init(i2c_master_read, i2c_master_write))
 80016ce:	492b      	ldr	r1, [pc, #172]	@ (800177c <main+0xf0>)
 80016d0:	482b      	ldr	r0, [pc, #172]	@ (8001780 <main+0xf4>)
 80016d2:	f002 f84d 	bl	8003770 <LPS25HB_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d049      	beq.n	8001770 <main+0xe4>
		return;

	initial_pressure = LPS25HB_get_pressure();
 80016dc:	f002 f890 	bl	8003800 <LPS25HB_get_pressure>
 80016e0:	eef0 7a40 	vmov.f32	s15, s0
 80016e4:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <main+0xf8>)
 80016e6:	edc3 7a00 	vstr	s15, [r3]

	while (1) {
		LL_mDelay(100);
 80016ea:	2064      	movs	r0, #100	@ 0x64
 80016ec:	f001 fe0e 	bl	800330c <LL_mDelay>

		get_sensor_data();
 80016f0:	f000 f88e 	bl	8001810 <get_sensor_data>

		memset(formated_text, '\0', sizeof(formated_text));
 80016f4:	221e      	movs	r2, #30
 80016f6:	2100      	movs	r1, #0
 80016f8:	4823      	ldr	r0, [pc, #140]	@ (8001788 <main+0xfc>)
 80016fa:	f002 fe5a 	bl	80043b2 <memset>

		sprintf(formated_text, "%.1f,%.1f,%.d,%.2f,%.2f\n\r", data.temperature_l, data.temperature_h, data.humidity, data.pressure, data.height);
 80016fe:	4b23      	ldr	r3, [pc, #140]	@ (800178c <main+0x100>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff20 	bl	8000548 <__aeabi_f2d>
 8001708:	4682      	mov	sl, r0
 800170a:	468b      	mov	fp, r1
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <main+0x100>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	4604      	mov	r4, r0
 8001718:	460d      	mov	r5, r1
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <main+0x100>)
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	461e      	mov	r6, r3
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <main+0x100>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff0f 	bl	8000548 <__aeabi_f2d>
 800172a:	4680      	mov	r8, r0
 800172c:	4689      	mov	r9, r1
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <main+0x100>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001740:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001744:	9602      	str	r6, [sp, #8]
 8001746:	e9cd 4500 	strd	r4, r5, [sp]
 800174a:	4652      	mov	r2, sl
 800174c:	465b      	mov	r3, fp
 800174e:	4910      	ldr	r1, [pc, #64]	@ (8001790 <main+0x104>)
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <main+0xfc>)
 8001752:	f002 fdcb 	bl	80042ec <siprintf>
		USART2_PutBuffer((uint8_t*)formated_text, strlen(formated_text));
 8001756:	480c      	ldr	r0, [pc, #48]	@ (8001788 <main+0xfc>)
 8001758:	f7fe fd8a 	bl	8000270 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <main+0xfc>)
 8001764:	f000 ff72 	bl	800264c <USART2_PutBuffer>
		LL_mDelay(100);
 8001768:	bf00      	nop
 800176a:	e7be      	b.n	80016ea <main+0x5e>
		return;
 800176c:	bf00      	nop
 800176e:	e000      	b.n	8001772 <main+0xe6>
		return;
 8001770:	bf00      	nop
	}

}
 8001772:	4618      	mov	r0, r3
 8001774:	3704      	adds	r7, #4
 8001776:	46bd      	mov	sp, r7
 8001778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177c:	080012a5 	.word	0x080012a5
 8001780:	08001365 	.word	0x08001365
 8001784:	20000238 	.word	0x20000238
 8001788:	20000204 	.word	0x20000204
 800178c:	20000224 	.word	0x20000224
 8001790:	08007420 	.word	0x08007420

08001794 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff55 	bl	8001648 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800179e:	bf00      	nop
 80017a0:	f7ff ff66 	bl	8001670 <LL_FLASH_GetLatency>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1fa      	bne.n	80017a0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80017aa:	f7ff fe6f 	bl	800148c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017ae:	bf00      	nop
 80017b0:	f7ff fe7c 	bl	80014ac <LL_RCC_HSI_IsReady>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d1fa      	bne.n	80017b0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80017ba:	2010      	movs	r0, #16
 80017bc:	f7ff fe88 	bl	80014d0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff febd 	bl	8001540 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fece 	bl	8001568 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fedf 	bl	8001590 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fe92 	bl	80014fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80017d8:	bf00      	nop
 80017da:	f7ff fea3 	bl	8001524 <LL_RCC_GetSysClkSource>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fa      	bne.n	80017da <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <SystemClock_Config+0x74>)
 80017e6:	f001 fdb7 	bl	8003358 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	200f      	movs	r0, #15
 80017ec:	f000 ff8e 	bl	800270c <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017f6:	f000 f865 	bl	80018c4 <Error_Handler>
  }
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80017fa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80017fe:	f7ff fedb 	bl	80015b8 <LL_RCC_SetI2CClockSource>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	007a1200 	.word	0x007a1200
 800180c:	00000000 	.word	0x00000000

08001810 <get_sensor_data>:

void get_sensor_data(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	data.temperature_h = HTS221_get_temperature();
 8001814:	f001 feae 	bl	8003574 <HTS221_get_temperature>
 8001818:	eef0 7a40 	vmov.f32	s15, s0
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <get_sensor_data+0xa8>)
 800181e:	edc3 7a00 	vstr	s15, [r3]
	data.temperature_l = LPS25HB_get_temperature();
 8001822:	f002 f819 	bl	8003858 <LPS25HB_get_temperature>
 8001826:	eef0 7a40 	vmov.f32	s15, s0
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <get_sensor_data+0xa8>)
 800182c:	edc3 7a01 	vstr	s15, [r3, #4]
	data.pressure = LPS25HB_get_pressure();
 8001830:	f001 ffe6 	bl	8003800 <LPS25HB_get_pressure>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <get_sensor_data+0xa8>)
 800183a:	edc3 7a03 	vstr	s15, [r3, #12]
	data.height = (float)44330.00 * (1 - pow(data.pressure / initial_pressure, 1 / 5.255)); //15, 10, klesa tlak
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <get_sensor_data+0xa8>)
 8001840:	ed93 7a03 	vldr	s14, [r3, #12]
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <get_sensor_data+0xac>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800184e:	ee16 0a90 	vmov	r0, s13
 8001852:	f7fe fe79 	bl	8000548 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 80018a8 <get_sensor_data+0x98>
 800185e:	ec43 2b10 	vmov	d0, r2, r3
 8001862:	f004 fe71 	bl	8006548 <pow>
 8001866:	ec53 2b10 	vmov	r2, r3, d0
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	4914      	ldr	r1, [pc, #80]	@ (80018c0 <get_sensor_data+0xb0>)
 8001870:	f7fe fd0a 	bl	8000288 <__aeabi_dsub>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	a30c      	add	r3, pc, #48	@ (adr r3, 80018b0 <get_sensor_data+0xa0>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f98b 	bl	8000ba8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <get_sensor_data+0xa8>)
 8001896:	6113      	str	r3, [r2, #16]
	data.humidity = HTS221_get_humidity();
 8001898:	f001 fe0a 	bl	80034b0 <HTS221_get_humidity>
 800189c:	4603      	mov	r3, r0
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <get_sensor_data+0xa8>)
 80018a2:	721a      	strb	r2, [r3, #8]
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	ccd9456c 	.word	0xccd9456c
 80018ac:	3fc85b95 	.word	0x3fc85b95
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40e5a540 	.word	0x40e5a540
 80018b8:	20000224 	.word	0x20000224
 80018bc:	20000238 	.word	0x20000238
 80018c0:	3ff00000 	.word	0x3ff00000

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_MspInit+0x44>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	4a0e      	ldr	r2, [pc, #56]	@ (8001914 <HAL_MspInit+0x44>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6193      	str	r3, [r2, #24]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <HAL_MspInit+0x44>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_MspInit+0x44>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <HAL_MspInit+0x44>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_MspInit+0x44>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <LL_DMA_DisableChannel+0x3c>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	3a01      	subs	r2, #1
 8001936:	4907      	ldr	r1, [pc, #28]	@ (8001954 <LL_DMA_DisableChannel+0x3c>)
 8001938:	5c8a      	ldrb	r2, [r1, r2]
 800193a:	4611      	mov	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	440a      	add	r2, r1
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	0800743c 	.word	0x0800743c

08001958 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019de:	605a      	str	r2, [r3, #4]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fa:	605a      	str	r2, [r3, #4]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a16:	605a      	str	r2, [r3, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d101      	bne.n	8001a3c <LL_USART_IsActiveFlag_IDLE+0x18>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5a:	2b40      	cmp	r3, #64	@ 0x40
 8001a5c:	d101      	bne.n	8001a62 <LL_USART_IsActiveFlag_TC+0x18>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_USART_IsActiveFlag_TC+0x1a>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	621a      	str	r2, [r3, #32]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8e:	bf00      	nop
 8001a90:	e7fd      	b.n	8001a8e <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	bf00      	nop
 8001a98:	e7fd      	b.n	8001a96 <HardFault_Handler+0x4>

08001a9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9e:	bf00      	nop
 8001aa0:	e7fd      	b.n	8001a9e <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	bf00      	nop
 8001aa8:	e7fd      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aaa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aae:	bf00      	nop
 8001ab0:	e7fd      	b.n	8001aae <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 fe44 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001aec:	480a      	ldr	r0, [pc, #40]	@ (8001b18 <DMA1_Channel6_IRQHandler+0x30>)
 8001aee:	f7ff ff33 	bl	8001958 <LL_DMA_IsActiveFlag_TC6>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d103      	bne.n	8001b00 <DMA1_Channel6_IRQHandler+0x18>
			{

				LL_DMA_ClearFlag_TC6(DMA1);
 8001af8:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <DMA1_Channel6_IRQHandler+0x30>)
 8001afa:	f7ff ff69 	bl	80019d0 <LL_DMA_ClearFlag_TC6>
			}
			else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
			{
				LL_DMA_ClearFlag_HT6(DMA1);
			}
}
 8001afe:	e008      	b.n	8001b12 <DMA1_Channel6_IRQHandler+0x2a>
			else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <DMA1_Channel6_IRQHandler+0x30>)
 8001b02:	f7ff ff51 	bl	80019a8 <LL_DMA_IsActiveFlag_HT6>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <DMA1_Channel6_IRQHandler+0x2a>
				LL_DMA_ClearFlag_HT6(DMA1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA1_Channel6_IRQHandler+0x30>)
 8001b0e:	f7ff ff7b 	bl	8001a08 <LL_DMA_ClearFlag_HT6>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40020000 	.word	0x40020000

08001b1c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001b20:	480a      	ldr	r0, [pc, #40]	@ (8001b4c <DMA1_Channel7_IRQHandler+0x30>)
 8001b22:	f7ff ff2d 	bl	8001980 <LL_DMA_IsActiveFlag_TC7>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10d      	bne.n	8001b48 <DMA1_Channel7_IRQHandler+0x2c>
			{
				LL_DMA_ClearFlag_TC7(DMA1);
 8001b2c:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <DMA1_Channel7_IRQHandler+0x30>)
 8001b2e:	f7ff ff5d 	bl	80019ec <LL_DMA_ClearFlag_TC7>

				while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001b32:	bf00      	nop
 8001b34:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <DMA1_Channel7_IRQHandler+0x34>)
 8001b36:	f7ff ff88 	bl	8001a4a <LL_USART_IsActiveFlag_TC>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f9      	beq.n	8001b34 <DMA1_Channel7_IRQHandler+0x18>
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001b40:	2107      	movs	r1, #7
 8001b42:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <DMA1_Channel7_IRQHandler+0x30>)
 8001b44:	f7ff fee8 	bl	8001918 <LL_DMA_DisableChannel>
			}
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40004400 	.word	0x40004400

08001b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <USART2_IRQHandler+0x1c>)
 8001b5a:	f7ff ff63 	bl	8001a24 <LL_USART_IsActiveFlag_IDLE>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <USART2_IRQHandler+0x16>
			{
				LL_USART_ClearFlag_IDLE(USART2);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <USART2_IRQHandler+0x1c>)
 8001b66:	f7ff ff83 	bl	8001a70 <LL_USART_ClearFlag_IDLE>
			}
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40004400 	.word	0x40004400

08001b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_kill>:

int _kill(int pid, int sig)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b8e:	f002 fc63 	bl	8004458 <__errno>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2216      	movs	r2, #22
 8001b96:	601a      	str	r2, [r3, #0]
  return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_exit>:

void _exit (int status)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffe7 	bl	8001b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bb6:	bf00      	nop
 8001bb8:	e7fd      	b.n	8001bb6 <_exit+0x12>

08001bba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e00a      	b.n	8001be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	60ba      	str	r2, [r7, #8]
 8001bd8:	b2ca      	uxtb	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbf0      	blt.n	8001bcc <_read+0x12>
  }

  return len;
 8001bea:	687b      	ldr	r3, [r7, #4]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e009      	b.n	8001c1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	60ba      	str	r2, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf1      	blt.n	8001c06 <_write+0x12>
  }
  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_close>:

int _close(int file)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c54:	605a      	str	r2, [r3, #4]
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_isatty>:

int _isatty(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	@ (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f002 fbc8 	bl	8004458 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20003000 	.word	0x20003000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	2000023c 	.word	0x2000023c
 8001cfc:	20000420 	.word	0x20000420

08001d00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	@ (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <LL_AHB1_GRP1_EnableClock>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4013      	ands	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000

08001e68 <LL_APB1_GRP1_EnableClock>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	4907      	ldr	r1, [pc, #28]	@ (8001e94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4013      	ands	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40021000 	.word	0x40021000

08001e98 <LL_DMA_EnableChannel>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed4 <LL_DMA_EnableChannel+0x3c>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	4907      	ldr	r1, [pc, #28]	@ (8001ed4 <LL_DMA_EnableChannel+0x3c>)
 8001eb8:	5c8a      	ldrb	r2, [r1, r2]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	0800745c 	.word	0x0800745c

08001ed8 <LL_DMA_SetDataTransferDirection>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <LL_DMA_SetDataTransferDirection+0x48>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ef8:	f023 0310 	bic.w	r3, r3, #16
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	3a01      	subs	r2, #1
 8001f00:	4907      	ldr	r1, [pc, #28]	@ (8001f20 <LL_DMA_SetDataTransferDirection+0x48>)
 8001f02:	5c8a      	ldrb	r2, [r1, r2]
 8001f04:	4611      	mov	r1, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	440a      	add	r2, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	0800745c 	.word	0x0800745c

08001f24 <LL_DMA_GetDataTransferDirection>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001f42:	4013      	ands	r3, r2
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	0800745c 	.word	0x0800745c

08001f54 <LL_DMA_SetMode>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <LL_DMA_SetMode+0x44>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0220 	bic.w	r2, r3, #32
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	4907      	ldr	r1, [pc, #28]	@ (8001f98 <LL_DMA_SetMode+0x44>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	440b      	add	r3, r1
 8001f82:	4619      	mov	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	0800745c 	.word	0x0800745c

08001f9c <LL_DMA_SetPeriphIncMode>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4907      	ldr	r1, [pc, #28]	@ (8001fe0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	440b      	add	r3, r1
 8001fca:	4619      	mov	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	0800745c 	.word	0x0800745c

08001fe4 <LL_DMA_SetMemoryIncMode>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8002028 <LL_DMA_SetMemoryIncMode+0x44>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3b01      	subs	r3, #1
 8002008:	4907      	ldr	r1, [pc, #28]	@ (8002028 <LL_DMA_SetMemoryIncMode+0x44>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	4619      	mov	r1, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	440b      	add	r3, r1
 8002012:	4619      	mov	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	0800745c 	.word	0x0800745c

0800202c <LL_DMA_SetPeriphSize>:
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3b01      	subs	r3, #1
 800203c:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <LL_DMA_SetPeriphSize+0x44>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	461a      	mov	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3b01      	subs	r3, #1
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <LL_DMA_SetPeriphSize+0x44>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	4619      	mov	r1, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	440b      	add	r3, r1
 800205a:	4619      	mov	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	0800745c 	.word	0x0800745c

08002074 <LL_DMA_SetMemorySize>:
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3b01      	subs	r3, #1
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LL_DMA_SetMemorySize+0x44>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3b01      	subs	r3, #1
 8002098:	4907      	ldr	r1, [pc, #28]	@ (80020b8 <LL_DMA_SetMemorySize+0x44>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	4619      	mov	r1, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	440b      	add	r3, r1
 80020a2:	4619      	mov	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	0800745c 	.word	0x0800745c

080020bc <LL_DMA_SetChannelPriorityLevel>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3b01      	subs	r3, #1
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	4619      	mov	r1, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	440b      	add	r3, r1
 80020ea:	4619      	mov	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	0800745c 	.word	0x0800745c

08002104 <LL_DMA_SetDataLength>:
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	3b01      	subs	r3, #1
 8002114:	4a0c      	ldr	r2, [pc, #48]	@ (8002148 <LL_DMA_SetDataLength+0x44>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	3a01      	subs	r2, #1
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <LL_DMA_SetDataLength+0x44>)
 800212a:	5c8a      	ldrb	r2, [r1, r2]
 800212c:	4611      	mov	r1, r2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	440a      	add	r2, r1
 8002132:	4611      	mov	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	0800745c 	.word	0x0800745c

0800214c <LL_DMA_ConfigAddresses>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d114      	bne.n	800218a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a16      	ldr	r2, [pc, #88]	@ (80021c0 <LL_DMA_ConfigAddresses+0x74>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	461a      	mov	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	3b01      	subs	r3, #1
 8002178:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <LL_DMA_ConfigAddresses+0x74>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6093      	str	r3, [r2, #8]
}
 8002188:	e013      	b.n	80021b2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <LL_DMA_ConfigAddresses+0x74>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	461a      	mov	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	4a07      	ldr	r2, [pc, #28]	@ (80021c0 <LL_DMA_ConfigAddresses+0x74>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	60d3      	str	r3, [r2, #12]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	0800745c 	.word	0x0800745c

080021c4 <LL_DMA_SetMemoryAddress>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	4a06      	ldr	r2, [pc, #24]	@ (80021f0 <LL_DMA_SetMemoryAddress+0x2c>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	461a      	mov	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	461a      	mov	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	0800745c 	.word	0x0800745c

080021f4 <LL_DMA_SetPeriphAddress>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	4a06      	ldr	r2, [pc, #24]	@ (8002220 <LL_DMA_SetPeriphAddress+0x2c>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	461a      	mov	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4413      	add	r3, r2
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	0800745c 	.word	0x0800745c

08002224 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	3b01      	subs	r3, #1
 8002232:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <LL_DMA_EnableIT_TC+0x3c>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
 8002236:	461a      	mov	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	3a01      	subs	r2, #1
 8002242:	4907      	ldr	r1, [pc, #28]	@ (8002260 <LL_DMA_EnableIT_TC+0x3c>)
 8002244:	5c8a      	ldrb	r2, [r1, r2]
 8002246:	4611      	mov	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	440a      	add	r2, r1
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0800745c 	.word	0x0800745c

08002264 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	3b01      	subs	r3, #1
 8002272:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <LL_DMA_EnableIT_TE+0x3c>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	3a01      	subs	r2, #1
 8002282:	4907      	ldr	r1, [pc, #28]	@ (80022a0 <LL_DMA_EnableIT_TE+0x3c>)
 8002284:	5c8a      	ldrb	r2, [r1, r2]
 8002286:	4611      	mov	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	440a      	add	r2, r1
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	0800745c 	.word	0x0800745c

080022a4 <LL_USART_Enable>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_USART_ConfigAsyncMode>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3308      	adds	r3, #8
 80022fc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	60bb      	str	r3, [r7, #8]
   return(result);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3308      	adds	r3, #8
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	61ba      	str	r2, [r7, #24]
 8002316:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	613b      	str	r3, [r7, #16]
   return(result);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e7      	bne.n	80022f8 <LL_USART_DisableIT_CTS+0x8>
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002336:	b480      	push	{r7}
 8002338:	b089      	sub	sp, #36	@ 0x24
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3308      	adds	r3, #8
 8002342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	60bb      	str	r3, [r7, #8]
   return(result);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3308      	adds	r3, #8
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	61ba      	str	r2, [r7, #24]
 800235c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	613b      	str	r3, [r7, #16]
   return(result);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e7      	bne.n	800233e <LL_USART_EnableDMAReq_RX+0x8>
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3724      	adds	r7, #36	@ 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3308      	adds	r3, #8
 8002388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	e853 3f00 	ldrex	r3, [r3]
 8002390:	60bb      	str	r3, [r7, #8]
   return(result);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3308      	adds	r3, #8
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	61ba      	str	r2, [r7, #24]
 80023a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a4:	6979      	ldr	r1, [r7, #20]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	e841 2300 	strex	r3, r2, [r1]
 80023ac:	613b      	str	r3, [r7, #16]
   return(result);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e7      	bne.n	8002384 <LL_USART_EnableDMAReq_TX+0x8>
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3328      	adds	r3, #40	@ 0x28
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e002      	b.n	80023e0 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3324      	adds	r3, #36	@ 0x24
 80023de:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b090      	sub	sp, #64	@ 0x40
 80023f4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	615a      	str	r2, [r3, #20]
 8002408:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
 8002418:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800241a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800241e:	f7ff fd23 	bl	8001e68 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002422:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002426:	f7ff fd07 	bl	8001e38 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800242a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800242e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002430:	2302      	movs	r3, #2
 8002432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002440:	2307      	movs	r3, #7
 8002442:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800244c:	f000 fb8c 	bl	8002b68 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002450:	2200      	movs	r2, #0
 8002452:	2106      	movs	r1, #6
 8002454:	487a      	ldr	r0, [pc, #488]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002456:	f7ff fd3f 	bl	8001ed8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800245a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800245e:	2106      	movs	r1, #6
 8002460:	4877      	ldr	r0, [pc, #476]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002462:	f7ff fe2b 	bl	80020bc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002466:	2200      	movs	r2, #0
 8002468:	2106      	movs	r1, #6
 800246a:	4875      	ldr	r0, [pc, #468]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800246c:	f7ff fd72 	bl	8001f54 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002470:	2200      	movs	r2, #0
 8002472:	2106      	movs	r1, #6
 8002474:	4872      	ldr	r0, [pc, #456]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002476:	f7ff fd91 	bl	8001f9c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	2106      	movs	r1, #6
 800247e:	4870      	ldr	r0, [pc, #448]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002480:	f7ff fdb0 	bl	8001fe4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002484:	2200      	movs	r2, #0
 8002486:	2106      	movs	r1, #6
 8002488:	486d      	ldr	r0, [pc, #436]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800248a:	f7ff fdcf 	bl	800202c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800248e:	2200      	movs	r2, #0
 8002490:	2106      	movs	r1, #6
 8002492:	486b      	ldr	r0, [pc, #428]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002494:	f7ff fdee 	bl	8002074 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002498:	2210      	movs	r2, #16
 800249a:	2107      	movs	r1, #7
 800249c:	4868      	ldr	r0, [pc, #416]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800249e:	f7ff fd1b 	bl	8001ed8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80024a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024a6:	2107      	movs	r1, #7
 80024a8:	4865      	ldr	r0, [pc, #404]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80024aa:	f7ff fe07 	bl	80020bc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_CIRCULAR);
 80024ae:	2220      	movs	r2, #32
 80024b0:	2107      	movs	r1, #7
 80024b2:	4863      	ldr	r0, [pc, #396]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80024b4:	f7ff fd4e 	bl	8001f54 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2107      	movs	r1, #7
 80024bc:	4860      	ldr	r0, [pc, #384]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80024be:	f7ff fd6d 	bl	8001f9c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	2107      	movs	r1, #7
 80024c6:	485e      	ldr	r0, [pc, #376]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80024c8:	f7ff fd8c 	bl	8001fe4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2107      	movs	r1, #7
 80024d0:	485b      	ldr	r0, [pc, #364]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80024d2:	f7ff fdab 	bl	800202c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2107      	movs	r1, #7
 80024da:	4859      	ldr	r0, [pc, #356]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80024dc:	f7ff fdca 	bl	8002074 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024e0:	f7ff fc20 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fc70 	bl	8001dd0 <NVIC_EncodePriority>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4619      	mov	r1, r3
 80024f4:	2026      	movs	r0, #38	@ 0x26
 80024f6:	f7ff fc41 	bl	8001d7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80024fa:	2026      	movs	r0, #38	@ 0x26
 80024fc:	f7ff fc20 	bl	8001d40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002500:	2200      	movs	r2, #0
 8002502:	2106      	movs	r1, #6
 8002504:	484e      	ldr	r0, [pc, #312]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002506:	f7ff fce7 	bl	8001ed8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800250a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800250e:	2106      	movs	r1, #6
 8002510:	484b      	ldr	r0, [pc, #300]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002512:	f7ff fdd3 	bl	80020bc <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8002516:	2220      	movs	r2, #32
 8002518:	2106      	movs	r1, #6
 800251a:	4849      	ldr	r0, [pc, #292]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800251c:	f7ff fd1a 	bl	8001f54 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002520:	2200      	movs	r2, #0
 8002522:	2106      	movs	r1, #6
 8002524:	4846      	ldr	r0, [pc, #280]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002526:	f7ff fd39 	bl	8001f9c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	2106      	movs	r1, #6
 800252e:	4844      	ldr	r0, [pc, #272]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002530:	f7ff fd58 	bl	8001fe4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002534:	2200      	movs	r2, #0
 8002536:	2106      	movs	r1, #6
 8002538:	4841      	ldr	r0, [pc, #260]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800253a:	f7ff fd77 	bl	800202c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800253e:	2200      	movs	r2, #0
 8002540:	2106      	movs	r1, #6
 8002542:	483f      	ldr	r0, [pc, #252]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002544:	f7ff fd96 	bl	8002074 <LL_DMA_SetMemorySize>

	LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002548:	2101      	movs	r1, #1
 800254a:	483e      	ldr	r0, [pc, #248]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 800254c:	f7ff ff39 	bl	80023c2 <LL_USART_DMA_GetRegAddr>
 8002550:	4604      	mov	r4, r0
 8002552:	4d3d      	ldr	r5, [pc, #244]	@ (8002648 <MX_USART2_UART_Init+0x258>)
 8002554:	2106      	movs	r1, #6
 8002556:	483a      	ldr	r0, [pc, #232]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002558:	f7ff fce4 	bl	8001f24 <LL_DMA_GetDataTransferDirection>
 800255c:	4603      	mov	r3, r0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	462b      	mov	r3, r5
 8002562:	4622      	mov	r2, r4
 8002564:	2106      	movs	r1, #6
 8002566:	4836      	ldr	r0, [pc, #216]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002568:	f7ff fdf0 	bl	800214c <LL_DMA_ConfigAddresses>
						LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
						(uint32_t)bufferUSART2dma,
						LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800256c:	2280      	movs	r2, #128	@ 0x80
 800256e:	2106      	movs	r1, #6
 8002570:	4833      	ldr	r0, [pc, #204]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002572:	f7ff fdc7 	bl	8002104 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002576:	2106      	movs	r1, #6
 8002578:	4831      	ldr	r0, [pc, #196]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800257a:	f7ff fc8d 	bl	8001e98 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 800257e:	4831      	ldr	r0, [pc, #196]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 8002580:	f7ff fed9 	bl	8002336 <LL_USART_EnableDMAReq_RX>

	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002584:	2210      	movs	r2, #16
 8002586:	2107      	movs	r1, #7
 8002588:	482d      	ldr	r0, [pc, #180]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 800258a:	f7ff fca5 	bl	8001ed8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800258e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002592:	2107      	movs	r1, #7
 8002594:	482a      	ldr	r0, [pc, #168]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 8002596:	f7ff fd91 	bl	80020bc <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800259a:	2200      	movs	r2, #0
 800259c:	2107      	movs	r1, #7
 800259e:	4828      	ldr	r0, [pc, #160]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025a0:	f7ff fcd8 	bl	8001f54 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2107      	movs	r1, #7
 80025a8:	4825      	ldr	r0, [pc, #148]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025aa:	f7ff fcf7 	bl	8001f9c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	2107      	movs	r1, #7
 80025b2:	4823      	ldr	r0, [pc, #140]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025b4:	f7ff fd16 	bl	8001fe4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2107      	movs	r1, #7
 80025bc:	4820      	ldr	r0, [pc, #128]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025be:	f7ff fd35 	bl	800202c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2107      	movs	r1, #7
 80025c6:	481e      	ldr	r0, [pc, #120]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025c8:	f7ff fd54 	bl	8002074 <LL_DMA_SetMemorySize>

	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80025cc:	2100      	movs	r1, #0
 80025ce:	481d      	ldr	r0, [pc, #116]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 80025d0:	f7ff fef7 	bl	80023c2 <LL_USART_DMA_GetRegAddr>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	2107      	movs	r1, #7
 80025da:	4819      	ldr	r0, [pc, #100]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025dc:	f7ff fe0a 	bl	80021f4 <LL_DMA_SetPeriphAddress>
	LL_USART_EnableDMAReq_TX(USART2);
 80025e0:	4818      	ldr	r0, [pc, #96]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 80025e2:	f7ff fecb 	bl	800237c <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80025e6:	2107      	movs	r1, #7
 80025e8:	4815      	ldr	r0, [pc, #84]	@ (8002640 <MX_USART2_UART_Init+0x250>)
 80025ea:	f7ff fe3b 	bl	8002264 <LL_DMA_EnableIT_TE>
	NVIC_SetPriority(USART2_IRQn, 0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	2026      	movs	r0, #38	@ 0x26
 80025f2:	f7ff fbc3 	bl	8001d7c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80025f6:	2026      	movs	r0, #38	@ 0x26
 80025f8:	f7ff fba2 	bl	8001d40 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80025fc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002600:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800260e:	230c      	movs	r3, #12
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002612:	2300      	movs	r3, #0
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002616:	2300      	movs	r3, #0
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4808      	ldr	r0, [pc, #32]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 8002622:	f000 fe07 	bl	8003234 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002626:	4807      	ldr	r0, [pc, #28]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 8002628:	f7ff fe62 	bl	80022f0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800262c:	4805      	ldr	r0, [pc, #20]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 800262e:	f7ff fe49 	bl	80022c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002632:	4804      	ldr	r0, [pc, #16]	@ (8002644 <MX_USART2_UART_Init+0x254>)
 8002634:	f7ff fe36 	bl	80022a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3738      	adds	r7, #56	@ 0x38
 800263c:	46bd      	mov	sp, r7
 800263e:	bdb0      	pop	{r4, r5, r7, pc}
 8002640:	40020000 	.word	0x40020000
 8002644:	40004400 	.word	0x40004400
 8002648:	20000240 	.word	0x20000240

0800264c <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	461a      	mov	r2, r3
 800265c:	2107      	movs	r1, #7
 800265e:	480a      	ldr	r0, [pc, #40]	@ (8002688 <USART2_PutBuffer+0x3c>)
 8002660:	f7ff fdb0 	bl	80021c4 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	461a      	mov	r2, r3
 8002668:	2107      	movs	r1, #7
 800266a:	4807      	ldr	r0, [pc, #28]	@ (8002688 <USART2_PutBuffer+0x3c>)
 800266c:	f7ff fd4a 	bl	8002104 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002670:	2107      	movs	r1, #7
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <USART2_PutBuffer+0x3c>)
 8002674:	f7ff fdd6 	bl	8002224 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002678:	2107      	movs	r1, #7
 800267a:	4803      	ldr	r0, [pc, #12]	@ (8002688 <USART2_PutBuffer+0x3c>)
 800267c:	f7ff fc0c 	bl	8001e98 <LL_DMA_EnableChannel>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40020000 	.word	0x40020000

0800268c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800268c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002690:	f7ff fb36 	bl	8001d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	@ (80026cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <LoopForever+0xe>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	@ (80026d8 <LoopForever+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ba:	f001 fed3 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026be:	f7fe ffe5 	bl	800168c <main>

080026c2 <LoopForever>:

LoopForever:
    b LoopForever
 80026c2:	e7fe      	b.n	80026c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026c4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026d0:	08007818 	.word	0x08007818
  ldr r2, =_sbss
 80026d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80026d8:	20000420 	.word	0x20000420

080026dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC1_2_IRQHandler>
	...

080026e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_Init+0x28>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_Init+0x28>)
 80026ea:	f043 0310 	orr.w	r3, r3, #16
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f000 f901 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f6:	200f      	movs	r0, #15
 80026f8:	f000 f808 	bl	800270c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026fc:	f7ff f8e8 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40022000 	.word	0x40022000

0800270c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_InitTick+0x54>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_InitTick+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f90b 	bl	8002946 <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 f8e1 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	@ (8002768 <HAL_InitTick+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000000 	.word	0x20000000
 8002764:	20000008 	.word	0x20000008
 8002768:	20000004 	.word	0x20000004

0800276c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008
 8002790:	200002c0 	.word	0x200002c0

08002794 <__NVIC_SetPriorityGrouping>:
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c6:	4a04      	ldr	r2, [pc, #16]	@ (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60d3      	str	r3, [r2, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_GetPriorityGrouping>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e0:	4b04      	ldr	r3, [pc, #16]	@ (80027f4 <__NVIC_GetPriorityGrouping+0x18>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	f003 0307 	and.w	r3, r3, #7
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_SetPriority>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff47 	bl	8002794 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff5c 	bl	80027dc <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffb0 	bl	80028b4 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800295e:	b480      	push	{r7}
 8002960:	b089      	sub	sp, #36	@ 0x24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	613b      	str	r3, [r7, #16]
  return result;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2103      	movs	r1, #3
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	401a      	ands	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	61bb      	str	r3, [r7, #24]
  return result;
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	431a      	orrs	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	3724      	adds	r7, #36	@ 0x24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	401a      	ands	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	431a      	orrs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	613b      	str	r3, [r7, #16]
  return result;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2103      	movs	r1, #3
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	61bb      	str	r3, [r7, #24]
  return result;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	@ 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b089      	sub	sp, #36	@ 0x24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	613b      	str	r3, [r7, #16]
  return result;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2103      	movs	r1, #3
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	401a      	ands	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	61bb      	str	r3, [r7, #24]
  return result;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	431a      	orrs	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	60da      	str	r2, [r3, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3724      	adds	r7, #36	@ 0x24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	613b      	str	r3, [r7, #16]
  return result;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	210f      	movs	r1, #15
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	@ 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b089      	sub	sp, #36	@ 0x24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	613b      	str	r3, [r7, #16]
  return result;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	210f      	movs	r1, #15
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61bb      	str	r3, [r7, #24]
  return result;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002b5c:	bf00      	nop
 8002b5e:	3724      	adds	r7, #36	@ 0x24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	613b      	str	r3, [r7, #16]
  return result;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002b8a:	e051      	b.n	8002c30 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d043      	beq.n	8002c2a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d003      	beq.n	8002bb2 <LL_GPIO_Init+0x4a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d10e      	bne.n	8002bd0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69b9      	ldr	r1, [r7, #24]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff16 	bl	80029ec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fef6 	bl	80029bc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff36 	bl	8002a4a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d11a      	bne.n	8002c1c <LL_GPIO_Init+0xb4>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
  return result;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b07      	cmp	r3, #7
 8002bfc:	d807      	bhi.n	8002c0e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	461a      	mov	r2, r3
 8002c04:	69b9      	ldr	r1, [r7, #24]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ff4e 	bl	8002aa8 <LL_GPIO_SetAFPin_0_7>
 8002c0c:	e006      	b.n	8002c1c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	461a      	mov	r2, r3
 8002c14:	69b9      	ldr	r1, [r7, #24]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff75 	bl	8002b06 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	461a      	mov	r2, r3
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fe9a 	bl	800295e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1a6      	bne.n	8002b8c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <LL_I2C_Enable>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_I2C_Disable>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 0201 	bic.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_I2C_ConfigFilters>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0219      	lsls	r1, r3, #8
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_I2C_SetOwnAddress1>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_I2C_EnableOwnAddress1>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_I2C_DisableOwnAddress1>:
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_I2C_SetTiming>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	611a      	str	r2, [r3, #16]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_I2C_SetMode>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	601a      	str	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_I2C_AcknowledgeNextData>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	605a      	str	r2, [r3, #4]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff65 	bl	8002c68 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	461a      	mov	r2, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff6d 	bl	8002c88 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ffb6 	bl	8002d26 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff44 	bl	8002c48 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ffa0 	bl	8002d06 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6919      	ldr	r1, [r3, #16]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff70 	bl	8002cb6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff81 	bl	8002ce6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ffa9 	bl	8002d42 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffb6 	bl	8002d68 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <LL_RCC_HSI_IsReady>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <LL_RCC_HSI_IsReady+0x20>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000

08002e2c <LL_RCC_LSE_IsReady>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <LL_RCC_LSE_IsReady+0x20>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000

08002e50 <LL_RCC_GetSysClkSource>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <LL_RCC_GetSysClkSource+0x18>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000

08002e6c <LL_RCC_GetAHBPrescaler>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <LL_RCC_GetAHBPrescaler+0x18>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <LL_RCC_GetAPB1Prescaler>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <LL_RCC_GetAPB2Prescaler>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <LL_RCC_GetAPB2Prescaler+0x18>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002ec8:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <LL_RCC_GetUSARTClockSource+0x28>)
 8002eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ecc:	2103      	movs	r1, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	4313      	orrs	r3, r2
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40021000 	.word	0x40021000

08002eec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <LL_RCC_PLL_GetMainSource+0x18>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000

08002f08 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <LL_RCC_PLL_GetPrediv+0x18>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f003 030f 	and.w	r3, r3, #15
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000

08002f40 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f48:	f000 f862 	bl	8003010 <RCC_GetSystemClockFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f880 	bl	800305c <RCC_GetHCLKClockFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f88e 	bl	8003088 <RCC_GetPCLK1ClockFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f89a 	bl	80030b0 <RCC_GetPCLK2ClockFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d130      	bne.n	8003000 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff8e 	bl	8002ec0 <LL_RCC_GetUSARTClockSource>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d00a      	beq.n	8002fc0 <LL_RCC_GetUSARTClockFreq+0x34>
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d819      	bhi.n	8002fe2 <LL_RCC_GetUSARTClockFreq+0x56>
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d002      	beq.n	8002fb8 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d00c      	beq.n	8002fd0 <LL_RCC_GetUSARTClockFreq+0x44>
 8002fb6:	e014      	b.n	8002fe2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002fb8:	f000 f82a 	bl	8003010 <RCC_GetSystemClockFreq>
 8002fbc:	60f8      	str	r0, [r7, #12]
        break;
 8002fbe:	e01f      	b.n	8003000 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002fc0:	f7ff ff22 	bl	8002e08 <LL_RCC_HSI_IsReady>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d017      	beq.n	8002ffa <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <LL_RCC_GetUSARTClockFreq+0x80>)
 8002fcc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fce:	e014      	b.n	8002ffa <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002fd0:	f7ff ff2c 	bl	8002e2c <LL_RCC_LSE_IsReady>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d011      	beq.n	8002ffe <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fde:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fe0:	e00d      	b.n	8002ffe <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002fe2:	f000 f815 	bl	8003010 <RCC_GetSystemClockFreq>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f837 	bl	800305c <RCC_GetHCLKClockFreq>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f849 	bl	8003088 <RCC_GetPCLK1ClockFreq>
 8002ff6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002ff8:	e002      	b.n	8003000 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002ffe:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	007a1200 	.word	0x007a1200

08003010 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800301a:	f7ff ff19 	bl	8002e50 <LL_RCC_GetSysClkSource>
 800301e:	4603      	mov	r3, r0
 8003020:	2b08      	cmp	r3, #8
 8003022:	d00c      	beq.n	800303e <RCC_GetSystemClockFreq+0x2e>
 8003024:	2b08      	cmp	r3, #8
 8003026:	d80e      	bhi.n	8003046 <RCC_GetSystemClockFreq+0x36>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <RCC_GetSystemClockFreq+0x22>
 800302c:	2b04      	cmp	r3, #4
 800302e:	d003      	beq.n	8003038 <RCC_GetSystemClockFreq+0x28>
 8003030:	e009      	b.n	8003046 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003032:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <RCC_GetSystemClockFreq+0x48>)
 8003034:	607b      	str	r3, [r7, #4]
      break;
 8003036:	e009      	b.n	800304c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <RCC_GetSystemClockFreq+0x48>)
 800303a:	607b      	str	r3, [r7, #4]
      break;
 800303c:	e006      	b.n	800304c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800303e:	f000 f84b 	bl	80030d8 <RCC_PLL_GetFreqDomain_SYS>
 8003042:	6078      	str	r0, [r7, #4]
      break;
 8003044:	e002      	b.n	800304c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <RCC_GetSystemClockFreq+0x48>)
 8003048:	607b      	str	r3, [r7, #4]
      break;
 800304a:	bf00      	nop
  }

  return frequency;
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	007a1200 	.word	0x007a1200

0800305c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003064:	f7ff ff02 	bl	8002e6c <LL_RCC_GetAHBPrescaler>
 8003068:	4603      	mov	r3, r0
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <RCC_GetHCLKClockFreq+0x28>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	40d3      	lsrs	r3, r2
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	08007444 	.word	0x08007444

08003088 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003090:	f7ff fefa 	bl	8002e88 <LL_RCC_GetAPB1Prescaler>
 8003094:	4603      	mov	r3, r0
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <RCC_GetPCLK1ClockFreq+0x24>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	40d3      	lsrs	r3, r2
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	08007454 	.word	0x08007454

080030b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80030b8:	f7ff fef4 	bl	8002ea4 <LL_RCC_GetAPB2Prescaler>
 80030bc:	4603      	mov	r3, r0
 80030be:	0adb      	lsrs	r3, r3, #11
 80030c0:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <RCC_GetPCLK2ClockFreq+0x24>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	40d3      	lsrs	r3, r2
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08007454 	.word	0x08007454

080030d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80030e6:	f7ff ff01 	bl	8002eec <LL_RCC_PLL_GetMainSource>
 80030ea:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f8:	d003      	beq.n	8003102 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80030fa:	e005      	b.n	8003108 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80030fc:	4b13      	ldr	r3, [pc, #76]	@ (800314c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80030fe:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003100:	e005      	b.n	800310e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003102:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003104:	60fb      	str	r3, [r7, #12]
      break;
 8003106:	e002      	b.n	800310e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003108:	4b10      	ldr	r3, [pc, #64]	@ (800314c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800310a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800310c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800310e:	f7ff ff09 	bl	8002f24 <LL_RCC_PLL_GetPrediv>
 8003112:	4603      	mov	r3, r0
 8003114:	3301      	adds	r3, #1
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	fbb2 f4f3 	udiv	r4, r2, r3
 800311c:	f7ff fef4 	bl	8002f08 <LL_RCC_PLL_GetMultiplicator>
 8003120:	4603      	mov	r3, r0
 8003122:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003126:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800312a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	fa92 f2a2 	rbit	r2, r2
 8003132:	603a      	str	r2, [r7, #0]
  return result;
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	40d3      	lsrs	r3, r2
 800313e:	3302      	adds	r3, #2
 8003140:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	003d0900 	.word	0x003d0900
 8003150:	007a1200 	.word	0x007a1200

08003154 <LL_USART_IsEnabled>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <LL_USART_IsEnabled+0x18>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <LL_USART_IsEnabled+0x1a>
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <LL_USART_SetStopBitsLength>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_USART_SetHWFlowCtrl>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_USART_SetBaudRate>:
{
 80031c6:	b480      	push	{r7}
 80031c8:	b087      	sub	sp, #28
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031da:	d11a      	bne.n	8003212 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	005a      	lsls	r2, r3, #1
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	441a      	add	r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	60da      	str	r2, [r3, #12]
}
 8003210:	e00a      	b.n	8003228 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	085a      	lsrs	r2, r3, #1
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	441a      	add	r2, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	60da      	str	r2, [r3, #12]
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ff84 	bl	8003154 <LL_USART_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d14e      	bne.n	80032f0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b29      	ldr	r3, [pc, #164]	@ (80032fc <LL_USART_Init+0xc8>)
 8003258:	4013      	ands	r3, r2
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	6851      	ldr	r1, [r2, #4]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68d2      	ldr	r2, [r2, #12]
 8003262:	4311      	orrs	r1, r2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	6912      	ldr	r2, [r2, #16]
 8003268:	4311      	orrs	r1, r2
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6992      	ldr	r2, [r2, #24]
 800326e:	430a      	orrs	r2, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff7c 	bl	800317a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff89 	bl	80031a0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <LL_USART_Init+0xcc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d104      	bne.n	80032a0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003296:	2000      	movs	r0, #0
 8003298:	f7ff fe78 	bl	8002f8c <LL_RCC_GetUSARTClockFreq>
 800329c:	61b8      	str	r0, [r7, #24]
 800329e:	e016      	b.n	80032ce <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <LL_USART_Init+0xd0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d107      	bne.n	80032b8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80032a8:	f107 0308 	add.w	r3, r7, #8
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fe47 	bl	8002f40 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e00a      	b.n	80032ce <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a13      	ldr	r2, [pc, #76]	@ (8003308 <LL_USART_Init+0xd4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d106      	bne.n	80032ce <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80032c0:	f107 0308 	add.w	r3, r7, #8
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fe3b 	bl	8002f40 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff6b 	bl	80031c6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	efff69f3 	.word	0xefff69f3
 8003300:	40013800 	.word	0x40013800
 8003304:	40004400 	.word	0x40004400
 8003308:	40004800 	.word	0x40004800

0800330c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <LL_mDelay+0x48>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800331a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d00c      	beq.n	800333e <LL_mDelay+0x32>
  {
    Delay++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3301      	adds	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800332a:	e008      	b.n	800333e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <LL_mDelay+0x48>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <LL_mDelay+0x32>
    {
      Delay--;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f3      	bne.n	800332c <LL_mDelay+0x20>
    }
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e010 	.word	0xe000e010

08003358 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <LL_SetSystemCoreClock+0x1c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6013      	str	r3, [r2, #0]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HTS221_read_byte>:
                                  uint8_t size);

static I2C_ReadCallback I2C_read_data = NULL;
static I2C_WriteCallback I2C_write_data = NULL;

uint8_t HTS221_read_byte(uint8_t register_address) {
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
	if (I2C_read_data == NULL) {
 8003382:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <HTS221_read_byte+0x34>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HTS221_read_byte+0x16>
		return 0;
 800338a:	2300      	movs	r3, #0
 800338c:	e009      	b.n	80033a2 <HTS221_read_byte+0x2a>
	}

	uint8_t rx_data;
	I2C_read_data(hts221_address, register_address, &rx_data, 1);
 800338e:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <HTS221_read_byte+0x34>)
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HTS221_read_byte+0x38>)
 8003394:	7818      	ldrb	r0, [r3, #0]
 8003396:	f107 020f 	add.w	r2, r7, #15
 800339a:	79f9      	ldrb	r1, [r7, #7]
 800339c:	2301      	movs	r3, #1
 800339e:	47a0      	blx	r4
	return rx_data;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200002c4 	.word	0x200002c4
 80033b0:	20000009 	.word	0x20000009

080033b4 <HTS221_read_array>:

void HTS221_read_array(uint8_t register_address, uint8_t* data, uint8_t size) {
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71bb      	strb	r3, [r7, #6]
	if (I2C_read_data == NULL || data == NULL || size == 0) {
 80033c4:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <HTS221_read_array+0x40>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <HTS221_read_array+0x36>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HTS221_read_array+0x36>
 80033d2:	79bb      	ldrb	r3, [r7, #6]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HTS221_read_array+0x36>
	        return;
	}

	I2C_read_data(hts221_address, register_address, data, size);
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HTS221_read_array+0x40>)
 80033da:	681c      	ldr	r4, [r3, #0]
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <HTS221_read_array+0x44>)
 80033de:	7818      	ldrb	r0, [r3, #0]
 80033e0:	79bb      	ldrb	r3, [r7, #6]
 80033e2:	79f9      	ldrb	r1, [r7, #7]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	47a0      	blx	r4
 80033e8:	e000      	b.n	80033ec <HTS221_read_array+0x38>
	        return;
 80033ea:	bf00      	nop
}
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200002c4 	.word	0x200002c4
 80033f8:	20000009 	.word	0x20000009

080033fc <HTS221_write_byte>:

void HTS221_write_byte(uint8_t register_address, uint8_t data) {
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	460a      	mov	r2, r1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	4613      	mov	r3, r2
 800340a:	71bb      	strb	r3, [r7, #6]
	if (I2C_write_data == NULL) {
 800340c:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <HTS221_write_byte+0x34>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HTS221_write_byte+0x2a>
	        return;
	}

	I2C_write_data(hts221_address, register_address, &data, 1);
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HTS221_write_byte+0x34>)
 8003416:	681c      	ldr	r4, [r3, #0]
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HTS221_write_byte+0x38>)
 800341a:	7818      	ldrb	r0, [r3, #0]
 800341c:	1dba      	adds	r2, r7, #6
 800341e:	79f9      	ldrb	r1, [r7, #7]
 8003420:	2301      	movs	r3, #1
 8003422:	47a0      	blx	r4
 8003424:	e000      	b.n	8003428 <HTS221_write_byte+0x2c>
	        return;
 8003426:	bf00      	nop
}
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}
 800342e:	bf00      	nop
 8003430:	200002c8 	.word	0x200002c8
 8003434:	20000009 	.word	0x20000009

08003438 <HTS221_Init>:

uint8_t HTS221_Init(I2C_ReadCallback read_callback, I2C_WriteCallback write_callback) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	if(read_callback == NULL || write_callback == NULL) {
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HTS221_Init+0x16>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HTS221_Init+0x1a>
		return 0;
 800344e:	2300      	movs	r3, #0
 8003450:	e025      	b.n	800349e <HTS221_Init+0x66>
	}

	I2C_read_data = read_callback;
 8003452:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <HTS221_Init+0x70>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6013      	str	r3, [r2, #0]
	I2C_write_data = write_callback;
 8003458:	4a14      	ldr	r2, [pc, #80]	@ (80034ac <HTS221_Init+0x74>)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6013      	str	r3, [r2, #0]

	LL_mDelay(100);
 800345e:	2064      	movs	r0, #100	@ 0x64
 8003460:	f7ff ff54 	bl	800330c <LL_mDelay>

	uint8_t who_am_i = HTS221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8003464:	200f      	movs	r0, #15
 8003466:	f7ff ff87 	bl	8003378 <HTS221_read_byte>
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != HTS221_WHO_AM_I_VALUE) {
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2bbc      	cmp	r3, #188	@ 0xbc
 8003472:	d001      	beq.n	8003478 <HTS221_Init+0x40>
		return 0;
 8003474:	2300      	movs	r3, #0
 8003476:	e012      	b.n	800349e <HTS221_Init+0x66>
	}

	uint8_t ctrl1 = HTS221_read_byte(HTS221_ADDRESS_CTRL1);
 8003478:	2020      	movs	r0, #32
 800347a:	f7ff ff7d 	bl	8003378 <HTS221_read_byte>
 800347e:	4603      	mov	r3, r0
 8003480:	73bb      	strb	r3, [r7, #14]
	ctrl1 &= 0x7C;
 8003482:	7bbb      	ldrb	r3, [r7, #14]
 8003484:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003488:	73bb      	strb	r3, [r7, #14]
	ctrl1 |= 0x83;
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	f063 037c 	orn	r3, r3, #124	@ 0x7c
 8003490:	73bb      	strb	r3, [r7, #14]

	HTS221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8003492:	7bbb      	ldrb	r3, [r7, #14]
 8003494:	4619      	mov	r1, r3
 8003496:	2020      	movs	r0, #32
 8003498:	f7ff ffb0 	bl	80033fc <HTS221_write_byte>

	return 1;
 800349c:	2301      	movs	r3, #1
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200002c4 	.word	0x200002c4
 80034ac:	200002c8 	.word	0x200002c8

080034b0 <HTS221_get_humidity>:


int8_t HTS221_get_humidity(void) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0

    if (I2C_read_data == NULL) {
 80034b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003570 <HTS221_get_humidity+0xc0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HTS221_get_humidity+0x14>
        return -1;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	e050      	b.n	8003566 <HTS221_get_humidity+0xb6>
    }

    uint8_t humidity_data[2];
    HTS221_read_array(HTS221_ADDRESS_HUMIDITY_OUT_L, humidity_data, 2);
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	2202      	movs	r2, #2
 80034ca:	4619      	mov	r1, r3
 80034cc:	2028      	movs	r0, #40	@ 0x28
 80034ce:	f7ff ff71 	bl	80033b4 <HTS221_read_array>
    int16_t humidity_raw = (humidity_data[1] << 8) | humidity_data[0];
 80034d2:	7b7b      	ldrb	r3, [r7, #13]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	b21a      	sxth	r2, r3
 80034d8:	7b3b      	ldrb	r3, [r7, #12]
 80034da:	b21b      	sxth	r3, r3
 80034dc:	4313      	orrs	r3, r2
 80034de:	82fb      	strh	r3, [r7, #22]

    uint8_t h_rh_x2[2];
    uint8_t h0_t0_out[2], h1_t0_out[2];

    HTS221_read_array(HTS221_ADDRESS_H0_rH_x2, h_rh_x2, 2);
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	2202      	movs	r2, #2
 80034e6:	4619      	mov	r1, r3
 80034e8:	2030      	movs	r0, #48	@ 0x30
 80034ea:	f7ff ff63 	bl	80033b4 <HTS221_read_array>
    HTS221_read_array(HTS221_ADDRESS_H0_T0_OUT_L, h0_t0_out, 2);
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	2202      	movs	r2, #2
 80034f2:	4619      	mov	r1, r3
 80034f4:	2036      	movs	r0, #54	@ 0x36
 80034f6:	f7ff ff5d 	bl	80033b4 <HTS221_read_array>
    HTS221_read_array(HTS221_ADDRESS_H1_T0_OUT_L, h1_t0_out, 2);
 80034fa:	463b      	mov	r3, r7
 80034fc:	2202      	movs	r2, #2
 80034fe:	4619      	mov	r1, r3
 8003500:	203a      	movs	r0, #58	@ 0x3a
 8003502:	f7ff ff57 	bl	80033b4 <HTS221_read_array>

    int8_t h0_rh = h_rh_x2[0] / 2;
 8003506:	7a3b      	ldrb	r3, [r7, #8]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	757b      	strb	r3, [r7, #21]
    int8_t h1_rh = h_rh_x2[1] / 2;
 800350e:	7a7b      	ldrb	r3, [r7, #9]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	753b      	strb	r3, [r7, #20]

    int16_t h0_t0_out_ = (h0_t0_out[1] << 8 | h0_t0_out[0]);
 8003516:	797b      	ldrb	r3, [r7, #5]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	b21a      	sxth	r2, r3
 800351c:	793b      	ldrb	r3, [r7, #4]
 800351e:	b21b      	sxth	r3, r3
 8003520:	4313      	orrs	r3, r2
 8003522:	827b      	strh	r3, [r7, #18]
    int16_t h1_t0_out_ = (h1_t0_out[1] << 8 | h1_t0_out[0]);
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	b21a      	sxth	r2, r3
 800352a:	783b      	ldrb	r3, [r7, #0]
 800352c:	b21b      	sxth	r3, r3
 800352e:	4313      	orrs	r3, r2
 8003530:	823b      	strh	r3, [r7, #16]

    int8_t humidity = ((h1_rh - h0_rh) * (humidity_raw - h0_t0_out_) / (h1_t0_out_ - h0_t0_out_)) + h0_rh;
 8003532:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003536:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003540:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003544:	1a8a      	subs	r2, r1, r2
 8003546:	fb03 f202 	mul.w	r2, r3, r2
 800354a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800354e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003552:	1acb      	subs	r3, r1, r3
 8003554:	fb92 f3f3 	sdiv	r3, r2, r3
 8003558:	b2da      	uxtb	r2, r3
 800355a:	7d7b      	ldrb	r3, [r7, #21]
 800355c:	4413      	add	r3, r2
 800355e:	b2db      	uxtb	r3, r3
 8003560:	73fb      	strb	r3, [r7, #15]

    return humidity;
 8003562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200002c4 	.word	0x200002c4

08003574 <HTS221_get_temperature>:

float HTS221_get_temperature(void) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af00      	add	r7, sp, #0

    if (I2C_read_data == NULL) {
 800357a:	4b4b      	ldr	r3, [pc, #300]	@ (80036a8 <HTS221_get_temperature+0x134>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HTS221_get_temperature+0x12>
        return -1;
 8003582:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <HTS221_get_temperature+0x138>)
 8003584:	e089      	b.n	800369a <HTS221_get_temperature+0x126>
    }

    uint8_t temperature_data[2];
    HTS221_read_array(HTS221_ADDRESS_TEMP_OUT_L, temperature_data, 2);
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	2202      	movs	r2, #2
 800358c:	4619      	mov	r1, r3
 800358e:	202a      	movs	r0, #42	@ 0x2a
 8003590:	f7ff ff10 	bl	80033b4 <HTS221_read_array>
    int16_t temperature_raw = (temperature_data[1] << 8) | temperature_data[0];
 8003594:	7b7b      	ldrb	r3, [r7, #13]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	b21a      	sxth	r2, r3
 800359a:	7b3b      	ldrb	r3, [r7, #12]
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    uint8_t t0_out[2], t1_out[2], t_degC_x8[2];
    uint8_t t0_t1_msb = HTS221_read_byte(HTS221_ADDRESS_T1_T2_msb);
 80035a2:	2035      	movs	r0, #53	@ 0x35
 80035a4:	f7ff fee8 	bl	8003378 <HTS221_read_byte>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    HTS221_read_array(HTS221_ADDRESS_T0_OUT_L, t0_out, 2);
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	2202      	movs	r2, #2
 80035b4:	4619      	mov	r1, r3
 80035b6:	203c      	movs	r0, #60	@ 0x3c
 80035b8:	f7ff fefc 	bl	80033b4 <HTS221_read_array>
    HTS221_read_array(HTS221_ADDRESS_T1_OUT_L, t1_out, 2);
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	2202      	movs	r2, #2
 80035c0:	4619      	mov	r1, r3
 80035c2:	203e      	movs	r0, #62	@ 0x3e
 80035c4:	f7ff fef6 	bl	80033b4 <HTS221_read_array>
    HTS221_read_array(HTS221_ADDRESS_T0_degC_x8, t_degC_x8, 2);
 80035c8:	463b      	mov	r3, r7
 80035ca:	2202      	movs	r2, #2
 80035cc:	4619      	mov	r1, r3
 80035ce:	2032      	movs	r0, #50	@ 0x32
 80035d0:	f7ff fef0 	bl	80033b4 <HTS221_read_array>

    int16_t t0_out_value = (int16_t)((t0_out[1] << 8) | t0_out[0]);
 80035d4:	7a7b      	ldrb	r3, [r7, #9]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	b21a      	sxth	r2, r3
 80035da:	7a3b      	ldrb	r3, [r7, #8]
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t t1_out_value = (int16_t)((t1_out[1] << 8) | t1_out[0]);
 80035e2:	797b      	ldrb	r3, [r7, #5]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	b21a      	sxth	r2, r3
 80035e8:	793b      	ldrb	r3, [r7, #4]
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	843b      	strh	r3, [r7, #32]

    uint16_t t0_degC = t_degC_x8[0];
 80035f0:	783b      	ldrb	r3, [r7, #0]
 80035f2:	83fb      	strh	r3, [r7, #30]
    uint16_t t1_degC = t_degC_x8[1];
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	83bb      	strh	r3, [r7, #28]

    t0_degC |= ((t0_t1_msb & 0x03) << 8);
 80035f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b21b      	sxth	r3, r3
 8003600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003604:	b21a      	sxth	r2, r3
 8003606:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800360a:	4313      	orrs	r3, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	83fb      	strh	r3, [r7, #30]
    t1_degC |= ((t0_t1_msb & 0x0C) << 6);
 8003610:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	b21b      	sxth	r3, r3
 8003618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361c:	b21a      	sxth	r2, r3
 800361e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003622:	4313      	orrs	r3, r2
 8003624:	b21b      	sxth	r3, r3
 8003626:	83bb      	strh	r3, [r7, #28]

    float t0_calibrated = t0_degC / 8.0f;
 8003628:	8bfb      	ldrh	r3, [r7, #30]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003632:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8003636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800363a:	edc7 7a06 	vstr	s15, [r7, #24]
    float t1_calibrated = t1_degC / 8.0f;
 800363e:	8bbb      	ldrh	r3, [r7, #28]
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003648:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800364c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003650:	edc7 7a05 	vstr	s15, [r7, #20]

    float temperature = ((t1_calibrated - t0_calibrated) / (t1_out_value - t0_out_value)) *
 8003654:	ed97 7a05 	vldr	s14, [r7, #20]
 8003658:	edd7 7a06 	vldr	s15, [r7, #24]
 800365c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003660:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003664:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                        (temperature_raw - t0_out_value) + t0_calibrated;
 8003676:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800367a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800367e:	1ad3      	subs	r3, r2, r3
    float temperature = ((t1_calibrated - t0_calibrated) / (t1_out_value - t0_out_value)) *
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003694:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8003698:	693b      	ldr	r3, [r7, #16]
}
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eeb0 0a67 	vmov.f32	s0, s15
 80036a2:	3728      	adds	r7, #40	@ 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200002c4 	.word	0x200002c4
 80036ac:	bf800000 	.word	0xbf800000

080036b0 <LPS25HB_read_byte>:
                                  uint8_t size);

static I2C_ReadCallback I2C_read_data = NULL;
static I2C_WriteCallback I2C_write_data = NULL;

uint8_t LPS25HB_read_byte(uint8_t register_address) {
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
	if (I2C_read_data == NULL) {
 80036ba:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <LPS25HB_read_byte+0x34>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <LPS25HB_read_byte+0x16>
		return 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e009      	b.n	80036da <LPS25HB_read_byte+0x2a>
	}

	uint8_t rx_data;
	I2C_read_data(lps25hb_address, register_address, &rx_data, 1);
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <LPS25HB_read_byte+0x34>)
 80036c8:	681c      	ldr	r4, [r3, #0]
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <LPS25HB_read_byte+0x38>)
 80036cc:	7818      	ldrb	r0, [r3, #0]
 80036ce:	f107 020f 	add.w	r2, r7, #15
 80036d2:	79f9      	ldrb	r1, [r7, #7]
 80036d4:	2301      	movs	r3, #1
 80036d6:	47a0      	blx	r4
	return rx_data;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200002cc 	.word	0x200002cc
 80036e8:	2000000a 	.word	0x2000000a

080036ec <LPS25HB_read_array>:

void LPS25HB_read_array(uint8_t register_address, uint8_t* data, uint8_t size) {
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71bb      	strb	r3, [r7, #6]
	if (I2C_read_data == NULL || data == NULL || size == 0) {
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <LPS25HB_read_array+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <LPS25HB_read_array+0x36>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <LPS25HB_read_array+0x36>
 800370a:	79bb      	ldrb	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <LPS25HB_read_array+0x36>
	        return;
	}

	I2C_read_data(lps25hb_address, register_address, data, size);
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <LPS25HB_read_array+0x40>)
 8003712:	681c      	ldr	r4, [r3, #0]
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <LPS25HB_read_array+0x44>)
 8003716:	7818      	ldrb	r0, [r3, #0]
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	79f9      	ldrb	r1, [r7, #7]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	47a0      	blx	r4
 8003720:	e000      	b.n	8003724 <LPS25HB_read_array+0x38>
	        return;
 8003722:	bf00      	nop
}
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	200002cc 	.word	0x200002cc
 8003730:	2000000a 	.word	0x2000000a

08003734 <LPS25HB_write_byte>:

void LPS25HB_write_byte(uint8_t register_address, uint8_t data) {
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	460a      	mov	r2, r1
 800373e:	71fb      	strb	r3, [r7, #7]
 8003740:	4613      	mov	r3, r2
 8003742:	71bb      	strb	r3, [r7, #6]
	if (I2C_write_data == NULL) {
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <LPS25HB_write_byte+0x34>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <LPS25HB_write_byte+0x2a>
	        return;
	}

	I2C_write_data(lps25hb_address, register_address, &data, 1);
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <LPS25HB_write_byte+0x34>)
 800374e:	681c      	ldr	r4, [r3, #0]
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <LPS25HB_write_byte+0x38>)
 8003752:	7818      	ldrb	r0, [r3, #0]
 8003754:	1dba      	adds	r2, r7, #6
 8003756:	79f9      	ldrb	r1, [r7, #7]
 8003758:	2301      	movs	r3, #1
 800375a:	47a0      	blx	r4
 800375c:	e000      	b.n	8003760 <LPS25HB_write_byte+0x2c>
	        return;
 800375e:	bf00      	nop
}
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	bf00      	nop
 8003768:	200002d0 	.word	0x200002d0
 800376c:	2000000a 	.word	0x2000000a

08003770 <LPS25HB_Init>:

uint8_t LPS25HB_Init(I2C_ReadCallback read_callback, I2C_WriteCallback write_callback) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
	if(read_callback == NULL || write_callback == NULL) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <LPS25HB_Init+0x16>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <LPS25HB_Init+0x1a>
		return 0;
 8003786:	2300      	movs	r3, #0
 8003788:	e030      	b.n	80037ec <LPS25HB_Init+0x7c>
	}

	I2C_read_data = read_callback;
 800378a:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <LPS25HB_Init+0x84>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6013      	str	r3, [r2, #0]
	I2C_write_data = write_callback;
 8003790:	4a19      	ldr	r2, [pc, #100]	@ (80037f8 <LPS25HB_Init+0x88>)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6013      	str	r3, [r2, #0]

	LL_mDelay(100);
 8003796:	2064      	movs	r0, #100	@ 0x64
 8003798:	f7ff fdb8 	bl	800330c <LL_mDelay>

	uint8_t who_am_i = LPS25HB_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 800379c:	200f      	movs	r0, #15
 800379e:	f7ff ff87 	bl	80036b0 <LPS25HB_read_byte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]

	if (who_am_i != LPS25HB_WHO_AM_I_VALUE) {
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2bbd      	cmp	r3, #189	@ 0xbd
 80037aa:	d00c      	beq.n	80037c6 <LPS25HB_Init+0x56>
		lps25hb_address = LPS25HB_DEVICE_ADDRESS_1;
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <LPS25HB_Init+0x8c>)
 80037ae:	22bb      	movs	r2, #187	@ 0xbb
 80037b0:	701a      	strb	r2, [r3, #0]
		who_am_i = LPS25HB_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80037b2:	200f      	movs	r0, #15
 80037b4:	f7ff ff7c 	bl	80036b0 <LPS25HB_read_byte>
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != LPS25HB_WHO_AM_I_VALUE) {
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2bbd      	cmp	r3, #189	@ 0xbd
 80037c0:	d001      	beq.n	80037c6 <LPS25HB_Init+0x56>
			return 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e012      	b.n	80037ec <LPS25HB_Init+0x7c>
		}
	}

	uint8_t ctrl1 = LPS25HB_read_byte(LPS25HB_ADDRESS_CTRL1);
 80037c6:	2020      	movs	r0, #32
 80037c8:	f7ff ff72 	bl	80036b0 <LPS25HB_read_byte>
 80037cc:	4603      	mov	r3, r0
 80037ce:	73bb      	strb	r3, [r7, #14]
	ctrl1 &= 0xF;
 80037d0:	7bbb      	ldrb	r3, [r7, #14]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	73bb      	strb	r3, [r7, #14]
	ctrl1 |= 0x90;
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 80037de:	73bb      	strb	r3, [r7, #14]

	LPS25HB_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	4619      	mov	r1, r3
 80037e4:	2020      	movs	r0, #32
 80037e6:	f7ff ffa5 	bl	8003734 <LPS25HB_write_byte>

	return 1;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200002cc 	.word	0x200002cc
 80037f8:	200002d0 	.word	0x200002d0
 80037fc:	2000000a 	.word	0x2000000a

08003800 <LPS25HB_get_pressure>:

float LPS25HB_get_pressure(void) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <LPS25HB_get_pressure+0x50>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <LPS25HB_get_pressure+0x14>
	        return -1;
 800380e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003812:	e016      	b.n	8003842 <LPS25HB_get_pressure+0x42>
	}

	uint8_t pressure_data[3];

	LPS25HB_read_array(LPS25HB_ADDRESS_PRESS_OUT_XL, pressure_data, 3);
 8003814:	463b      	mov	r3, r7
 8003816:	2203      	movs	r2, #3
 8003818:	4619      	mov	r1, r3
 800381a:	2028      	movs	r0, #40	@ 0x28
 800381c:	f7ff ff66 	bl	80036ec <LPS25HB_read_array>

	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8003820:	78bb      	ldrb	r3, [r7, #2]
 8003822:	041a      	lsls	r2, r3, #16
									 pressure_data[1] << 8 |
 8003824:	787b      	ldrb	r3, [r7, #1]
 8003826:	021b      	lsls	r3, r3, #8
	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 8003828:	4313      	orrs	r3, r2
									 pressure_data[0]);
 800382a:	783a      	ldrb	r2, [r7, #0]
	int32_t pressure_raw = (int32_t)(pressure_data[2] << 16 |
 800382c:	4313      	orrs	r3, r2
 800382e:	607b      	str	r3, [r7, #4]

	return (float)(pressure_raw / 4096.0f);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003854 <LPS25HB_get_pressure+0x54>
 800383e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8003842:	eef0 7a47 	vmov.f32	s15, s14
 8003846:	eeb0 0a67 	vmov.f32	s0, s15
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200002cc 	.word	0x200002cc
 8003854:	45800000 	.word	0x45800000

08003858 <LPS25HB_get_temperature>:

float LPS25HB_get_temperature(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0

	if (I2C_read_data == NULL) {
 800385e:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <LPS25HB_get_temperature+0x54>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <LPS25HB_get_temperature+0x14>
		return -1;
 8003866:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800386a:	e01a      	b.n	80038a2 <LPS25HB_get_temperature+0x4a>
	}

	uint8_t temperature_data[2];

	LPS25HB_read_array(LPS25HB_ADDRESS_TEMP_OUT_L, temperature_data, 2);
 800386c:	1d3b      	adds	r3, r7, #4
 800386e:	2202      	movs	r2, #2
 8003870:	4619      	mov	r1, r3
 8003872:	202b      	movs	r0, #43	@ 0x2b
 8003874:	f7ff ff3a 	bl	80036ec <LPS25HB_read_array>

	int16_t temperature_raw = (int16_t)(temperature_data[1] << 8 |
 8003878:	797b      	ldrb	r3, [r7, #5]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	b21a      	sxth	r2, r3
							   	   	    temperature_data[0]);
 800387e:	793b      	ldrb	r3, [r7, #4]
 8003880:	b21b      	sxth	r3, r3
	int16_t temperature_raw = (int16_t)(temperature_data[1] << 8 |
 8003882:	4313      	orrs	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]

	return 42.5f + ((float)temperature_raw / 480.0f);
 8003886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003892:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80038b0 <LPS25HB_get_temperature+0x58>
 8003896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800389a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80038b4 <LPS25HB_get_temperature+0x5c>
 800389e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80038a2:	eeb0 0a67 	vmov.f32	s0, s15
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200002cc 	.word	0x200002cc
 80038b0:	43f00000 	.word	0x43f00000
 80038b4:	422a0000 	.word	0x422a0000

080038b8 <__cvt>:
 80038b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	ec57 6b10 	vmov	r6, r7, d0
 80038c0:	2f00      	cmp	r7, #0
 80038c2:	460c      	mov	r4, r1
 80038c4:	4619      	mov	r1, r3
 80038c6:	463b      	mov	r3, r7
 80038c8:	bfbb      	ittet	lt
 80038ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80038ce:	461f      	movlt	r7, r3
 80038d0:	2300      	movge	r3, #0
 80038d2:	232d      	movlt	r3, #45	@ 0x2d
 80038d4:	700b      	strb	r3, [r1, #0]
 80038d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80038dc:	4691      	mov	r9, r2
 80038de:	f023 0820 	bic.w	r8, r3, #32
 80038e2:	bfbc      	itt	lt
 80038e4:	4632      	movlt	r2, r6
 80038e6:	4616      	movlt	r6, r2
 80038e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038ec:	d005      	beq.n	80038fa <__cvt+0x42>
 80038ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80038f2:	d100      	bne.n	80038f6 <__cvt+0x3e>
 80038f4:	3401      	adds	r4, #1
 80038f6:	2102      	movs	r1, #2
 80038f8:	e000      	b.n	80038fc <__cvt+0x44>
 80038fa:	2103      	movs	r1, #3
 80038fc:	ab03      	add	r3, sp, #12
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	ab02      	add	r3, sp, #8
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	ec47 6b10 	vmov	d0, r6, r7
 8003908:	4653      	mov	r3, sl
 800390a:	4622      	mov	r2, r4
 800390c:	f000 fe5c 	bl	80045c8 <_dtoa_r>
 8003910:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003914:	4605      	mov	r5, r0
 8003916:	d119      	bne.n	800394c <__cvt+0x94>
 8003918:	f019 0f01 	tst.w	r9, #1
 800391c:	d00e      	beq.n	800393c <__cvt+0x84>
 800391e:	eb00 0904 	add.w	r9, r0, r4
 8003922:	2200      	movs	r2, #0
 8003924:	2300      	movs	r3, #0
 8003926:	4630      	mov	r0, r6
 8003928:	4639      	mov	r1, r7
 800392a:	f7fd f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800392e:	b108      	cbz	r0, 8003934 <__cvt+0x7c>
 8003930:	f8cd 900c 	str.w	r9, [sp, #12]
 8003934:	2230      	movs	r2, #48	@ 0x30
 8003936:	9b03      	ldr	r3, [sp, #12]
 8003938:	454b      	cmp	r3, r9
 800393a:	d31e      	bcc.n	800397a <__cvt+0xc2>
 800393c:	9b03      	ldr	r3, [sp, #12]
 800393e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003940:	1b5b      	subs	r3, r3, r5
 8003942:	4628      	mov	r0, r5
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	b004      	add	sp, #16
 8003948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003950:	eb00 0904 	add.w	r9, r0, r4
 8003954:	d1e5      	bne.n	8003922 <__cvt+0x6a>
 8003956:	7803      	ldrb	r3, [r0, #0]
 8003958:	2b30      	cmp	r3, #48	@ 0x30
 800395a:	d10a      	bne.n	8003972 <__cvt+0xba>
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	4630      	mov	r0, r6
 8003962:	4639      	mov	r1, r7
 8003964:	f7fd f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003968:	b918      	cbnz	r0, 8003972 <__cvt+0xba>
 800396a:	f1c4 0401 	rsb	r4, r4, #1
 800396e:	f8ca 4000 	str.w	r4, [sl]
 8003972:	f8da 3000 	ldr.w	r3, [sl]
 8003976:	4499      	add	r9, r3
 8003978:	e7d3      	b.n	8003922 <__cvt+0x6a>
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	9103      	str	r1, [sp, #12]
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e7d9      	b.n	8003936 <__cvt+0x7e>

08003982 <__exponent>:
 8003982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003984:	2900      	cmp	r1, #0
 8003986:	bfba      	itte	lt
 8003988:	4249      	neglt	r1, r1
 800398a:	232d      	movlt	r3, #45	@ 0x2d
 800398c:	232b      	movge	r3, #43	@ 0x2b
 800398e:	2909      	cmp	r1, #9
 8003990:	7002      	strb	r2, [r0, #0]
 8003992:	7043      	strb	r3, [r0, #1]
 8003994:	dd29      	ble.n	80039ea <__exponent+0x68>
 8003996:	f10d 0307 	add.w	r3, sp, #7
 800399a:	461d      	mov	r5, r3
 800399c:	270a      	movs	r7, #10
 800399e:	461a      	mov	r2, r3
 80039a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80039a4:	fb07 1416 	mls	r4, r7, r6, r1
 80039a8:	3430      	adds	r4, #48	@ 0x30
 80039aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80039ae:	460c      	mov	r4, r1
 80039b0:	2c63      	cmp	r4, #99	@ 0x63
 80039b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80039b6:	4631      	mov	r1, r6
 80039b8:	dcf1      	bgt.n	800399e <__exponent+0x1c>
 80039ba:	3130      	adds	r1, #48	@ 0x30
 80039bc:	1e94      	subs	r4, r2, #2
 80039be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80039c2:	1c41      	adds	r1, r0, #1
 80039c4:	4623      	mov	r3, r4
 80039c6:	42ab      	cmp	r3, r5
 80039c8:	d30a      	bcc.n	80039e0 <__exponent+0x5e>
 80039ca:	f10d 0309 	add.w	r3, sp, #9
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	42ac      	cmp	r4, r5
 80039d2:	bf88      	it	hi
 80039d4:	2300      	movhi	r3, #0
 80039d6:	3302      	adds	r3, #2
 80039d8:	4403      	add	r3, r0
 80039da:	1a18      	subs	r0, r3, r0
 80039dc:	b003      	add	sp, #12
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80039e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80039e8:	e7ed      	b.n	80039c6 <__exponent+0x44>
 80039ea:	2330      	movs	r3, #48	@ 0x30
 80039ec:	3130      	adds	r1, #48	@ 0x30
 80039ee:	7083      	strb	r3, [r0, #2]
 80039f0:	70c1      	strb	r1, [r0, #3]
 80039f2:	1d03      	adds	r3, r0, #4
 80039f4:	e7f1      	b.n	80039da <__exponent+0x58>
	...

080039f8 <_printf_float>:
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	b08d      	sub	sp, #52	@ 0x34
 80039fe:	460c      	mov	r4, r1
 8003a00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003a04:	4616      	mov	r6, r2
 8003a06:	461f      	mov	r7, r3
 8003a08:	4605      	mov	r5, r0
 8003a0a:	f000 fcdb 	bl	80043c4 <_localeconv_r>
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	9304      	str	r3, [sp, #16]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fc2c 	bl	8000270 <strlen>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a20:	9005      	str	r0, [sp, #20]
 8003a22:	3307      	adds	r3, #7
 8003a24:	f023 0307 	bic.w	r3, r3, #7
 8003a28:	f103 0208 	add.w	r2, r3, #8
 8003a2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a30:	f8d4 b000 	ldr.w	fp, [r4]
 8003a34:	f8c8 2000 	str.w	r2, [r8]
 8003a38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003a40:	9307      	str	r3, [sp, #28]
 8003a42:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8003cc0 <_printf_float+0x2c8>)
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	f7fd f86a 	bl	8000b2c <__aeabi_dcmpun>
 8003a58:	bb70      	cbnz	r0, 8003ab8 <_printf_float+0xc0>
 8003a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a5e:	4b98      	ldr	r3, [pc, #608]	@ (8003cc0 <_printf_float+0x2c8>)
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	f7fd f844 	bl	8000af0 <__aeabi_dcmple>
 8003a68:	bb30      	cbnz	r0, 8003ab8 <_printf_float+0xc0>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4640      	mov	r0, r8
 8003a70:	4649      	mov	r1, r9
 8003a72:	f7fd f833 	bl	8000adc <__aeabi_dcmplt>
 8003a76:	b110      	cbz	r0, 8003a7e <_printf_float+0x86>
 8003a78:	232d      	movs	r3, #45	@ 0x2d
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a7e:	4a91      	ldr	r2, [pc, #580]	@ (8003cc4 <_printf_float+0x2cc>)
 8003a80:	4b91      	ldr	r3, [pc, #580]	@ (8003cc8 <_printf_float+0x2d0>)
 8003a82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a86:	bf94      	ite	ls
 8003a88:	4690      	movls	r8, r2
 8003a8a:	4698      	movhi	r8, r3
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	f02b 0304 	bic.w	r3, fp, #4
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	f04f 0900 	mov.w	r9, #0
 8003a9a:	9700      	str	r7, [sp, #0]
 8003a9c:	4633      	mov	r3, r6
 8003a9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f9d2 	bl	8003e4c <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	f040 808d 	bne.w	8003bc8 <_printf_float+0x1d0>
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	b00d      	add	sp, #52	@ 0x34
 8003ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	4640      	mov	r0, r8
 8003abe:	4649      	mov	r1, r9
 8003ac0:	f7fd f834 	bl	8000b2c <__aeabi_dcmpun>
 8003ac4:	b140      	cbz	r0, 8003ad8 <_printf_float+0xe0>
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfbc      	itt	lt
 8003acc:	232d      	movlt	r3, #45	@ 0x2d
 8003ace:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ccc <_printf_float+0x2d4>)
 8003ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd0 <_printf_float+0x2d8>)
 8003ad6:	e7d4      	b.n	8003a82 <_printf_float+0x8a>
 8003ad8:	6863      	ldr	r3, [r4, #4]
 8003ada:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003ade:	9206      	str	r2, [sp, #24]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	d13b      	bne.n	8003b5c <_printf_float+0x164>
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	6063      	str	r3, [r4, #4]
 8003ae8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003aec:	2300      	movs	r3, #0
 8003aee:	6022      	str	r2, [r4, #0]
 8003af0:	9303      	str	r3, [sp, #12]
 8003af2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003af4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003af8:	ab09      	add	r3, sp, #36	@ 0x24
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	6861      	ldr	r1, [r4, #4]
 8003afe:	ec49 8b10 	vmov	d0, r8, r9
 8003b02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7ff fed6 	bl	80038b8 <__cvt>
 8003b0c:	9b06      	ldr	r3, [sp, #24]
 8003b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003b10:	2b47      	cmp	r3, #71	@ 0x47
 8003b12:	4680      	mov	r8, r0
 8003b14:	d129      	bne.n	8003b6a <_printf_float+0x172>
 8003b16:	1cc8      	adds	r0, r1, #3
 8003b18:	db02      	blt.n	8003b20 <_printf_float+0x128>
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	dd41      	ble.n	8003ba4 <_printf_float+0x1ac>
 8003b20:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b24:	fa5f fa8a 	uxtb.w	sl, sl
 8003b28:	3901      	subs	r1, #1
 8003b2a:	4652      	mov	r2, sl
 8003b2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003b30:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b32:	f7ff ff26 	bl	8003982 <__exponent>
 8003b36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b38:	1813      	adds	r3, r2, r0
 8003b3a:	2a01      	cmp	r2, #1
 8003b3c:	4681      	mov	r9, r0
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	dc02      	bgt.n	8003b48 <_printf_float+0x150>
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	07d2      	lsls	r2, r2, #31
 8003b46:	d501      	bpl.n	8003b4c <_printf_float+0x154>
 8003b48:	3301      	adds	r3, #1
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0a2      	beq.n	8003a9a <_printf_float+0xa2>
 8003b54:	232d      	movs	r3, #45	@ 0x2d
 8003b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b5a:	e79e      	b.n	8003a9a <_printf_float+0xa2>
 8003b5c:	9a06      	ldr	r2, [sp, #24]
 8003b5e:	2a47      	cmp	r2, #71	@ 0x47
 8003b60:	d1c2      	bne.n	8003ae8 <_printf_float+0xf0>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1c0      	bne.n	8003ae8 <_printf_float+0xf0>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e7bd      	b.n	8003ae6 <_printf_float+0xee>
 8003b6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b6e:	d9db      	bls.n	8003b28 <_printf_float+0x130>
 8003b70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b74:	d118      	bne.n	8003ba8 <_printf_float+0x1b0>
 8003b76:	2900      	cmp	r1, #0
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	dd0b      	ble.n	8003b94 <_printf_float+0x19c>
 8003b7c:	6121      	str	r1, [r4, #16]
 8003b7e:	b913      	cbnz	r3, 8003b86 <_printf_float+0x18e>
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	07d0      	lsls	r0, r2, #31
 8003b84:	d502      	bpl.n	8003b8c <_printf_float+0x194>
 8003b86:	3301      	adds	r3, #1
 8003b88:	440b      	add	r3, r1
 8003b8a:	6123      	str	r3, [r4, #16]
 8003b8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b8e:	f04f 0900 	mov.w	r9, #0
 8003b92:	e7db      	b.n	8003b4c <_printf_float+0x154>
 8003b94:	b913      	cbnz	r3, 8003b9c <_printf_float+0x1a4>
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	07d2      	lsls	r2, r2, #31
 8003b9a:	d501      	bpl.n	8003ba0 <_printf_float+0x1a8>
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	e7f4      	b.n	8003b8a <_printf_float+0x192>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e7f2      	b.n	8003b8a <_printf_float+0x192>
 8003ba4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003baa:	4299      	cmp	r1, r3
 8003bac:	db05      	blt.n	8003bba <_printf_float+0x1c2>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	6121      	str	r1, [r4, #16]
 8003bb2:	07d8      	lsls	r0, r3, #31
 8003bb4:	d5ea      	bpl.n	8003b8c <_printf_float+0x194>
 8003bb6:	1c4b      	adds	r3, r1, #1
 8003bb8:	e7e7      	b.n	8003b8a <_printf_float+0x192>
 8003bba:	2900      	cmp	r1, #0
 8003bbc:	bfd4      	ite	le
 8003bbe:	f1c1 0202 	rsble	r2, r1, #2
 8003bc2:	2201      	movgt	r2, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	e7e0      	b.n	8003b8a <_printf_float+0x192>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	055a      	lsls	r2, r3, #21
 8003bcc:	d407      	bmi.n	8003bde <_printf_float+0x1e6>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b8      	blx	r7
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d12b      	bne.n	8003c34 <_printf_float+0x23c>
 8003bdc:	e767      	b.n	8003aae <_printf_float+0xb6>
 8003bde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003be2:	f240 80dd 	bls.w	8003da0 <_printf_float+0x3a8>
 8003be6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003bea:	2200      	movs	r2, #0
 8003bec:	2300      	movs	r3, #0
 8003bee:	f7fc ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d033      	beq.n	8003c5e <_printf_float+0x266>
 8003bf6:	4a37      	ldr	r2, [pc, #220]	@ (8003cd4 <_printf_float+0x2dc>)
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	47b8      	blx	r7
 8003c00:	3001      	adds	r0, #1
 8003c02:	f43f af54 	beq.w	8003aae <_printf_float+0xb6>
 8003c06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003c0a:	4543      	cmp	r3, r8
 8003c0c:	db02      	blt.n	8003c14 <_printf_float+0x21c>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	07d8      	lsls	r0, r3, #31
 8003c12:	d50f      	bpl.n	8003c34 <_printf_float+0x23c>
 8003c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c18:	4631      	mov	r1, r6
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	47b8      	blx	r7
 8003c1e:	3001      	adds	r0, #1
 8003c20:	f43f af45 	beq.w	8003aae <_printf_float+0xb6>
 8003c24:	f04f 0900 	mov.w	r9, #0
 8003c28:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c2c:	f104 0a1a 	add.w	sl, r4, #26
 8003c30:	45c8      	cmp	r8, r9
 8003c32:	dc09      	bgt.n	8003c48 <_printf_float+0x250>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	079b      	lsls	r3, r3, #30
 8003c38:	f100 8103 	bmi.w	8003e42 <_printf_float+0x44a>
 8003c3c:	68e0      	ldr	r0, [r4, #12]
 8003c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c40:	4298      	cmp	r0, r3
 8003c42:	bfb8      	it	lt
 8003c44:	4618      	movlt	r0, r3
 8003c46:	e734      	b.n	8003ab2 <_printf_float+0xba>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4652      	mov	r2, sl
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47b8      	blx	r7
 8003c52:	3001      	adds	r0, #1
 8003c54:	f43f af2b 	beq.w	8003aae <_printf_float+0xb6>
 8003c58:	f109 0901 	add.w	r9, r9, #1
 8003c5c:	e7e8      	b.n	8003c30 <_printf_float+0x238>
 8003c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dc39      	bgt.n	8003cd8 <_printf_float+0x2e0>
 8003c64:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <_printf_float+0x2dc>)
 8003c66:	2301      	movs	r3, #1
 8003c68:	4631      	mov	r1, r6
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	47b8      	blx	r7
 8003c6e:	3001      	adds	r0, #1
 8003c70:	f43f af1d 	beq.w	8003aae <_printf_float+0xb6>
 8003c74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003c78:	ea59 0303 	orrs.w	r3, r9, r3
 8003c7c:	d102      	bne.n	8003c84 <_printf_float+0x28c>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	07d9      	lsls	r1, r3, #31
 8003c82:	d5d7      	bpl.n	8003c34 <_printf_float+0x23c>
 8003c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	f43f af0d 	beq.w	8003aae <_printf_float+0xb6>
 8003c94:	f04f 0a00 	mov.w	sl, #0
 8003c98:	f104 0b1a 	add.w	fp, r4, #26
 8003c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c9e:	425b      	negs	r3, r3
 8003ca0:	4553      	cmp	r3, sl
 8003ca2:	dc01      	bgt.n	8003ca8 <_printf_float+0x2b0>
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	e793      	b.n	8003bd0 <_printf_float+0x1d8>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	465a      	mov	r2, fp
 8003cac:	4631      	mov	r1, r6
 8003cae:	4628      	mov	r0, r5
 8003cb0:	47b8      	blx	r7
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	f43f aefb 	beq.w	8003aae <_printf_float+0xb6>
 8003cb8:	f10a 0a01 	add.w	sl, sl, #1
 8003cbc:	e7ee      	b.n	8003c9c <_printf_float+0x2a4>
 8003cbe:	bf00      	nop
 8003cc0:	7fefffff 	.word	0x7fefffff
 8003cc4:	08007463 	.word	0x08007463
 8003cc8:	08007467 	.word	0x08007467
 8003ccc:	0800746b 	.word	0x0800746b
 8003cd0:	0800746f 	.word	0x0800746f
 8003cd4:	08007473 	.word	0x08007473
 8003cd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003cde:	4553      	cmp	r3, sl
 8003ce0:	bfa8      	it	ge
 8003ce2:	4653      	movge	r3, sl
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	dc36      	bgt.n	8003d58 <_printf_float+0x360>
 8003cea:	f04f 0b00 	mov.w	fp, #0
 8003cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cf2:	f104 021a 	add.w	r2, r4, #26
 8003cf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cf8:	9306      	str	r3, [sp, #24]
 8003cfa:	eba3 0309 	sub.w	r3, r3, r9
 8003cfe:	455b      	cmp	r3, fp
 8003d00:	dc31      	bgt.n	8003d66 <_printf_float+0x36e>
 8003d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d04:	459a      	cmp	sl, r3
 8003d06:	dc3a      	bgt.n	8003d7e <_printf_float+0x386>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	07da      	lsls	r2, r3, #31
 8003d0c:	d437      	bmi.n	8003d7e <_printf_float+0x386>
 8003d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d10:	ebaa 0903 	sub.w	r9, sl, r3
 8003d14:	9b06      	ldr	r3, [sp, #24]
 8003d16:	ebaa 0303 	sub.w	r3, sl, r3
 8003d1a:	4599      	cmp	r9, r3
 8003d1c:	bfa8      	it	ge
 8003d1e:	4699      	movge	r9, r3
 8003d20:	f1b9 0f00 	cmp.w	r9, #0
 8003d24:	dc33      	bgt.n	8003d8e <_printf_float+0x396>
 8003d26:	f04f 0800 	mov.w	r8, #0
 8003d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d2e:	f104 0b1a 	add.w	fp, r4, #26
 8003d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d34:	ebaa 0303 	sub.w	r3, sl, r3
 8003d38:	eba3 0309 	sub.w	r3, r3, r9
 8003d3c:	4543      	cmp	r3, r8
 8003d3e:	f77f af79 	ble.w	8003c34 <_printf_float+0x23c>
 8003d42:	2301      	movs	r3, #1
 8003d44:	465a      	mov	r2, fp
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f43f aeae 	beq.w	8003aae <_printf_float+0xb6>
 8003d52:	f108 0801 	add.w	r8, r8, #1
 8003d56:	e7ec      	b.n	8003d32 <_printf_float+0x33a>
 8003d58:	4642      	mov	r2, r8
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	47b8      	blx	r7
 8003d60:	3001      	adds	r0, #1
 8003d62:	d1c2      	bne.n	8003cea <_printf_float+0x2f2>
 8003d64:	e6a3      	b.n	8003aae <_printf_float+0xb6>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	9206      	str	r2, [sp, #24]
 8003d6e:	47b8      	blx	r7
 8003d70:	3001      	adds	r0, #1
 8003d72:	f43f ae9c 	beq.w	8003aae <_printf_float+0xb6>
 8003d76:	9a06      	ldr	r2, [sp, #24]
 8003d78:	f10b 0b01 	add.w	fp, fp, #1
 8003d7c:	e7bb      	b.n	8003cf6 <_printf_float+0x2fe>
 8003d7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b8      	blx	r7
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d1c0      	bne.n	8003d0e <_printf_float+0x316>
 8003d8c:	e68f      	b.n	8003aae <_printf_float+0xb6>
 8003d8e:	9a06      	ldr	r2, [sp, #24]
 8003d90:	464b      	mov	r3, r9
 8003d92:	4442      	add	r2, r8
 8003d94:	4631      	mov	r1, r6
 8003d96:	4628      	mov	r0, r5
 8003d98:	47b8      	blx	r7
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d1c3      	bne.n	8003d26 <_printf_float+0x32e>
 8003d9e:	e686      	b.n	8003aae <_printf_float+0xb6>
 8003da0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003da4:	f1ba 0f01 	cmp.w	sl, #1
 8003da8:	dc01      	bgt.n	8003dae <_printf_float+0x3b6>
 8003daa:	07db      	lsls	r3, r3, #31
 8003dac:	d536      	bpl.n	8003e1c <_printf_float+0x424>
 8003dae:	2301      	movs	r3, #1
 8003db0:	4642      	mov	r2, r8
 8003db2:	4631      	mov	r1, r6
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b8      	blx	r7
 8003db8:	3001      	adds	r0, #1
 8003dba:	f43f ae78 	beq.w	8003aae <_printf_float+0xb6>
 8003dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f43f ae70 	beq.w	8003aae <_printf_float+0xb6>
 8003dce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dda:	f7fc fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dde:	b9c0      	cbnz	r0, 8003e12 <_printf_float+0x41a>
 8003de0:	4653      	mov	r3, sl
 8003de2:	f108 0201 	add.w	r2, r8, #1
 8003de6:	4631      	mov	r1, r6
 8003de8:	4628      	mov	r0, r5
 8003dea:	47b8      	blx	r7
 8003dec:	3001      	adds	r0, #1
 8003dee:	d10c      	bne.n	8003e0a <_printf_float+0x412>
 8003df0:	e65d      	b.n	8003aae <_printf_float+0xb6>
 8003df2:	2301      	movs	r3, #1
 8003df4:	465a      	mov	r2, fp
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	47b8      	blx	r7
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f43f ae56 	beq.w	8003aae <_printf_float+0xb6>
 8003e02:	f108 0801 	add.w	r8, r8, #1
 8003e06:	45d0      	cmp	r8, sl
 8003e08:	dbf3      	blt.n	8003df2 <_printf_float+0x3fa>
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003e10:	e6df      	b.n	8003bd2 <_printf_float+0x1da>
 8003e12:	f04f 0800 	mov.w	r8, #0
 8003e16:	f104 0b1a 	add.w	fp, r4, #26
 8003e1a:	e7f4      	b.n	8003e06 <_printf_float+0x40e>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4642      	mov	r2, r8
 8003e20:	e7e1      	b.n	8003de6 <_printf_float+0x3ee>
 8003e22:	2301      	movs	r3, #1
 8003e24:	464a      	mov	r2, r9
 8003e26:	4631      	mov	r1, r6
 8003e28:	4628      	mov	r0, r5
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	f43f ae3e 	beq.w	8003aae <_printf_float+0xb6>
 8003e32:	f108 0801 	add.w	r8, r8, #1
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003e3a:	1a5b      	subs	r3, r3, r1
 8003e3c:	4543      	cmp	r3, r8
 8003e3e:	dcf0      	bgt.n	8003e22 <_printf_float+0x42a>
 8003e40:	e6fc      	b.n	8003c3c <_printf_float+0x244>
 8003e42:	f04f 0800 	mov.w	r8, #0
 8003e46:	f104 0919 	add.w	r9, r4, #25
 8003e4a:	e7f4      	b.n	8003e36 <_printf_float+0x43e>

08003e4c <_printf_common>:
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	4616      	mov	r6, r2
 8003e52:	4698      	mov	r8, r3
 8003e54:	688a      	ldr	r2, [r1, #8]
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bfb8      	it	lt
 8003e60:	4613      	movlt	r3, r2
 8003e62:	6033      	str	r3, [r6, #0]
 8003e64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e68:	4607      	mov	r7, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	b10a      	cbz	r2, 8003e72 <_printf_common+0x26>
 8003e6e:	3301      	adds	r3, #1
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	0699      	lsls	r1, r3, #26
 8003e76:	bf42      	ittt	mi
 8003e78:	6833      	ldrmi	r3, [r6, #0]
 8003e7a:	3302      	addmi	r3, #2
 8003e7c:	6033      	strmi	r3, [r6, #0]
 8003e7e:	6825      	ldr	r5, [r4, #0]
 8003e80:	f015 0506 	ands.w	r5, r5, #6
 8003e84:	d106      	bne.n	8003e94 <_printf_common+0x48>
 8003e86:	f104 0a19 	add.w	sl, r4, #25
 8003e8a:	68e3      	ldr	r3, [r4, #12]
 8003e8c:	6832      	ldr	r2, [r6, #0]
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	dc26      	bgt.n	8003ee2 <_printf_common+0x96>
 8003e94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e98:	6822      	ldr	r2, [r4, #0]
 8003e9a:	3b00      	subs	r3, #0
 8003e9c:	bf18      	it	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	0692      	lsls	r2, r2, #26
 8003ea2:	d42b      	bmi.n	8003efc <_printf_common+0xb0>
 8003ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c8      	blx	r9
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d01e      	beq.n	8003ef0 <_printf_common+0xa4>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	f003 0306 	and.w	r3, r3, #6
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf02      	ittt	eq
 8003ebe:	68e5      	ldreq	r5, [r4, #12]
 8003ec0:	6833      	ldreq	r3, [r6, #0]
 8003ec2:	1aed      	subeq	r5, r5, r3
 8003ec4:	68a3      	ldr	r3, [r4, #8]
 8003ec6:	bf0c      	ite	eq
 8003ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ecc:	2500      	movne	r5, #0
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	bfc4      	itt	gt
 8003ed2:	1a9b      	subgt	r3, r3, r2
 8003ed4:	18ed      	addgt	r5, r5, r3
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	341a      	adds	r4, #26
 8003eda:	42b5      	cmp	r5, r6
 8003edc:	d11a      	bne.n	8003f14 <_printf_common+0xc8>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e008      	b.n	8003ef4 <_printf_common+0xa8>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	4638      	mov	r0, r7
 8003eea:	47c8      	blx	r9
 8003eec:	3001      	adds	r0, #1
 8003eee:	d103      	bne.n	8003ef8 <_printf_common+0xac>
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	3501      	adds	r5, #1
 8003efa:	e7c6      	b.n	8003e8a <_printf_common+0x3e>
 8003efc:	18e1      	adds	r1, r4, r3
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	2030      	movs	r0, #48	@ 0x30
 8003f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f06:	4422      	add	r2, r4
 8003f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f10:	3302      	adds	r3, #2
 8003f12:	e7c7      	b.n	8003ea4 <_printf_common+0x58>
 8003f14:	2301      	movs	r3, #1
 8003f16:	4622      	mov	r2, r4
 8003f18:	4641      	mov	r1, r8
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	47c8      	blx	r9
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d0e6      	beq.n	8003ef0 <_printf_common+0xa4>
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7d9      	b.n	8003eda <_printf_common+0x8e>
	...

08003f28 <_printf_i>:
 8003f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f2c:	7e0f      	ldrb	r7, [r1, #24]
 8003f2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f30:	2f78      	cmp	r7, #120	@ 0x78
 8003f32:	4691      	mov	r9, r2
 8003f34:	4680      	mov	r8, r0
 8003f36:	460c      	mov	r4, r1
 8003f38:	469a      	mov	sl, r3
 8003f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f3e:	d807      	bhi.n	8003f50 <_printf_i+0x28>
 8003f40:	2f62      	cmp	r7, #98	@ 0x62
 8003f42:	d80a      	bhi.n	8003f5a <_printf_i+0x32>
 8003f44:	2f00      	cmp	r7, #0
 8003f46:	f000 80d2 	beq.w	80040ee <_printf_i+0x1c6>
 8003f4a:	2f58      	cmp	r7, #88	@ 0x58
 8003f4c:	f000 80b9 	beq.w	80040c2 <_printf_i+0x19a>
 8003f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f58:	e03a      	b.n	8003fd0 <_printf_i+0xa8>
 8003f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f5e:	2b15      	cmp	r3, #21
 8003f60:	d8f6      	bhi.n	8003f50 <_printf_i+0x28>
 8003f62:	a101      	add	r1, pc, #4	@ (adr r1, 8003f68 <_printf_i+0x40>)
 8003f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f68:	08003fc1 	.word	0x08003fc1
 8003f6c:	08003fd5 	.word	0x08003fd5
 8003f70:	08003f51 	.word	0x08003f51
 8003f74:	08003f51 	.word	0x08003f51
 8003f78:	08003f51 	.word	0x08003f51
 8003f7c:	08003f51 	.word	0x08003f51
 8003f80:	08003fd5 	.word	0x08003fd5
 8003f84:	08003f51 	.word	0x08003f51
 8003f88:	08003f51 	.word	0x08003f51
 8003f8c:	08003f51 	.word	0x08003f51
 8003f90:	08003f51 	.word	0x08003f51
 8003f94:	080040d5 	.word	0x080040d5
 8003f98:	08003fff 	.word	0x08003fff
 8003f9c:	0800408f 	.word	0x0800408f
 8003fa0:	08003f51 	.word	0x08003f51
 8003fa4:	08003f51 	.word	0x08003f51
 8003fa8:	080040f7 	.word	0x080040f7
 8003fac:	08003f51 	.word	0x08003f51
 8003fb0:	08003fff 	.word	0x08003fff
 8003fb4:	08003f51 	.word	0x08003f51
 8003fb8:	08003f51 	.word	0x08003f51
 8003fbc:	08004097 	.word	0x08004097
 8003fc0:	6833      	ldr	r3, [r6, #0]
 8003fc2:	1d1a      	adds	r2, r3, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6032      	str	r2, [r6, #0]
 8003fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e09d      	b.n	8004110 <_printf_i+0x1e8>
 8003fd4:	6833      	ldr	r3, [r6, #0]
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	1d19      	adds	r1, r3, #4
 8003fda:	6031      	str	r1, [r6, #0]
 8003fdc:	0606      	lsls	r6, r0, #24
 8003fde:	d501      	bpl.n	8003fe4 <_printf_i+0xbc>
 8003fe0:	681d      	ldr	r5, [r3, #0]
 8003fe2:	e003      	b.n	8003fec <_printf_i+0xc4>
 8003fe4:	0645      	lsls	r5, r0, #25
 8003fe6:	d5fb      	bpl.n	8003fe0 <_printf_i+0xb8>
 8003fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	da03      	bge.n	8003ff8 <_printf_i+0xd0>
 8003ff0:	232d      	movs	r3, #45	@ 0x2d
 8003ff2:	426d      	negs	r5, r5
 8003ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ff8:	4859      	ldr	r0, [pc, #356]	@ (8004160 <_printf_i+0x238>)
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	e011      	b.n	8004022 <_printf_i+0xfa>
 8003ffe:	6821      	ldr	r1, [r4, #0]
 8004000:	6833      	ldr	r3, [r6, #0]
 8004002:	0608      	lsls	r0, r1, #24
 8004004:	f853 5b04 	ldr.w	r5, [r3], #4
 8004008:	d402      	bmi.n	8004010 <_printf_i+0xe8>
 800400a:	0649      	lsls	r1, r1, #25
 800400c:	bf48      	it	mi
 800400e:	b2ad      	uxthmi	r5, r5
 8004010:	2f6f      	cmp	r7, #111	@ 0x6f
 8004012:	4853      	ldr	r0, [pc, #332]	@ (8004160 <_printf_i+0x238>)
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	bf14      	ite	ne
 8004018:	230a      	movne	r3, #10
 800401a:	2308      	moveq	r3, #8
 800401c:	2100      	movs	r1, #0
 800401e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004022:	6866      	ldr	r6, [r4, #4]
 8004024:	60a6      	str	r6, [r4, #8]
 8004026:	2e00      	cmp	r6, #0
 8004028:	bfa2      	ittt	ge
 800402a:	6821      	ldrge	r1, [r4, #0]
 800402c:	f021 0104 	bicge.w	r1, r1, #4
 8004030:	6021      	strge	r1, [r4, #0]
 8004032:	b90d      	cbnz	r5, 8004038 <_printf_i+0x110>
 8004034:	2e00      	cmp	r6, #0
 8004036:	d04b      	beq.n	80040d0 <_printf_i+0x1a8>
 8004038:	4616      	mov	r6, r2
 800403a:	fbb5 f1f3 	udiv	r1, r5, r3
 800403e:	fb03 5711 	mls	r7, r3, r1, r5
 8004042:	5dc7      	ldrb	r7, [r0, r7]
 8004044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004048:	462f      	mov	r7, r5
 800404a:	42bb      	cmp	r3, r7
 800404c:	460d      	mov	r5, r1
 800404e:	d9f4      	bls.n	800403a <_printf_i+0x112>
 8004050:	2b08      	cmp	r3, #8
 8004052:	d10b      	bne.n	800406c <_printf_i+0x144>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	07df      	lsls	r7, r3, #31
 8004058:	d508      	bpl.n	800406c <_printf_i+0x144>
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	6861      	ldr	r1, [r4, #4]
 800405e:	4299      	cmp	r1, r3
 8004060:	bfde      	ittt	le
 8004062:	2330      	movle	r3, #48	@ 0x30
 8004064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800406c:	1b92      	subs	r2, r2, r6
 800406e:	6122      	str	r2, [r4, #16]
 8004070:	f8cd a000 	str.w	sl, [sp]
 8004074:	464b      	mov	r3, r9
 8004076:	aa03      	add	r2, sp, #12
 8004078:	4621      	mov	r1, r4
 800407a:	4640      	mov	r0, r8
 800407c:	f7ff fee6 	bl	8003e4c <_printf_common>
 8004080:	3001      	adds	r0, #1
 8004082:	d14a      	bne.n	800411a <_printf_i+0x1f2>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	b004      	add	sp, #16
 800408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	f043 0320 	orr.w	r3, r3, #32
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	4833      	ldr	r0, [pc, #204]	@ (8004164 <_printf_i+0x23c>)
 8004098:	2778      	movs	r7, #120	@ 0x78
 800409a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	6831      	ldr	r1, [r6, #0]
 80040a2:	061f      	lsls	r7, r3, #24
 80040a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80040a8:	d402      	bmi.n	80040b0 <_printf_i+0x188>
 80040aa:	065f      	lsls	r7, r3, #25
 80040ac:	bf48      	it	mi
 80040ae:	b2ad      	uxthmi	r5, r5
 80040b0:	6031      	str	r1, [r6, #0]
 80040b2:	07d9      	lsls	r1, r3, #31
 80040b4:	bf44      	itt	mi
 80040b6:	f043 0320 	orrmi.w	r3, r3, #32
 80040ba:	6023      	strmi	r3, [r4, #0]
 80040bc:	b11d      	cbz	r5, 80040c6 <_printf_i+0x19e>
 80040be:	2310      	movs	r3, #16
 80040c0:	e7ac      	b.n	800401c <_printf_i+0xf4>
 80040c2:	4827      	ldr	r0, [pc, #156]	@ (8004160 <_printf_i+0x238>)
 80040c4:	e7e9      	b.n	800409a <_printf_i+0x172>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f023 0320 	bic.w	r3, r3, #32
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	e7f6      	b.n	80040be <_printf_i+0x196>
 80040d0:	4616      	mov	r6, r2
 80040d2:	e7bd      	b.n	8004050 <_printf_i+0x128>
 80040d4:	6833      	ldr	r3, [r6, #0]
 80040d6:	6825      	ldr	r5, [r4, #0]
 80040d8:	6961      	ldr	r1, [r4, #20]
 80040da:	1d18      	adds	r0, r3, #4
 80040dc:	6030      	str	r0, [r6, #0]
 80040de:	062e      	lsls	r6, r5, #24
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	d501      	bpl.n	80040e8 <_printf_i+0x1c0>
 80040e4:	6019      	str	r1, [r3, #0]
 80040e6:	e002      	b.n	80040ee <_printf_i+0x1c6>
 80040e8:	0668      	lsls	r0, r5, #25
 80040ea:	d5fb      	bpl.n	80040e4 <_printf_i+0x1bc>
 80040ec:	8019      	strh	r1, [r3, #0]
 80040ee:	2300      	movs	r3, #0
 80040f0:	6123      	str	r3, [r4, #16]
 80040f2:	4616      	mov	r6, r2
 80040f4:	e7bc      	b.n	8004070 <_printf_i+0x148>
 80040f6:	6833      	ldr	r3, [r6, #0]
 80040f8:	1d1a      	adds	r2, r3, #4
 80040fa:	6032      	str	r2, [r6, #0]
 80040fc:	681e      	ldr	r6, [r3, #0]
 80040fe:	6862      	ldr	r2, [r4, #4]
 8004100:	2100      	movs	r1, #0
 8004102:	4630      	mov	r0, r6
 8004104:	f7fc f864 	bl	80001d0 <memchr>
 8004108:	b108      	cbz	r0, 800410e <_printf_i+0x1e6>
 800410a:	1b80      	subs	r0, r0, r6
 800410c:	6060      	str	r0, [r4, #4]
 800410e:	6863      	ldr	r3, [r4, #4]
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	2300      	movs	r3, #0
 8004114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004118:	e7aa      	b.n	8004070 <_printf_i+0x148>
 800411a:	6923      	ldr	r3, [r4, #16]
 800411c:	4632      	mov	r2, r6
 800411e:	4649      	mov	r1, r9
 8004120:	4640      	mov	r0, r8
 8004122:	47d0      	blx	sl
 8004124:	3001      	adds	r0, #1
 8004126:	d0ad      	beq.n	8004084 <_printf_i+0x15c>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	079b      	lsls	r3, r3, #30
 800412c:	d413      	bmi.n	8004156 <_printf_i+0x22e>
 800412e:	68e0      	ldr	r0, [r4, #12]
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	4298      	cmp	r0, r3
 8004134:	bfb8      	it	lt
 8004136:	4618      	movlt	r0, r3
 8004138:	e7a6      	b.n	8004088 <_printf_i+0x160>
 800413a:	2301      	movs	r3, #1
 800413c:	4632      	mov	r2, r6
 800413e:	4649      	mov	r1, r9
 8004140:	4640      	mov	r0, r8
 8004142:	47d0      	blx	sl
 8004144:	3001      	adds	r0, #1
 8004146:	d09d      	beq.n	8004084 <_printf_i+0x15c>
 8004148:	3501      	adds	r5, #1
 800414a:	68e3      	ldr	r3, [r4, #12]
 800414c:	9903      	ldr	r1, [sp, #12]
 800414e:	1a5b      	subs	r3, r3, r1
 8004150:	42ab      	cmp	r3, r5
 8004152:	dcf2      	bgt.n	800413a <_printf_i+0x212>
 8004154:	e7eb      	b.n	800412e <_printf_i+0x206>
 8004156:	2500      	movs	r5, #0
 8004158:	f104 0619 	add.w	r6, r4, #25
 800415c:	e7f5      	b.n	800414a <_printf_i+0x222>
 800415e:	bf00      	nop
 8004160:	08007475 	.word	0x08007475
 8004164:	08007486 	.word	0x08007486

08004168 <std>:
 8004168:	2300      	movs	r3, #0
 800416a:	b510      	push	{r4, lr}
 800416c:	4604      	mov	r4, r0
 800416e:	e9c0 3300 	strd	r3, r3, [r0]
 8004172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004176:	6083      	str	r3, [r0, #8]
 8004178:	8181      	strh	r1, [r0, #12]
 800417a:	6643      	str	r3, [r0, #100]	@ 0x64
 800417c:	81c2      	strh	r2, [r0, #14]
 800417e:	6183      	str	r3, [r0, #24]
 8004180:	4619      	mov	r1, r3
 8004182:	2208      	movs	r2, #8
 8004184:	305c      	adds	r0, #92	@ 0x5c
 8004186:	f000 f914 	bl	80043b2 <memset>
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <std+0x58>)
 800418c:	6263      	str	r3, [r4, #36]	@ 0x24
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <std+0x5c>)
 8004190:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <std+0x60>)
 8004194:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <std+0x64>)
 8004198:	6323      	str	r3, [r4, #48]	@ 0x30
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <std+0x68>)
 800419c:	6224      	str	r4, [r4, #32]
 800419e:	429c      	cmp	r4, r3
 80041a0:	d006      	beq.n	80041b0 <std+0x48>
 80041a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041a6:	4294      	cmp	r4, r2
 80041a8:	d002      	beq.n	80041b0 <std+0x48>
 80041aa:	33d0      	adds	r3, #208	@ 0xd0
 80041ac:	429c      	cmp	r4, r3
 80041ae:	d105      	bne.n	80041bc <std+0x54>
 80041b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b8:	f000 b978 	b.w	80044ac <__retarget_lock_init_recursive>
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	bf00      	nop
 80041c0:	0800432d 	.word	0x0800432d
 80041c4:	0800434f 	.word	0x0800434f
 80041c8:	08004387 	.word	0x08004387
 80041cc:	080043ab 	.word	0x080043ab
 80041d0:	200002d4 	.word	0x200002d4

080041d4 <stdio_exit_handler>:
 80041d4:	4a02      	ldr	r2, [pc, #8]	@ (80041e0 <stdio_exit_handler+0xc>)
 80041d6:	4903      	ldr	r1, [pc, #12]	@ (80041e4 <stdio_exit_handler+0x10>)
 80041d8:	4803      	ldr	r0, [pc, #12]	@ (80041e8 <stdio_exit_handler+0x14>)
 80041da:	f000 b869 	b.w	80042b0 <_fwalk_sglue>
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	08005e0d 	.word	0x08005e0d
 80041e8:	2000001c 	.word	0x2000001c

080041ec <cleanup_stdio>:
 80041ec:	6841      	ldr	r1, [r0, #4]
 80041ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <cleanup_stdio+0x34>)
 80041f0:	4299      	cmp	r1, r3
 80041f2:	b510      	push	{r4, lr}
 80041f4:	4604      	mov	r4, r0
 80041f6:	d001      	beq.n	80041fc <cleanup_stdio+0x10>
 80041f8:	f001 fe08 	bl	8005e0c <_fflush_r>
 80041fc:	68a1      	ldr	r1, [r4, #8]
 80041fe:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <cleanup_stdio+0x38>)
 8004200:	4299      	cmp	r1, r3
 8004202:	d002      	beq.n	800420a <cleanup_stdio+0x1e>
 8004204:	4620      	mov	r0, r4
 8004206:	f001 fe01 	bl	8005e0c <_fflush_r>
 800420a:	68e1      	ldr	r1, [r4, #12]
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <cleanup_stdio+0x3c>)
 800420e:	4299      	cmp	r1, r3
 8004210:	d004      	beq.n	800421c <cleanup_stdio+0x30>
 8004212:	4620      	mov	r0, r4
 8004214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004218:	f001 bdf8 	b.w	8005e0c <_fflush_r>
 800421c:	bd10      	pop	{r4, pc}
 800421e:	bf00      	nop
 8004220:	200002d4 	.word	0x200002d4
 8004224:	2000033c 	.word	0x2000033c
 8004228:	200003a4 	.word	0x200003a4

0800422c <global_stdio_init.part.0>:
 800422c:	b510      	push	{r4, lr}
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <global_stdio_init.part.0+0x30>)
 8004230:	4c0b      	ldr	r4, [pc, #44]	@ (8004260 <global_stdio_init.part.0+0x34>)
 8004232:	4a0c      	ldr	r2, [pc, #48]	@ (8004264 <global_stdio_init.part.0+0x38>)
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	4620      	mov	r0, r4
 8004238:	2200      	movs	r2, #0
 800423a:	2104      	movs	r1, #4
 800423c:	f7ff ff94 	bl	8004168 <std>
 8004240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004244:	2201      	movs	r2, #1
 8004246:	2109      	movs	r1, #9
 8004248:	f7ff ff8e 	bl	8004168 <std>
 800424c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004250:	2202      	movs	r2, #2
 8004252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004256:	2112      	movs	r1, #18
 8004258:	f7ff bf86 	b.w	8004168 <std>
 800425c:	2000040c 	.word	0x2000040c
 8004260:	200002d4 	.word	0x200002d4
 8004264:	080041d5 	.word	0x080041d5

08004268 <__sfp_lock_acquire>:
 8004268:	4801      	ldr	r0, [pc, #4]	@ (8004270 <__sfp_lock_acquire+0x8>)
 800426a:	f000 b920 	b.w	80044ae <__retarget_lock_acquire_recursive>
 800426e:	bf00      	nop
 8004270:	20000415 	.word	0x20000415

08004274 <__sfp_lock_release>:
 8004274:	4801      	ldr	r0, [pc, #4]	@ (800427c <__sfp_lock_release+0x8>)
 8004276:	f000 b91b 	b.w	80044b0 <__retarget_lock_release_recursive>
 800427a:	bf00      	nop
 800427c:	20000415 	.word	0x20000415

08004280 <__sinit>:
 8004280:	b510      	push	{r4, lr}
 8004282:	4604      	mov	r4, r0
 8004284:	f7ff fff0 	bl	8004268 <__sfp_lock_acquire>
 8004288:	6a23      	ldr	r3, [r4, #32]
 800428a:	b11b      	cbz	r3, 8004294 <__sinit+0x14>
 800428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004290:	f7ff bff0 	b.w	8004274 <__sfp_lock_release>
 8004294:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <__sinit+0x28>)
 8004296:	6223      	str	r3, [r4, #32]
 8004298:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <__sinit+0x2c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f5      	bne.n	800428c <__sinit+0xc>
 80042a0:	f7ff ffc4 	bl	800422c <global_stdio_init.part.0>
 80042a4:	e7f2      	b.n	800428c <__sinit+0xc>
 80042a6:	bf00      	nop
 80042a8:	080041ed 	.word	0x080041ed
 80042ac:	2000040c 	.word	0x2000040c

080042b0 <_fwalk_sglue>:
 80042b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b4:	4607      	mov	r7, r0
 80042b6:	4688      	mov	r8, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	2600      	movs	r6, #0
 80042bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042c0:	f1b9 0901 	subs.w	r9, r9, #1
 80042c4:	d505      	bpl.n	80042d2 <_fwalk_sglue+0x22>
 80042c6:	6824      	ldr	r4, [r4, #0]
 80042c8:	2c00      	cmp	r4, #0
 80042ca:	d1f7      	bne.n	80042bc <_fwalk_sglue+0xc>
 80042cc:	4630      	mov	r0, r6
 80042ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d2:	89ab      	ldrh	r3, [r5, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d907      	bls.n	80042e8 <_fwalk_sglue+0x38>
 80042d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042dc:	3301      	adds	r3, #1
 80042de:	d003      	beq.n	80042e8 <_fwalk_sglue+0x38>
 80042e0:	4629      	mov	r1, r5
 80042e2:	4638      	mov	r0, r7
 80042e4:	47c0      	blx	r8
 80042e6:	4306      	orrs	r6, r0
 80042e8:	3568      	adds	r5, #104	@ 0x68
 80042ea:	e7e9      	b.n	80042c0 <_fwalk_sglue+0x10>

080042ec <siprintf>:
 80042ec:	b40e      	push	{r1, r2, r3}
 80042ee:	b500      	push	{lr}
 80042f0:	b09c      	sub	sp, #112	@ 0x70
 80042f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80042f4:	9002      	str	r0, [sp, #8]
 80042f6:	9006      	str	r0, [sp, #24]
 80042f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042fc:	4809      	ldr	r0, [pc, #36]	@ (8004324 <siprintf+0x38>)
 80042fe:	9107      	str	r1, [sp, #28]
 8004300:	9104      	str	r1, [sp, #16]
 8004302:	4909      	ldr	r1, [pc, #36]	@ (8004328 <siprintf+0x3c>)
 8004304:	f853 2b04 	ldr.w	r2, [r3], #4
 8004308:	9105      	str	r1, [sp, #20]
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	a902      	add	r1, sp, #8
 8004310:	f001 fbfc 	bl	8005b0c <_svfiprintf_r>
 8004314:	9b02      	ldr	r3, [sp, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	b01c      	add	sp, #112	@ 0x70
 800431c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004320:	b003      	add	sp, #12
 8004322:	4770      	bx	lr
 8004324:	20000018 	.word	0x20000018
 8004328:	ffff0208 	.word	0xffff0208

0800432c <__sread>:
 800432c:	b510      	push	{r4, lr}
 800432e:	460c      	mov	r4, r1
 8004330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004334:	f000 f86c 	bl	8004410 <_read_r>
 8004338:	2800      	cmp	r0, #0
 800433a:	bfab      	itete	ge
 800433c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800433e:	89a3      	ldrhlt	r3, [r4, #12]
 8004340:	181b      	addge	r3, r3, r0
 8004342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004346:	bfac      	ite	ge
 8004348:	6563      	strge	r3, [r4, #84]	@ 0x54
 800434a:	81a3      	strhlt	r3, [r4, #12]
 800434c:	bd10      	pop	{r4, pc}

0800434e <__swrite>:
 800434e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	461f      	mov	r7, r3
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	05db      	lsls	r3, r3, #23
 8004358:	4605      	mov	r5, r0
 800435a:	460c      	mov	r4, r1
 800435c:	4616      	mov	r6, r2
 800435e:	d505      	bpl.n	800436c <__swrite+0x1e>
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	2302      	movs	r3, #2
 8004366:	2200      	movs	r2, #0
 8004368:	f000 f840 	bl	80043ec <_lseek_r>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004372:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	4632      	mov	r2, r6
 800437a:	463b      	mov	r3, r7
 800437c:	4628      	mov	r0, r5
 800437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004382:	f000 b857 	b.w	8004434 <_write_r>

08004386 <__sseek>:
 8004386:	b510      	push	{r4, lr}
 8004388:	460c      	mov	r4, r1
 800438a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438e:	f000 f82d 	bl	80043ec <_lseek_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	bf15      	itete	ne
 8004398:	6560      	strne	r0, [r4, #84]	@ 0x54
 800439a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800439e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043a2:	81a3      	strheq	r3, [r4, #12]
 80043a4:	bf18      	it	ne
 80043a6:	81a3      	strhne	r3, [r4, #12]
 80043a8:	bd10      	pop	{r4, pc}

080043aa <__sclose>:
 80043aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ae:	f000 b80d 	b.w	80043cc <_close_r>

080043b2 <memset>:
 80043b2:	4402      	add	r2, r0
 80043b4:	4603      	mov	r3, r0
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d100      	bne.n	80043bc <memset+0xa>
 80043ba:	4770      	bx	lr
 80043bc:	f803 1b01 	strb.w	r1, [r3], #1
 80043c0:	e7f9      	b.n	80043b6 <memset+0x4>
	...

080043c4 <_localeconv_r>:
 80043c4:	4800      	ldr	r0, [pc, #0]	@ (80043c8 <_localeconv_r+0x4>)
 80043c6:	4770      	bx	lr
 80043c8:	20000158 	.word	0x20000158

080043cc <_close_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4d06      	ldr	r5, [pc, #24]	@ (80043e8 <_close_r+0x1c>)
 80043d0:	2300      	movs	r3, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fd fc28 	bl	8001c2c <_close>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_close_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_close_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000410 	.word	0x20000410

080043ec <_lseek_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d07      	ldr	r5, [pc, #28]	@ (800440c <_lseek_r+0x20>)
 80043f0:	4604      	mov	r4, r0
 80043f2:	4608      	mov	r0, r1
 80043f4:	4611      	mov	r1, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	602a      	str	r2, [r5, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7fd fc3d 	bl	8001c7a <_lseek>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_lseek_r+0x1e>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_lseek_r+0x1e>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000410 	.word	0x20000410

08004410 <_read_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d07      	ldr	r5, [pc, #28]	@ (8004430 <_read_r+0x20>)
 8004414:	4604      	mov	r4, r0
 8004416:	4608      	mov	r0, r1
 8004418:	4611      	mov	r1, r2
 800441a:	2200      	movs	r2, #0
 800441c:	602a      	str	r2, [r5, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	f7fd fbcb 	bl	8001bba <_read>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_read_r+0x1e>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_read_r+0x1e>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000410 	.word	0x20000410

08004434 <_write_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4d07      	ldr	r5, [pc, #28]	@ (8004454 <_write_r+0x20>)
 8004438:	4604      	mov	r4, r0
 800443a:	4608      	mov	r0, r1
 800443c:	4611      	mov	r1, r2
 800443e:	2200      	movs	r2, #0
 8004440:	602a      	str	r2, [r5, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f7fd fbd6 	bl	8001bf4 <_write>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_write_r+0x1e>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	b103      	cbz	r3, 8004452 <_write_r+0x1e>
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20000410 	.word	0x20000410

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	@ (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000018 	.word	0x20000018

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4d0d      	ldr	r5, [pc, #52]	@ (800449c <__libc_init_array+0x38>)
 8004468:	4c0d      	ldr	r4, [pc, #52]	@ (80044a0 <__libc_init_array+0x3c>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	2600      	movs	r6, #0
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	4d0b      	ldr	r5, [pc, #44]	@ (80044a4 <__libc_init_array+0x40>)
 8004476:	4c0c      	ldr	r4, [pc, #48]	@ (80044a8 <__libc_init_array+0x44>)
 8004478:	f002 ffc4 	bl	8007404 <_init>
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	2600      	movs	r6, #0
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	08007810 	.word	0x08007810
 80044a0:	08007810 	.word	0x08007810
 80044a4:	08007810 	.word	0x08007810
 80044a8:	08007814 	.word	0x08007814

080044ac <__retarget_lock_init_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_acquire_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <__retarget_lock_release_recursive>:
 80044b0:	4770      	bx	lr

080044b2 <quorem>:
 80044b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	6903      	ldr	r3, [r0, #16]
 80044b8:	690c      	ldr	r4, [r1, #16]
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	4607      	mov	r7, r0
 80044be:	db7e      	blt.n	80045be <quorem+0x10c>
 80044c0:	3c01      	subs	r4, #1
 80044c2:	f101 0814 	add.w	r8, r1, #20
 80044c6:	00a3      	lsls	r3, r4, #2
 80044c8:	f100 0514 	add.w	r5, r0, #20
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044dc:	3301      	adds	r3, #1
 80044de:	429a      	cmp	r2, r3
 80044e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80044e8:	d32e      	bcc.n	8004548 <quorem+0x96>
 80044ea:	f04f 0a00 	mov.w	sl, #0
 80044ee:	46c4      	mov	ip, r8
 80044f0:	46ae      	mov	lr, r5
 80044f2:	46d3      	mov	fp, sl
 80044f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80044f8:	b298      	uxth	r0, r3
 80044fa:	fb06 a000 	mla	r0, r6, r0, sl
 80044fe:	0c02      	lsrs	r2, r0, #16
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	fb06 2303 	mla	r3, r6, r3, r2
 8004506:	f8de 2000 	ldr.w	r2, [lr]
 800450a:	b280      	uxth	r0, r0
 800450c:	b292      	uxth	r2, r2
 800450e:	1a12      	subs	r2, r2, r0
 8004510:	445a      	add	r2, fp
 8004512:	f8de 0000 	ldr.w	r0, [lr]
 8004516:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800451a:	b29b      	uxth	r3, r3
 800451c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004520:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004524:	b292      	uxth	r2, r2
 8004526:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800452a:	45e1      	cmp	r9, ip
 800452c:	f84e 2b04 	str.w	r2, [lr], #4
 8004530:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004534:	d2de      	bcs.n	80044f4 <quorem+0x42>
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	58eb      	ldr	r3, [r5, r3]
 800453a:	b92b      	cbnz	r3, 8004548 <quorem+0x96>
 800453c:	9b01      	ldr	r3, [sp, #4]
 800453e:	3b04      	subs	r3, #4
 8004540:	429d      	cmp	r5, r3
 8004542:	461a      	mov	r2, r3
 8004544:	d32f      	bcc.n	80045a6 <quorem+0xf4>
 8004546:	613c      	str	r4, [r7, #16]
 8004548:	4638      	mov	r0, r7
 800454a:	f001 f97b 	bl	8005844 <__mcmp>
 800454e:	2800      	cmp	r0, #0
 8004550:	db25      	blt.n	800459e <quorem+0xec>
 8004552:	4629      	mov	r1, r5
 8004554:	2000      	movs	r0, #0
 8004556:	f858 2b04 	ldr.w	r2, [r8], #4
 800455a:	f8d1 c000 	ldr.w	ip, [r1]
 800455e:	fa1f fe82 	uxth.w	lr, r2
 8004562:	fa1f f38c 	uxth.w	r3, ip
 8004566:	eba3 030e 	sub.w	r3, r3, lr
 800456a:	4403      	add	r3, r0
 800456c:	0c12      	lsrs	r2, r2, #16
 800456e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004572:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800457c:	45c1      	cmp	r9, r8
 800457e:	f841 3b04 	str.w	r3, [r1], #4
 8004582:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004586:	d2e6      	bcs.n	8004556 <quorem+0xa4>
 8004588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800458c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004590:	b922      	cbnz	r2, 800459c <quorem+0xea>
 8004592:	3b04      	subs	r3, #4
 8004594:	429d      	cmp	r5, r3
 8004596:	461a      	mov	r2, r3
 8004598:	d30b      	bcc.n	80045b2 <quorem+0x100>
 800459a:	613c      	str	r4, [r7, #16]
 800459c:	3601      	adds	r6, #1
 800459e:	4630      	mov	r0, r6
 80045a0:	b003      	add	sp, #12
 80045a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	3b04      	subs	r3, #4
 80045aa:	2a00      	cmp	r2, #0
 80045ac:	d1cb      	bne.n	8004546 <quorem+0x94>
 80045ae:	3c01      	subs	r4, #1
 80045b0:	e7c6      	b.n	8004540 <quorem+0x8e>
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	3b04      	subs	r3, #4
 80045b6:	2a00      	cmp	r2, #0
 80045b8:	d1ef      	bne.n	800459a <quorem+0xe8>
 80045ba:	3c01      	subs	r4, #1
 80045bc:	e7ea      	b.n	8004594 <quorem+0xe2>
 80045be:	2000      	movs	r0, #0
 80045c0:	e7ee      	b.n	80045a0 <quorem+0xee>
 80045c2:	0000      	movs	r0, r0
 80045c4:	0000      	movs	r0, r0
	...

080045c8 <_dtoa_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	69c7      	ldr	r7, [r0, #28]
 80045ce:	b099      	sub	sp, #100	@ 0x64
 80045d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80045d4:	ec55 4b10 	vmov	r4, r5, d0
 80045d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80045da:	9109      	str	r1, [sp, #36]	@ 0x24
 80045dc:	4683      	mov	fp, r0
 80045de:	920e      	str	r2, [sp, #56]	@ 0x38
 80045e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80045e2:	b97f      	cbnz	r7, 8004604 <_dtoa_r+0x3c>
 80045e4:	2010      	movs	r0, #16
 80045e6:	f000 fdfd 	bl	80051e4 <malloc>
 80045ea:	4602      	mov	r2, r0
 80045ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80045f0:	b920      	cbnz	r0, 80045fc <_dtoa_r+0x34>
 80045f2:	4ba7      	ldr	r3, [pc, #668]	@ (8004890 <_dtoa_r+0x2c8>)
 80045f4:	21ef      	movs	r1, #239	@ 0xef
 80045f6:	48a7      	ldr	r0, [pc, #668]	@ (8004894 <_dtoa_r+0x2cc>)
 80045f8:	f001 fc68 	bl	8005ecc <__assert_func>
 80045fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004600:	6007      	str	r7, [r0, #0]
 8004602:	60c7      	str	r7, [r0, #12]
 8004604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	b159      	cbz	r1, 8004624 <_dtoa_r+0x5c>
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	604a      	str	r2, [r1, #4]
 8004610:	2301      	movs	r3, #1
 8004612:	4093      	lsls	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
 8004616:	4658      	mov	r0, fp
 8004618:	f000 feda 	bl	80053d0 <_Bfree>
 800461c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	1e2b      	subs	r3, r5, #0
 8004626:	bfb9      	ittee	lt
 8004628:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800462c:	9303      	strlt	r3, [sp, #12]
 800462e:	2300      	movge	r3, #0
 8004630:	6033      	strge	r3, [r6, #0]
 8004632:	9f03      	ldr	r7, [sp, #12]
 8004634:	4b98      	ldr	r3, [pc, #608]	@ (8004898 <_dtoa_r+0x2d0>)
 8004636:	bfbc      	itt	lt
 8004638:	2201      	movlt	r2, #1
 800463a:	6032      	strlt	r2, [r6, #0]
 800463c:	43bb      	bics	r3, r7
 800463e:	d112      	bne.n	8004666 <_dtoa_r+0x9e>
 8004640:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004642:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800464c:	4323      	orrs	r3, r4
 800464e:	f000 854d 	beq.w	80050ec <_dtoa_r+0xb24>
 8004652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004654:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80048ac <_dtoa_r+0x2e4>
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 854f 	beq.w	80050fc <_dtoa_r+0xb34>
 800465e:	f10a 0303 	add.w	r3, sl, #3
 8004662:	f000 bd49 	b.w	80050f8 <_dtoa_r+0xb30>
 8004666:	ed9d 7b02 	vldr	d7, [sp, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	ec51 0b17 	vmov	r0, r1, d7
 8004670:	2300      	movs	r3, #0
 8004672:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004676:	f7fc fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800467a:	4680      	mov	r8, r0
 800467c:	b158      	cbz	r0, 8004696 <_dtoa_r+0xce>
 800467e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004680:	2301      	movs	r3, #1
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004686:	b113      	cbz	r3, 800468e <_dtoa_r+0xc6>
 8004688:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800468a:	4b84      	ldr	r3, [pc, #528]	@ (800489c <_dtoa_r+0x2d4>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80048b0 <_dtoa_r+0x2e8>
 8004692:	f000 bd33 	b.w	80050fc <_dtoa_r+0xb34>
 8004696:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800469a:	aa16      	add	r2, sp, #88	@ 0x58
 800469c:	a917      	add	r1, sp, #92	@ 0x5c
 800469e:	4658      	mov	r0, fp
 80046a0:	f001 f980 	bl	80059a4 <__d2b>
 80046a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80046a8:	4681      	mov	r9, r0
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d077      	beq.n	800479e <_dtoa_r+0x1d6>
 80046ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80046b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80046c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046c8:	4619      	mov	r1, r3
 80046ca:	2200      	movs	r2, #0
 80046cc:	4b74      	ldr	r3, [pc, #464]	@ (80048a0 <_dtoa_r+0x2d8>)
 80046ce:	f7fb fddb 	bl	8000288 <__aeabi_dsub>
 80046d2:	a369      	add	r3, pc, #420	@ (adr r3, 8004878 <_dtoa_r+0x2b0>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb ff8e 	bl	80005f8 <__aeabi_dmul>
 80046dc:	a368      	add	r3, pc, #416	@ (adr r3, 8004880 <_dtoa_r+0x2b8>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb fdd3 	bl	800028c <__adddf3>
 80046e6:	4604      	mov	r4, r0
 80046e8:	4630      	mov	r0, r6
 80046ea:	460d      	mov	r5, r1
 80046ec:	f7fb ff1a 	bl	8000524 <__aeabi_i2d>
 80046f0:	a365      	add	r3, pc, #404	@ (adr r3, 8004888 <_dtoa_r+0x2c0>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb ff7f 	bl	80005f8 <__aeabi_dmul>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fb fdc3 	bl	800028c <__adddf3>
 8004706:	4604      	mov	r4, r0
 8004708:	460d      	mov	r5, r1
 800470a:	f7fc fa25 	bl	8000b58 <__aeabi_d2iz>
 800470e:	2200      	movs	r2, #0
 8004710:	4607      	mov	r7, r0
 8004712:	2300      	movs	r3, #0
 8004714:	4620      	mov	r0, r4
 8004716:	4629      	mov	r1, r5
 8004718:	f7fc f9e0 	bl	8000adc <__aeabi_dcmplt>
 800471c:	b140      	cbz	r0, 8004730 <_dtoa_r+0x168>
 800471e:	4638      	mov	r0, r7
 8004720:	f7fb ff00 	bl	8000524 <__aeabi_i2d>
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	f7fc f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800472c:	b900      	cbnz	r0, 8004730 <_dtoa_r+0x168>
 800472e:	3f01      	subs	r7, #1
 8004730:	2f16      	cmp	r7, #22
 8004732:	d851      	bhi.n	80047d8 <_dtoa_r+0x210>
 8004734:	4b5b      	ldr	r3, [pc, #364]	@ (80048a4 <_dtoa_r+0x2dc>)
 8004736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004742:	f7fc f9cb 	bl	8000adc <__aeabi_dcmplt>
 8004746:	2800      	cmp	r0, #0
 8004748:	d048      	beq.n	80047dc <_dtoa_r+0x214>
 800474a:	3f01      	subs	r7, #1
 800474c:	2300      	movs	r3, #0
 800474e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004750:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004752:	1b9b      	subs	r3, r3, r6
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	bf44      	itt	mi
 8004758:	f1c3 0801 	rsbmi	r8, r3, #1
 800475c:	2300      	movmi	r3, #0
 800475e:	9208      	str	r2, [sp, #32]
 8004760:	bf54      	ite	pl
 8004762:	f04f 0800 	movpl.w	r8, #0
 8004766:	9308      	strmi	r3, [sp, #32]
 8004768:	2f00      	cmp	r7, #0
 800476a:	db39      	blt.n	80047e0 <_dtoa_r+0x218>
 800476c:	9b08      	ldr	r3, [sp, #32]
 800476e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004770:	443b      	add	r3, r7
 8004772:	9308      	str	r3, [sp, #32]
 8004774:	2300      	movs	r3, #0
 8004776:	930a      	str	r3, [sp, #40]	@ 0x28
 8004778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800477a:	2b09      	cmp	r3, #9
 800477c:	d864      	bhi.n	8004848 <_dtoa_r+0x280>
 800477e:	2b05      	cmp	r3, #5
 8004780:	bfc4      	itt	gt
 8004782:	3b04      	subgt	r3, #4
 8004784:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004788:	f1a3 0302 	sub.w	r3, r3, #2
 800478c:	bfcc      	ite	gt
 800478e:	2400      	movgt	r4, #0
 8004790:	2401      	movle	r4, #1
 8004792:	2b03      	cmp	r3, #3
 8004794:	d863      	bhi.n	800485e <_dtoa_r+0x296>
 8004796:	e8df f003 	tbb	[pc, r3]
 800479a:	372a      	.short	0x372a
 800479c:	5535      	.short	0x5535
 800479e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80047a2:	441e      	add	r6, r3
 80047a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	bfc1      	itttt	gt
 80047ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047b0:	409f      	lslgt	r7, r3
 80047b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047ba:	bfd6      	itet	le
 80047bc:	f1c3 0320 	rsble	r3, r3, #32
 80047c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80047c4:	fa04 f003 	lslle.w	r0, r4, r3
 80047c8:	f7fb fe9c 	bl	8000504 <__aeabi_ui2d>
 80047cc:	2201      	movs	r2, #1
 80047ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80047d2:	3e01      	subs	r6, #1
 80047d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80047d6:	e777      	b.n	80046c8 <_dtoa_r+0x100>
 80047d8:	2301      	movs	r3, #1
 80047da:	e7b8      	b.n	800474e <_dtoa_r+0x186>
 80047dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80047de:	e7b7      	b.n	8004750 <_dtoa_r+0x188>
 80047e0:	427b      	negs	r3, r7
 80047e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80047e4:	2300      	movs	r3, #0
 80047e6:	eba8 0807 	sub.w	r8, r8, r7
 80047ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80047ec:	e7c4      	b.n	8004778 <_dtoa_r+0x1b0>
 80047ee:	2300      	movs	r3, #0
 80047f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dc35      	bgt.n	8004864 <_dtoa_r+0x29c>
 80047f8:	2301      	movs	r3, #1
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	9307      	str	r3, [sp, #28]
 80047fe:	461a      	mov	r2, r3
 8004800:	920e      	str	r2, [sp, #56]	@ 0x38
 8004802:	e00b      	b.n	800481c <_dtoa_r+0x254>
 8004804:	2301      	movs	r3, #1
 8004806:	e7f3      	b.n	80047f0 <_dtoa_r+0x228>
 8004808:	2300      	movs	r3, #0
 800480a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800480c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	9307      	str	r3, [sp, #28]
 8004818:	bfb8      	it	lt
 800481a:	2301      	movlt	r3, #1
 800481c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004820:	2100      	movs	r1, #0
 8004822:	2204      	movs	r2, #4
 8004824:	f102 0514 	add.w	r5, r2, #20
 8004828:	429d      	cmp	r5, r3
 800482a:	d91f      	bls.n	800486c <_dtoa_r+0x2a4>
 800482c:	6041      	str	r1, [r0, #4]
 800482e:	4658      	mov	r0, fp
 8004830:	f000 fd8e 	bl	8005350 <_Balloc>
 8004834:	4682      	mov	sl, r0
 8004836:	2800      	cmp	r0, #0
 8004838:	d13c      	bne.n	80048b4 <_dtoa_r+0x2ec>
 800483a:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <_dtoa_r+0x2e0>)
 800483c:	4602      	mov	r2, r0
 800483e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004842:	e6d8      	b.n	80045f6 <_dtoa_r+0x2e>
 8004844:	2301      	movs	r3, #1
 8004846:	e7e0      	b.n	800480a <_dtoa_r+0x242>
 8004848:	2401      	movs	r4, #1
 800484a:	2300      	movs	r3, #0
 800484c:	9309      	str	r3, [sp, #36]	@ 0x24
 800484e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	9307      	str	r3, [sp, #28]
 8004858:	2200      	movs	r2, #0
 800485a:	2312      	movs	r3, #18
 800485c:	e7d0      	b.n	8004800 <_dtoa_r+0x238>
 800485e:	2301      	movs	r3, #1
 8004860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004862:	e7f5      	b.n	8004850 <_dtoa_r+0x288>
 8004864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	9307      	str	r3, [sp, #28]
 800486a:	e7d7      	b.n	800481c <_dtoa_r+0x254>
 800486c:	3101      	adds	r1, #1
 800486e:	0052      	lsls	r2, r2, #1
 8004870:	e7d8      	b.n	8004824 <_dtoa_r+0x25c>
 8004872:	bf00      	nop
 8004874:	f3af 8000 	nop.w
 8004878:	636f4361 	.word	0x636f4361
 800487c:	3fd287a7 	.word	0x3fd287a7
 8004880:	8b60c8b3 	.word	0x8b60c8b3
 8004884:	3fc68a28 	.word	0x3fc68a28
 8004888:	509f79fb 	.word	0x509f79fb
 800488c:	3fd34413 	.word	0x3fd34413
 8004890:	080074a4 	.word	0x080074a4
 8004894:	080074bb 	.word	0x080074bb
 8004898:	7ff00000 	.word	0x7ff00000
 800489c:	08007474 	.word	0x08007474
 80048a0:	3ff80000 	.word	0x3ff80000
 80048a4:	080075b8 	.word	0x080075b8
 80048a8:	08007513 	.word	0x08007513
 80048ac:	080074a0 	.word	0x080074a0
 80048b0:	08007473 	.word	0x08007473
 80048b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048b8:	6018      	str	r0, [r3, #0]
 80048ba:	9b07      	ldr	r3, [sp, #28]
 80048bc:	2b0e      	cmp	r3, #14
 80048be:	f200 80a4 	bhi.w	8004a0a <_dtoa_r+0x442>
 80048c2:	2c00      	cmp	r4, #0
 80048c4:	f000 80a1 	beq.w	8004a0a <_dtoa_r+0x442>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	dd33      	ble.n	8004934 <_dtoa_r+0x36c>
 80048cc:	4bad      	ldr	r3, [pc, #692]	@ (8004b84 <_dtoa_r+0x5bc>)
 80048ce:	f007 020f 	and.w	r2, r7, #15
 80048d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048d6:	ed93 7b00 	vldr	d7, [r3]
 80048da:	05f8      	lsls	r0, r7, #23
 80048dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80048e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80048e4:	d516      	bpl.n	8004914 <_dtoa_r+0x34c>
 80048e6:	4ba8      	ldr	r3, [pc, #672]	@ (8004b88 <_dtoa_r+0x5c0>)
 80048e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048f0:	f7fb ffac 	bl	800084c <__aeabi_ddiv>
 80048f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048f8:	f004 040f 	and.w	r4, r4, #15
 80048fc:	2603      	movs	r6, #3
 80048fe:	4da2      	ldr	r5, [pc, #648]	@ (8004b88 <_dtoa_r+0x5c0>)
 8004900:	b954      	cbnz	r4, 8004918 <_dtoa_r+0x350>
 8004902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800490a:	f7fb ff9f 	bl	800084c <__aeabi_ddiv>
 800490e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004912:	e028      	b.n	8004966 <_dtoa_r+0x39e>
 8004914:	2602      	movs	r6, #2
 8004916:	e7f2      	b.n	80048fe <_dtoa_r+0x336>
 8004918:	07e1      	lsls	r1, r4, #31
 800491a:	d508      	bpl.n	800492e <_dtoa_r+0x366>
 800491c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004920:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004924:	f7fb fe68 	bl	80005f8 <__aeabi_dmul>
 8004928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800492c:	3601      	adds	r6, #1
 800492e:	1064      	asrs	r4, r4, #1
 8004930:	3508      	adds	r5, #8
 8004932:	e7e5      	b.n	8004900 <_dtoa_r+0x338>
 8004934:	f000 80d2 	beq.w	8004adc <_dtoa_r+0x514>
 8004938:	427c      	negs	r4, r7
 800493a:	4b92      	ldr	r3, [pc, #584]	@ (8004b84 <_dtoa_r+0x5bc>)
 800493c:	4d92      	ldr	r5, [pc, #584]	@ (8004b88 <_dtoa_r+0x5c0>)
 800493e:	f004 020f 	and.w	r2, r4, #15
 8004942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800494e:	f7fb fe53 	bl	80005f8 <__aeabi_dmul>
 8004952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004956:	1124      	asrs	r4, r4, #4
 8004958:	2300      	movs	r3, #0
 800495a:	2602      	movs	r6, #2
 800495c:	2c00      	cmp	r4, #0
 800495e:	f040 80b2 	bne.w	8004ac6 <_dtoa_r+0x4fe>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1d3      	bne.n	800490e <_dtoa_r+0x346>
 8004966:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004968:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80b7 	beq.w	8004ae0 <_dtoa_r+0x518>
 8004972:	4b86      	ldr	r3, [pc, #536]	@ (8004b8c <_dtoa_r+0x5c4>)
 8004974:	2200      	movs	r2, #0
 8004976:	4620      	mov	r0, r4
 8004978:	4629      	mov	r1, r5
 800497a:	f7fc f8af 	bl	8000adc <__aeabi_dcmplt>
 800497e:	2800      	cmp	r0, #0
 8004980:	f000 80ae 	beq.w	8004ae0 <_dtoa_r+0x518>
 8004984:	9b07      	ldr	r3, [sp, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80aa 	beq.w	8004ae0 <_dtoa_r+0x518>
 800498c:	9b00      	ldr	r3, [sp, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dd37      	ble.n	8004a02 <_dtoa_r+0x43a>
 8004992:	1e7b      	subs	r3, r7, #1
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	4620      	mov	r0, r4
 8004998:	4b7d      	ldr	r3, [pc, #500]	@ (8004b90 <_dtoa_r+0x5c8>)
 800499a:	2200      	movs	r2, #0
 800499c:	4629      	mov	r1, r5
 800499e:	f7fb fe2b 	bl	80005f8 <__aeabi_dmul>
 80049a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a6:	9c00      	ldr	r4, [sp, #0]
 80049a8:	3601      	adds	r6, #1
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7fb fdba 	bl	8000524 <__aeabi_i2d>
 80049b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049b4:	f7fb fe20 	bl	80005f8 <__aeabi_dmul>
 80049b8:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <_dtoa_r+0x5cc>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	f7fb fc66 	bl	800028c <__adddf3>
 80049c0:	4605      	mov	r5, r0
 80049c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049c6:	2c00      	cmp	r4, #0
 80049c8:	f040 808d 	bne.w	8004ae6 <_dtoa_r+0x51e>
 80049cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049d0:	4b71      	ldr	r3, [pc, #452]	@ (8004b98 <_dtoa_r+0x5d0>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	f7fb fc58 	bl	8000288 <__aeabi_dsub>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049e0:	462a      	mov	r2, r5
 80049e2:	4633      	mov	r3, r6
 80049e4:	f7fc f898 	bl	8000b18 <__aeabi_dcmpgt>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	f040 828b 	bne.w	8004f04 <_dtoa_r+0x93c>
 80049ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f2:	462a      	mov	r2, r5
 80049f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80049f8:	f7fc f870 	bl	8000adc <__aeabi_dcmplt>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f040 8128 	bne.w	8004c52 <_dtoa_r+0x68a>
 8004a02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f2c0 815a 	blt.w	8004cc6 <_dtoa_r+0x6fe>
 8004a12:	2f0e      	cmp	r7, #14
 8004a14:	f300 8157 	bgt.w	8004cc6 <_dtoa_r+0x6fe>
 8004a18:	4b5a      	ldr	r3, [pc, #360]	@ (8004b84 <_dtoa_r+0x5bc>)
 8004a1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a1e:	ed93 7b00 	vldr	d7, [r3]
 8004a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	ed8d 7b00 	vstr	d7, [sp]
 8004a2a:	da03      	bge.n	8004a34 <_dtoa_r+0x46c>
 8004a2c:	9b07      	ldr	r3, [sp, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f340 8101 	ble.w	8004c36 <_dtoa_r+0x66e>
 8004a34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a38:	4656      	mov	r6, sl
 8004a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb ff03 	bl	800084c <__aeabi_ddiv>
 8004a46:	f7fc f887 	bl	8000b58 <__aeabi_d2iz>
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	f7fb fd6a 	bl	8000524 <__aeabi_i2d>
 8004a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a54:	f7fb fdd0 	bl	80005f8 <__aeabi_dmul>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004a64:	f7fb fc10 	bl	8000288 <__aeabi_dsub>
 8004a68:	f806 4b01 	strb.w	r4, [r6], #1
 8004a6c:	9d07      	ldr	r5, [sp, #28]
 8004a6e:	eba6 040a 	sub.w	r4, r6, sl
 8004a72:	42a5      	cmp	r5, r4
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	f040 8117 	bne.w	8004caa <_dtoa_r+0x6e2>
 8004a7c:	f7fb fc06 	bl	800028c <__adddf3>
 8004a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a84:	4604      	mov	r4, r0
 8004a86:	460d      	mov	r5, r1
 8004a88:	f7fc f846 	bl	8000b18 <__aeabi_dcmpgt>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f040 80f9 	bne.w	8004c84 <_dtoa_r+0x6bc>
 8004a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fc f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a9e:	b118      	cbz	r0, 8004aa8 <_dtoa_r+0x4e0>
 8004aa0:	f018 0f01 	tst.w	r8, #1
 8004aa4:	f040 80ee 	bne.w	8004c84 <_dtoa_r+0x6bc>
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4658      	mov	r0, fp
 8004aac:	f000 fc90 	bl	80053d0 <_Bfree>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	7033      	strb	r3, [r6, #0]
 8004ab4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004ab6:	3701      	adds	r7, #1
 8004ab8:	601f      	str	r7, [r3, #0]
 8004aba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 831d 	beq.w	80050fc <_dtoa_r+0xb34>
 8004ac2:	601e      	str	r6, [r3, #0]
 8004ac4:	e31a      	b.n	80050fc <_dtoa_r+0xb34>
 8004ac6:	07e2      	lsls	r2, r4, #31
 8004ac8:	d505      	bpl.n	8004ad6 <_dtoa_r+0x50e>
 8004aca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ace:	f7fb fd93 	bl	80005f8 <__aeabi_dmul>
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	1064      	asrs	r4, r4, #1
 8004ad8:	3508      	adds	r5, #8
 8004ada:	e73f      	b.n	800495c <_dtoa_r+0x394>
 8004adc:	2602      	movs	r6, #2
 8004ade:	e742      	b.n	8004966 <_dtoa_r+0x39e>
 8004ae0:	9c07      	ldr	r4, [sp, #28]
 8004ae2:	9704      	str	r7, [sp, #16]
 8004ae4:	e761      	b.n	80049aa <_dtoa_r+0x3e2>
 8004ae6:	4b27      	ldr	r3, [pc, #156]	@ (8004b84 <_dtoa_r+0x5bc>)
 8004ae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004aee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004af2:	4454      	add	r4, sl
 8004af4:	2900      	cmp	r1, #0
 8004af6:	d053      	beq.n	8004ba0 <_dtoa_r+0x5d8>
 8004af8:	4928      	ldr	r1, [pc, #160]	@ (8004b9c <_dtoa_r+0x5d4>)
 8004afa:	2000      	movs	r0, #0
 8004afc:	f7fb fea6 	bl	800084c <__aeabi_ddiv>
 8004b00:	4633      	mov	r3, r6
 8004b02:	462a      	mov	r2, r5
 8004b04:	f7fb fbc0 	bl	8000288 <__aeabi_dsub>
 8004b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b0c:	4656      	mov	r6, sl
 8004b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b12:	f7fc f821 	bl	8000b58 <__aeabi_d2iz>
 8004b16:	4605      	mov	r5, r0
 8004b18:	f7fb fd04 	bl	8000524 <__aeabi_i2d>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b24:	f7fb fbb0 	bl	8000288 <__aeabi_dsub>
 8004b28:	3530      	adds	r5, #48	@ 0x30
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b32:	f806 5b01 	strb.w	r5, [r6], #1
 8004b36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b3a:	f7fb ffcf 	bl	8000adc <__aeabi_dcmplt>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d171      	bne.n	8004c26 <_dtoa_r+0x65e>
 8004b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b46:	4911      	ldr	r1, [pc, #68]	@ (8004b8c <_dtoa_r+0x5c4>)
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f7fb fb9d 	bl	8000288 <__aeabi_dsub>
 8004b4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b52:	f7fb ffc3 	bl	8000adc <__aeabi_dcmplt>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f040 8095 	bne.w	8004c86 <_dtoa_r+0x6be>
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	f43f af50 	beq.w	8004a02 <_dtoa_r+0x43a>
 8004b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b66:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <_dtoa_r+0x5c8>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f7fb fd45 	bl	80005f8 <__aeabi_dmul>
 8004b6e:	4b08      	ldr	r3, [pc, #32]	@ (8004b90 <_dtoa_r+0x5c8>)
 8004b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b74:	2200      	movs	r2, #0
 8004b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7a:	f7fb fd3d 	bl	80005f8 <__aeabi_dmul>
 8004b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b82:	e7c4      	b.n	8004b0e <_dtoa_r+0x546>
 8004b84:	080075b8 	.word	0x080075b8
 8004b88:	08007590 	.word	0x08007590
 8004b8c:	3ff00000 	.word	0x3ff00000
 8004b90:	40240000 	.word	0x40240000
 8004b94:	401c0000 	.word	0x401c0000
 8004b98:	40140000 	.word	0x40140000
 8004b9c:	3fe00000 	.word	0x3fe00000
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f7fb fd28 	bl	80005f8 <__aeabi_dmul>
 8004ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bac:	9415      	str	r4, [sp, #84]	@ 0x54
 8004bae:	4656      	mov	r6, sl
 8004bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bb4:	f7fb ffd0 	bl	8000b58 <__aeabi_d2iz>
 8004bb8:	4605      	mov	r5, r0
 8004bba:	f7fb fcb3 	bl	8000524 <__aeabi_i2d>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bc6:	f7fb fb5f 	bl	8000288 <__aeabi_dsub>
 8004bca:	3530      	adds	r5, #48	@ 0x30
 8004bcc:	f806 5b01 	strb.w	r5, [r6], #1
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	42a6      	cmp	r6, r4
 8004bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	d124      	bne.n	8004c2a <_dtoa_r+0x662>
 8004be0:	4bac      	ldr	r3, [pc, #688]	@ (8004e94 <_dtoa_r+0x8cc>)
 8004be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004be6:	f7fb fb51 	bl	800028c <__adddf3>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bf2:	f7fb ff91 	bl	8000b18 <__aeabi_dcmpgt>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d145      	bne.n	8004c86 <_dtoa_r+0x6be>
 8004bfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bfe:	49a5      	ldr	r1, [pc, #660]	@ (8004e94 <_dtoa_r+0x8cc>)
 8004c00:	2000      	movs	r0, #0
 8004c02:	f7fb fb41 	bl	8000288 <__aeabi_dsub>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c0e:	f7fb ff65 	bl	8000adc <__aeabi_dcmplt>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f43f aef5 	beq.w	8004a02 <_dtoa_r+0x43a>
 8004c18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004c1a:	1e73      	subs	r3, r6, #1
 8004c1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c22:	2b30      	cmp	r3, #48	@ 0x30
 8004c24:	d0f8      	beq.n	8004c18 <_dtoa_r+0x650>
 8004c26:	9f04      	ldr	r7, [sp, #16]
 8004c28:	e73e      	b.n	8004aa8 <_dtoa_r+0x4e0>
 8004c2a:	4b9b      	ldr	r3, [pc, #620]	@ (8004e98 <_dtoa_r+0x8d0>)
 8004c2c:	f7fb fce4 	bl	80005f8 <__aeabi_dmul>
 8004c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c34:	e7bc      	b.n	8004bb0 <_dtoa_r+0x5e8>
 8004c36:	d10c      	bne.n	8004c52 <_dtoa_r+0x68a>
 8004c38:	4b98      	ldr	r3, [pc, #608]	@ (8004e9c <_dtoa_r+0x8d4>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c40:	f7fb fcda 	bl	80005f8 <__aeabi_dmul>
 8004c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c48:	f7fb ff5c 	bl	8000b04 <__aeabi_dcmpge>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f000 8157 	beq.w	8004f00 <_dtoa_r+0x938>
 8004c52:	2400      	movs	r4, #0
 8004c54:	4625      	mov	r5, r4
 8004c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	4656      	mov	r6, sl
 8004c5e:	2700      	movs	r7, #0
 8004c60:	4621      	mov	r1, r4
 8004c62:	4658      	mov	r0, fp
 8004c64:	f000 fbb4 	bl	80053d0 <_Bfree>
 8004c68:	2d00      	cmp	r5, #0
 8004c6a:	d0dc      	beq.n	8004c26 <_dtoa_r+0x65e>
 8004c6c:	b12f      	cbz	r7, 8004c7a <_dtoa_r+0x6b2>
 8004c6e:	42af      	cmp	r7, r5
 8004c70:	d003      	beq.n	8004c7a <_dtoa_r+0x6b2>
 8004c72:	4639      	mov	r1, r7
 8004c74:	4658      	mov	r0, fp
 8004c76:	f000 fbab 	bl	80053d0 <_Bfree>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4658      	mov	r0, fp
 8004c7e:	f000 fba7 	bl	80053d0 <_Bfree>
 8004c82:	e7d0      	b.n	8004c26 <_dtoa_r+0x65e>
 8004c84:	9704      	str	r7, [sp, #16]
 8004c86:	4633      	mov	r3, r6
 8004c88:	461e      	mov	r6, r3
 8004c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c8e:	2a39      	cmp	r2, #57	@ 0x39
 8004c90:	d107      	bne.n	8004ca2 <_dtoa_r+0x6da>
 8004c92:	459a      	cmp	sl, r3
 8004c94:	d1f8      	bne.n	8004c88 <_dtoa_r+0x6c0>
 8004c96:	9a04      	ldr	r2, [sp, #16]
 8004c98:	3201      	adds	r2, #1
 8004c9a:	9204      	str	r2, [sp, #16]
 8004c9c:	2230      	movs	r2, #48	@ 0x30
 8004c9e:	f88a 2000 	strb.w	r2, [sl]
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	3201      	adds	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e7bd      	b.n	8004c26 <_dtoa_r+0x65e>
 8004caa:	4b7b      	ldr	r3, [pc, #492]	@ (8004e98 <_dtoa_r+0x8d0>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	f7fb fca3 	bl	80005f8 <__aeabi_dmul>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	f7fb ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f43f aebb 	beq.w	8004a3a <_dtoa_r+0x472>
 8004cc4:	e6f0      	b.n	8004aa8 <_dtoa_r+0x4e0>
 8004cc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	f000 80db 	beq.w	8004e84 <_dtoa_r+0x8bc>
 8004cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cd0:	2a01      	cmp	r2, #1
 8004cd2:	f300 80bf 	bgt.w	8004e54 <_dtoa_r+0x88c>
 8004cd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	f000 80b7 	beq.w	8004e4c <_dtoa_r+0x884>
 8004cde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004ce2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ce4:	4646      	mov	r6, r8
 8004ce6:	9a08      	ldr	r2, [sp, #32]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	4658      	mov	r0, fp
 8004cee:	4498      	add	r8, r3
 8004cf0:	9208      	str	r2, [sp, #32]
 8004cf2:	f000 fc21 	bl	8005538 <__i2b>
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	b15e      	cbz	r6, 8004d12 <_dtoa_r+0x74a>
 8004cfa:	9b08      	ldr	r3, [sp, #32]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dd08      	ble.n	8004d12 <_dtoa_r+0x74a>
 8004d00:	42b3      	cmp	r3, r6
 8004d02:	9a08      	ldr	r2, [sp, #32]
 8004d04:	bfa8      	it	ge
 8004d06:	4633      	movge	r3, r6
 8004d08:	eba8 0803 	sub.w	r8, r8, r3
 8004d0c:	1af6      	subs	r6, r6, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	9308      	str	r3, [sp, #32]
 8004d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d14:	b1f3      	cbz	r3, 8004d54 <_dtoa_r+0x78c>
 8004d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80b7 	beq.w	8004e8c <_dtoa_r+0x8c4>
 8004d1e:	b18c      	cbz	r4, 8004d44 <_dtoa_r+0x77c>
 8004d20:	4629      	mov	r1, r5
 8004d22:	4622      	mov	r2, r4
 8004d24:	4658      	mov	r0, fp
 8004d26:	f000 fcc7 	bl	80056b8 <__pow5mult>
 8004d2a:	464a      	mov	r2, r9
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4605      	mov	r5, r0
 8004d30:	4658      	mov	r0, fp
 8004d32:	f000 fc17 	bl	8005564 <__multiply>
 8004d36:	4649      	mov	r1, r9
 8004d38:	9004      	str	r0, [sp, #16]
 8004d3a:	4658      	mov	r0, fp
 8004d3c:	f000 fb48 	bl	80053d0 <_Bfree>
 8004d40:	9b04      	ldr	r3, [sp, #16]
 8004d42:	4699      	mov	r9, r3
 8004d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d46:	1b1a      	subs	r2, r3, r4
 8004d48:	d004      	beq.n	8004d54 <_dtoa_r+0x78c>
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	4658      	mov	r0, fp
 8004d4e:	f000 fcb3 	bl	80056b8 <__pow5mult>
 8004d52:	4681      	mov	r9, r0
 8004d54:	2101      	movs	r1, #1
 8004d56:	4658      	mov	r0, fp
 8004d58:	f000 fbee 	bl	8005538 <__i2b>
 8004d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d5e:	4604      	mov	r4, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 81cf 	beq.w	8005104 <_dtoa_r+0xb3c>
 8004d66:	461a      	mov	r2, r3
 8004d68:	4601      	mov	r1, r0
 8004d6a:	4658      	mov	r0, fp
 8004d6c:	f000 fca4 	bl	80056b8 <__pow5mult>
 8004d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	4604      	mov	r4, r0
 8004d76:	f300 8095 	bgt.w	8004ea4 <_dtoa_r+0x8dc>
 8004d7a:	9b02      	ldr	r3, [sp, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8087 	bne.w	8004e90 <_dtoa_r+0x8c8>
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 8089 	bne.w	8004ea0 <_dtoa_r+0x8d8>
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d94:	0d1b      	lsrs	r3, r3, #20
 8004d96:	051b      	lsls	r3, r3, #20
 8004d98:	b12b      	cbz	r3, 8004da6 <_dtoa_r+0x7de>
 8004d9a:	9b08      	ldr	r3, [sp, #32]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	9308      	str	r3, [sp, #32]
 8004da0:	f108 0801 	add.w	r8, r8, #1
 8004da4:	2301      	movs	r3, #1
 8004da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81b0 	beq.w	8005110 <_dtoa_r+0xb48>
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004db6:	6918      	ldr	r0, [r3, #16]
 8004db8:	f000 fb72 	bl	80054a0 <__hi0bits>
 8004dbc:	f1c0 0020 	rsb	r0, r0, #32
 8004dc0:	9b08      	ldr	r3, [sp, #32]
 8004dc2:	4418      	add	r0, r3
 8004dc4:	f010 001f 	ands.w	r0, r0, #31
 8004dc8:	d077      	beq.n	8004eba <_dtoa_r+0x8f2>
 8004dca:	f1c0 0320 	rsb	r3, r0, #32
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	dd6b      	ble.n	8004eaa <_dtoa_r+0x8e2>
 8004dd2:	9b08      	ldr	r3, [sp, #32]
 8004dd4:	f1c0 001c 	rsb	r0, r0, #28
 8004dd8:	4403      	add	r3, r0
 8004dda:	4480      	add	r8, r0
 8004ddc:	4406      	add	r6, r0
 8004dde:	9308      	str	r3, [sp, #32]
 8004de0:	f1b8 0f00 	cmp.w	r8, #0
 8004de4:	dd05      	ble.n	8004df2 <_dtoa_r+0x82a>
 8004de6:	4649      	mov	r1, r9
 8004de8:	4642      	mov	r2, r8
 8004dea:	4658      	mov	r0, fp
 8004dec:	f000 fcbe 	bl	800576c <__lshift>
 8004df0:	4681      	mov	r9, r0
 8004df2:	9b08      	ldr	r3, [sp, #32]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd05      	ble.n	8004e04 <_dtoa_r+0x83c>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	f000 fcb5 	bl	800576c <__lshift>
 8004e02:	4604      	mov	r4, r0
 8004e04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d059      	beq.n	8004ebe <_dtoa_r+0x8f6>
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4648      	mov	r0, r9
 8004e0e:	f000 fd19 	bl	8005844 <__mcmp>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	da53      	bge.n	8004ebe <_dtoa_r+0x8f6>
 8004e16:	1e7b      	subs	r3, r7, #1
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	220a      	movs	r2, #10
 8004e20:	4658      	mov	r0, fp
 8004e22:	f000 faf7 	bl	8005414 <__multadd>
 8004e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e28:	4681      	mov	r9, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8172 	beq.w	8005114 <_dtoa_r+0xb4c>
 8004e30:	2300      	movs	r3, #0
 8004e32:	4629      	mov	r1, r5
 8004e34:	220a      	movs	r2, #10
 8004e36:	4658      	mov	r0, fp
 8004e38:	f000 faec 	bl	8005414 <__multadd>
 8004e3c:	9b00      	ldr	r3, [sp, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	4605      	mov	r5, r0
 8004e42:	dc67      	bgt.n	8004f14 <_dtoa_r+0x94c>
 8004e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	dc41      	bgt.n	8004ece <_dtoa_r+0x906>
 8004e4a:	e063      	b.n	8004f14 <_dtoa_r+0x94c>
 8004e4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e52:	e746      	b.n	8004ce2 <_dtoa_r+0x71a>
 8004e54:	9b07      	ldr	r3, [sp, #28]
 8004e56:	1e5c      	subs	r4, r3, #1
 8004e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	bfbf      	itttt	lt
 8004e5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004e60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004e62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004e64:	1ae3      	sublt	r3, r4, r3
 8004e66:	bfb4      	ite	lt
 8004e68:	18d2      	addlt	r2, r2, r3
 8004e6a:	1b1c      	subge	r4, r3, r4
 8004e6c:	9b07      	ldr	r3, [sp, #28]
 8004e6e:	bfbc      	itt	lt
 8004e70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004e72:	2400      	movlt	r4, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfb5      	itete	lt
 8004e78:	eba8 0603 	sublt.w	r6, r8, r3
 8004e7c:	9b07      	ldrge	r3, [sp, #28]
 8004e7e:	2300      	movlt	r3, #0
 8004e80:	4646      	movge	r6, r8
 8004e82:	e730      	b.n	8004ce6 <_dtoa_r+0x71e>
 8004e84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e88:	4646      	mov	r6, r8
 8004e8a:	e735      	b.n	8004cf8 <_dtoa_r+0x730>
 8004e8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e8e:	e75c      	b.n	8004d4a <_dtoa_r+0x782>
 8004e90:	2300      	movs	r3, #0
 8004e92:	e788      	b.n	8004da6 <_dtoa_r+0x7de>
 8004e94:	3fe00000 	.word	0x3fe00000
 8004e98:	40240000 	.word	0x40240000
 8004e9c:	40140000 	.word	0x40140000
 8004ea0:	9b02      	ldr	r3, [sp, #8]
 8004ea2:	e780      	b.n	8004da6 <_dtoa_r+0x7de>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea8:	e782      	b.n	8004db0 <_dtoa_r+0x7e8>
 8004eaa:	d099      	beq.n	8004de0 <_dtoa_r+0x818>
 8004eac:	9a08      	ldr	r2, [sp, #32]
 8004eae:	331c      	adds	r3, #28
 8004eb0:	441a      	add	r2, r3
 8004eb2:	4498      	add	r8, r3
 8004eb4:	441e      	add	r6, r3
 8004eb6:	9208      	str	r2, [sp, #32]
 8004eb8:	e792      	b.n	8004de0 <_dtoa_r+0x818>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	e7f6      	b.n	8004eac <_dtoa_r+0x8e4>
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	9704      	str	r7, [sp, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	dc20      	bgt.n	8004f08 <_dtoa_r+0x940>
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	dd1e      	ble.n	8004f0c <_dtoa_r+0x944>
 8004ece:	9b00      	ldr	r3, [sp, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f47f aec0 	bne.w	8004c56 <_dtoa_r+0x68e>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	2205      	movs	r2, #5
 8004eda:	4658      	mov	r0, fp
 8004edc:	f000 fa9a 	bl	8005414 <__multadd>
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4648      	mov	r0, r9
 8004ee6:	f000 fcad 	bl	8005844 <__mcmp>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f77f aeb3 	ble.w	8004c56 <_dtoa_r+0x68e>
 8004ef0:	4656      	mov	r6, sl
 8004ef2:	2331      	movs	r3, #49	@ 0x31
 8004ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8004ef8:	9b04      	ldr	r3, [sp, #16]
 8004efa:	3301      	adds	r3, #1
 8004efc:	9304      	str	r3, [sp, #16]
 8004efe:	e6ae      	b.n	8004c5e <_dtoa_r+0x696>
 8004f00:	9c07      	ldr	r4, [sp, #28]
 8004f02:	9704      	str	r7, [sp, #16]
 8004f04:	4625      	mov	r5, r4
 8004f06:	e7f3      	b.n	8004ef0 <_dtoa_r+0x928>
 8004f08:	9b07      	ldr	r3, [sp, #28]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8104 	beq.w	800511c <_dtoa_r+0xb54>
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	dd05      	ble.n	8004f24 <_dtoa_r+0x95c>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4658      	mov	r0, fp
 8004f1e:	f000 fc25 	bl	800576c <__lshift>
 8004f22:	4605      	mov	r5, r0
 8004f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d05a      	beq.n	8004fe0 <_dtoa_r+0xa18>
 8004f2a:	6869      	ldr	r1, [r5, #4]
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	f000 fa0f 	bl	8005350 <_Balloc>
 8004f32:	4606      	mov	r6, r0
 8004f34:	b928      	cbnz	r0, 8004f42 <_dtoa_r+0x97a>
 8004f36:	4b84      	ldr	r3, [pc, #528]	@ (8005148 <_dtoa_r+0xb80>)
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f3e:	f7ff bb5a 	b.w	80045f6 <_dtoa_r+0x2e>
 8004f42:	692a      	ldr	r2, [r5, #16]
 8004f44:	3202      	adds	r2, #2
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	f105 010c 	add.w	r1, r5, #12
 8004f4c:	300c      	adds	r0, #12
 8004f4e:	f000 ffaf 	bl	8005eb0 <memcpy>
 8004f52:	2201      	movs	r2, #1
 8004f54:	4631      	mov	r1, r6
 8004f56:	4658      	mov	r0, fp
 8004f58:	f000 fc08 	bl	800576c <__lshift>
 8004f5c:	f10a 0301 	add.w	r3, sl, #1
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	9b00      	ldr	r3, [sp, #0]
 8004f64:	4453      	add	r3, sl
 8004f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f68:	9b02      	ldr	r3, [sp, #8]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	462f      	mov	r7, r5
 8004f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f72:	4605      	mov	r5, r0
 8004f74:	9b07      	ldr	r3, [sp, #28]
 8004f76:	4621      	mov	r1, r4
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	4648      	mov	r0, r9
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	f7ff fa98 	bl	80044b2 <quorem>
 8004f82:	4639      	mov	r1, r7
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f8a:	4648      	mov	r0, r9
 8004f8c:	f000 fc5a 	bl	8005844 <__mcmp>
 8004f90:	462a      	mov	r2, r5
 8004f92:	9008      	str	r0, [sp, #32]
 8004f94:	4621      	mov	r1, r4
 8004f96:	4658      	mov	r0, fp
 8004f98:	f000 fc70 	bl	800587c <__mdiff>
 8004f9c:	68c2      	ldr	r2, [r0, #12]
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	bb02      	cbnz	r2, 8004fe4 <_dtoa_r+0xa1c>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4648      	mov	r0, r9
 8004fa6:	f000 fc4d 	bl	8005844 <__mcmp>
 8004faa:	4602      	mov	r2, r0
 8004fac:	4631      	mov	r1, r6
 8004fae:	4658      	mov	r0, fp
 8004fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fb2:	f000 fa0d 	bl	80053d0 <_Bfree>
 8004fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fba:	9e07      	ldr	r6, [sp, #28]
 8004fbc:	ea43 0102 	orr.w	r1, r3, r2
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fc2:	4319      	orrs	r1, r3
 8004fc4:	d110      	bne.n	8004fe8 <_dtoa_r+0xa20>
 8004fc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004fca:	d029      	beq.n	8005020 <_dtoa_r+0xa58>
 8004fcc:	9b08      	ldr	r3, [sp, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dd02      	ble.n	8004fd8 <_dtoa_r+0xa10>
 8004fd2:	9b02      	ldr	r3, [sp, #8]
 8004fd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004fd8:	9b00      	ldr	r3, [sp, #0]
 8004fda:	f883 8000 	strb.w	r8, [r3]
 8004fde:	e63f      	b.n	8004c60 <_dtoa_r+0x698>
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	e7bb      	b.n	8004f5c <_dtoa_r+0x994>
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	e7e1      	b.n	8004fac <_dtoa_r+0x9e4>
 8004fe8:	9b08      	ldr	r3, [sp, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	db04      	blt.n	8004ff8 <_dtoa_r+0xa30>
 8004fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	d120      	bne.n	800503a <_dtoa_r+0xa72>
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	dded      	ble.n	8004fd8 <_dtoa_r+0xa10>
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	2201      	movs	r2, #1
 8005000:	4658      	mov	r0, fp
 8005002:	f000 fbb3 	bl	800576c <__lshift>
 8005006:	4621      	mov	r1, r4
 8005008:	4681      	mov	r9, r0
 800500a:	f000 fc1b 	bl	8005844 <__mcmp>
 800500e:	2800      	cmp	r0, #0
 8005010:	dc03      	bgt.n	800501a <_dtoa_r+0xa52>
 8005012:	d1e1      	bne.n	8004fd8 <_dtoa_r+0xa10>
 8005014:	f018 0f01 	tst.w	r8, #1
 8005018:	d0de      	beq.n	8004fd8 <_dtoa_r+0xa10>
 800501a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800501e:	d1d8      	bne.n	8004fd2 <_dtoa_r+0xa0a>
 8005020:	9a00      	ldr	r2, [sp, #0]
 8005022:	2339      	movs	r3, #57	@ 0x39
 8005024:	7013      	strb	r3, [r2, #0]
 8005026:	4633      	mov	r3, r6
 8005028:	461e      	mov	r6, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005030:	2a39      	cmp	r2, #57	@ 0x39
 8005032:	d052      	beq.n	80050da <_dtoa_r+0xb12>
 8005034:	3201      	adds	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e612      	b.n	8004c60 <_dtoa_r+0x698>
 800503a:	2a00      	cmp	r2, #0
 800503c:	dd07      	ble.n	800504e <_dtoa_r+0xa86>
 800503e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005042:	d0ed      	beq.n	8005020 <_dtoa_r+0xa58>
 8005044:	9a00      	ldr	r2, [sp, #0]
 8005046:	f108 0301 	add.w	r3, r8, #1
 800504a:	7013      	strb	r3, [r2, #0]
 800504c:	e608      	b.n	8004c60 <_dtoa_r+0x698>
 800504e:	9b07      	ldr	r3, [sp, #28]
 8005050:	9a07      	ldr	r2, [sp, #28]
 8005052:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005058:	4293      	cmp	r3, r2
 800505a:	d028      	beq.n	80050ae <_dtoa_r+0xae6>
 800505c:	4649      	mov	r1, r9
 800505e:	2300      	movs	r3, #0
 8005060:	220a      	movs	r2, #10
 8005062:	4658      	mov	r0, fp
 8005064:	f000 f9d6 	bl	8005414 <__multadd>
 8005068:	42af      	cmp	r7, r5
 800506a:	4681      	mov	r9, r0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f04f 020a 	mov.w	r2, #10
 8005074:	4639      	mov	r1, r7
 8005076:	4658      	mov	r0, fp
 8005078:	d107      	bne.n	800508a <_dtoa_r+0xac2>
 800507a:	f000 f9cb 	bl	8005414 <__multadd>
 800507e:	4607      	mov	r7, r0
 8005080:	4605      	mov	r5, r0
 8005082:	9b07      	ldr	r3, [sp, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	e774      	b.n	8004f74 <_dtoa_r+0x9ac>
 800508a:	f000 f9c3 	bl	8005414 <__multadd>
 800508e:	4629      	mov	r1, r5
 8005090:	4607      	mov	r7, r0
 8005092:	2300      	movs	r3, #0
 8005094:	220a      	movs	r2, #10
 8005096:	4658      	mov	r0, fp
 8005098:	f000 f9bc 	bl	8005414 <__multadd>
 800509c:	4605      	mov	r5, r0
 800509e:	e7f0      	b.n	8005082 <_dtoa_r+0xaba>
 80050a0:	9b00      	ldr	r3, [sp, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bfcc      	ite	gt
 80050a6:	461e      	movgt	r6, r3
 80050a8:	2601      	movle	r6, #1
 80050aa:	4456      	add	r6, sl
 80050ac:	2700      	movs	r7, #0
 80050ae:	4649      	mov	r1, r9
 80050b0:	2201      	movs	r2, #1
 80050b2:	4658      	mov	r0, fp
 80050b4:	f000 fb5a 	bl	800576c <__lshift>
 80050b8:	4621      	mov	r1, r4
 80050ba:	4681      	mov	r9, r0
 80050bc:	f000 fbc2 	bl	8005844 <__mcmp>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	dcb0      	bgt.n	8005026 <_dtoa_r+0xa5e>
 80050c4:	d102      	bne.n	80050cc <_dtoa_r+0xb04>
 80050c6:	f018 0f01 	tst.w	r8, #1
 80050ca:	d1ac      	bne.n	8005026 <_dtoa_r+0xa5e>
 80050cc:	4633      	mov	r3, r6
 80050ce:	461e      	mov	r6, r3
 80050d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050d4:	2a30      	cmp	r2, #48	@ 0x30
 80050d6:	d0fa      	beq.n	80050ce <_dtoa_r+0xb06>
 80050d8:	e5c2      	b.n	8004c60 <_dtoa_r+0x698>
 80050da:	459a      	cmp	sl, r3
 80050dc:	d1a4      	bne.n	8005028 <_dtoa_r+0xa60>
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	3301      	adds	r3, #1
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	2331      	movs	r3, #49	@ 0x31
 80050e6:	f88a 3000 	strb.w	r3, [sl]
 80050ea:	e5b9      	b.n	8004c60 <_dtoa_r+0x698>
 80050ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80050ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800514c <_dtoa_r+0xb84>
 80050f2:	b11b      	cbz	r3, 80050fc <_dtoa_r+0xb34>
 80050f4:	f10a 0308 	add.w	r3, sl, #8
 80050f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	4650      	mov	r0, sl
 80050fe:	b019      	add	sp, #100	@ 0x64
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005106:	2b01      	cmp	r3, #1
 8005108:	f77f ae37 	ble.w	8004d7a <_dtoa_r+0x7b2>
 800510c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800510e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005110:	2001      	movs	r0, #1
 8005112:	e655      	b.n	8004dc0 <_dtoa_r+0x7f8>
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f77f aed6 	ble.w	8004ec8 <_dtoa_r+0x900>
 800511c:	4656      	mov	r6, sl
 800511e:	4621      	mov	r1, r4
 8005120:	4648      	mov	r0, r9
 8005122:	f7ff f9c6 	bl	80044b2 <quorem>
 8005126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800512a:	f806 8b01 	strb.w	r8, [r6], #1
 800512e:	9b00      	ldr	r3, [sp, #0]
 8005130:	eba6 020a 	sub.w	r2, r6, sl
 8005134:	4293      	cmp	r3, r2
 8005136:	ddb3      	ble.n	80050a0 <_dtoa_r+0xad8>
 8005138:	4649      	mov	r1, r9
 800513a:	2300      	movs	r3, #0
 800513c:	220a      	movs	r2, #10
 800513e:	4658      	mov	r0, fp
 8005140:	f000 f968 	bl	8005414 <__multadd>
 8005144:	4681      	mov	r9, r0
 8005146:	e7ea      	b.n	800511e <_dtoa_r+0xb56>
 8005148:	08007513 	.word	0x08007513
 800514c:	08007497 	.word	0x08007497

08005150 <_free_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4605      	mov	r5, r0
 8005154:	2900      	cmp	r1, #0
 8005156:	d041      	beq.n	80051dc <_free_r+0x8c>
 8005158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515c:	1f0c      	subs	r4, r1, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	bfb8      	it	lt
 8005162:	18e4      	addlt	r4, r4, r3
 8005164:	f000 f8e8 	bl	8005338 <__malloc_lock>
 8005168:	4a1d      	ldr	r2, [pc, #116]	@ (80051e0 <_free_r+0x90>)
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	b933      	cbnz	r3, 800517c <_free_r+0x2c>
 800516e:	6063      	str	r3, [r4, #4]
 8005170:	6014      	str	r4, [r2, #0]
 8005172:	4628      	mov	r0, r5
 8005174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005178:	f000 b8e4 	b.w	8005344 <__malloc_unlock>
 800517c:	42a3      	cmp	r3, r4
 800517e:	d908      	bls.n	8005192 <_free_r+0x42>
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	1821      	adds	r1, r4, r0
 8005184:	428b      	cmp	r3, r1
 8005186:	bf01      	itttt	eq
 8005188:	6819      	ldreq	r1, [r3, #0]
 800518a:	685b      	ldreq	r3, [r3, #4]
 800518c:	1809      	addeq	r1, r1, r0
 800518e:	6021      	streq	r1, [r4, #0]
 8005190:	e7ed      	b.n	800516e <_free_r+0x1e>
 8005192:	461a      	mov	r2, r3
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b10b      	cbz	r3, 800519c <_free_r+0x4c>
 8005198:	42a3      	cmp	r3, r4
 800519a:	d9fa      	bls.n	8005192 <_free_r+0x42>
 800519c:	6811      	ldr	r1, [r2, #0]
 800519e:	1850      	adds	r0, r2, r1
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d10b      	bne.n	80051bc <_free_r+0x6c>
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	4401      	add	r1, r0
 80051a8:	1850      	adds	r0, r2, r1
 80051aa:	4283      	cmp	r3, r0
 80051ac:	6011      	str	r1, [r2, #0]
 80051ae:	d1e0      	bne.n	8005172 <_free_r+0x22>
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	6053      	str	r3, [r2, #4]
 80051b6:	4408      	add	r0, r1
 80051b8:	6010      	str	r0, [r2, #0]
 80051ba:	e7da      	b.n	8005172 <_free_r+0x22>
 80051bc:	d902      	bls.n	80051c4 <_free_r+0x74>
 80051be:	230c      	movs	r3, #12
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	e7d6      	b.n	8005172 <_free_r+0x22>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	1821      	adds	r1, r4, r0
 80051c8:	428b      	cmp	r3, r1
 80051ca:	bf04      	itt	eq
 80051cc:	6819      	ldreq	r1, [r3, #0]
 80051ce:	685b      	ldreq	r3, [r3, #4]
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	bf04      	itt	eq
 80051d4:	1809      	addeq	r1, r1, r0
 80051d6:	6021      	streq	r1, [r4, #0]
 80051d8:	6054      	str	r4, [r2, #4]
 80051da:	e7ca      	b.n	8005172 <_free_r+0x22>
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
 80051de:	bf00      	nop
 80051e0:	2000041c 	.word	0x2000041c

080051e4 <malloc>:
 80051e4:	4b02      	ldr	r3, [pc, #8]	@ (80051f0 <malloc+0xc>)
 80051e6:	4601      	mov	r1, r0
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	f000 b825 	b.w	8005238 <_malloc_r>
 80051ee:	bf00      	nop
 80051f0:	20000018 	.word	0x20000018

080051f4 <sbrk_aligned>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005234 <sbrk_aligned+0x40>)
 80051f8:	460c      	mov	r4, r1
 80051fa:	6831      	ldr	r1, [r6, #0]
 80051fc:	4605      	mov	r5, r0
 80051fe:	b911      	cbnz	r1, 8005206 <sbrk_aligned+0x12>
 8005200:	f000 fe46 	bl	8005e90 <_sbrk_r>
 8005204:	6030      	str	r0, [r6, #0]
 8005206:	4621      	mov	r1, r4
 8005208:	4628      	mov	r0, r5
 800520a:	f000 fe41 	bl	8005e90 <_sbrk_r>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	d103      	bne.n	800521a <sbrk_aligned+0x26>
 8005212:	f04f 34ff 	mov.w	r4, #4294967295
 8005216:	4620      	mov	r0, r4
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	1cc4      	adds	r4, r0, #3
 800521c:	f024 0403 	bic.w	r4, r4, #3
 8005220:	42a0      	cmp	r0, r4
 8005222:	d0f8      	beq.n	8005216 <sbrk_aligned+0x22>
 8005224:	1a21      	subs	r1, r4, r0
 8005226:	4628      	mov	r0, r5
 8005228:	f000 fe32 	bl	8005e90 <_sbrk_r>
 800522c:	3001      	adds	r0, #1
 800522e:	d1f2      	bne.n	8005216 <sbrk_aligned+0x22>
 8005230:	e7ef      	b.n	8005212 <sbrk_aligned+0x1e>
 8005232:	bf00      	nop
 8005234:	20000418 	.word	0x20000418

08005238 <_malloc_r>:
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523c:	1ccd      	adds	r5, r1, #3
 800523e:	f025 0503 	bic.w	r5, r5, #3
 8005242:	3508      	adds	r5, #8
 8005244:	2d0c      	cmp	r5, #12
 8005246:	bf38      	it	cc
 8005248:	250c      	movcc	r5, #12
 800524a:	2d00      	cmp	r5, #0
 800524c:	4606      	mov	r6, r0
 800524e:	db01      	blt.n	8005254 <_malloc_r+0x1c>
 8005250:	42a9      	cmp	r1, r5
 8005252:	d904      	bls.n	800525e <_malloc_r+0x26>
 8005254:	230c      	movs	r3, #12
 8005256:	6033      	str	r3, [r6, #0]
 8005258:	2000      	movs	r0, #0
 800525a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800525e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005334 <_malloc_r+0xfc>
 8005262:	f000 f869 	bl	8005338 <__malloc_lock>
 8005266:	f8d8 3000 	ldr.w	r3, [r8]
 800526a:	461c      	mov	r4, r3
 800526c:	bb44      	cbnz	r4, 80052c0 <_malloc_r+0x88>
 800526e:	4629      	mov	r1, r5
 8005270:	4630      	mov	r0, r6
 8005272:	f7ff ffbf 	bl	80051f4 <sbrk_aligned>
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	4604      	mov	r4, r0
 800527a:	d158      	bne.n	800532e <_malloc_r+0xf6>
 800527c:	f8d8 4000 	ldr.w	r4, [r8]
 8005280:	4627      	mov	r7, r4
 8005282:	2f00      	cmp	r7, #0
 8005284:	d143      	bne.n	800530e <_malloc_r+0xd6>
 8005286:	2c00      	cmp	r4, #0
 8005288:	d04b      	beq.n	8005322 <_malloc_r+0xea>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	4639      	mov	r1, r7
 800528e:	4630      	mov	r0, r6
 8005290:	eb04 0903 	add.w	r9, r4, r3
 8005294:	f000 fdfc 	bl	8005e90 <_sbrk_r>
 8005298:	4581      	cmp	r9, r0
 800529a:	d142      	bne.n	8005322 <_malloc_r+0xea>
 800529c:	6821      	ldr	r1, [r4, #0]
 800529e:	1a6d      	subs	r5, r5, r1
 80052a0:	4629      	mov	r1, r5
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7ff ffa6 	bl	80051f4 <sbrk_aligned>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d03a      	beq.n	8005322 <_malloc_r+0xea>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	442b      	add	r3, r5
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	f8d8 3000 	ldr.w	r3, [r8]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	bb62      	cbnz	r2, 8005314 <_malloc_r+0xdc>
 80052ba:	f8c8 7000 	str.w	r7, [r8]
 80052be:	e00f      	b.n	80052e0 <_malloc_r+0xa8>
 80052c0:	6822      	ldr	r2, [r4, #0]
 80052c2:	1b52      	subs	r2, r2, r5
 80052c4:	d420      	bmi.n	8005308 <_malloc_r+0xd0>
 80052c6:	2a0b      	cmp	r2, #11
 80052c8:	d917      	bls.n	80052fa <_malloc_r+0xc2>
 80052ca:	1961      	adds	r1, r4, r5
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	6025      	str	r5, [r4, #0]
 80052d0:	bf18      	it	ne
 80052d2:	6059      	strne	r1, [r3, #4]
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	bf08      	it	eq
 80052d8:	f8c8 1000 	streq.w	r1, [r8]
 80052dc:	5162      	str	r2, [r4, r5]
 80052de:	604b      	str	r3, [r1, #4]
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 f82f 	bl	8005344 <__malloc_unlock>
 80052e6:	f104 000b 	add.w	r0, r4, #11
 80052ea:	1d23      	adds	r3, r4, #4
 80052ec:	f020 0007 	bic.w	r0, r0, #7
 80052f0:	1ac2      	subs	r2, r0, r3
 80052f2:	bf1c      	itt	ne
 80052f4:	1a1b      	subne	r3, r3, r0
 80052f6:	50a3      	strne	r3, [r4, r2]
 80052f8:	e7af      	b.n	800525a <_malloc_r+0x22>
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	bf0c      	ite	eq
 8005300:	f8c8 2000 	streq.w	r2, [r8]
 8005304:	605a      	strne	r2, [r3, #4]
 8005306:	e7eb      	b.n	80052e0 <_malloc_r+0xa8>
 8005308:	4623      	mov	r3, r4
 800530a:	6864      	ldr	r4, [r4, #4]
 800530c:	e7ae      	b.n	800526c <_malloc_r+0x34>
 800530e:	463c      	mov	r4, r7
 8005310:	687f      	ldr	r7, [r7, #4]
 8005312:	e7b6      	b.n	8005282 <_malloc_r+0x4a>
 8005314:	461a      	mov	r2, r3
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	42a3      	cmp	r3, r4
 800531a:	d1fb      	bne.n	8005314 <_malloc_r+0xdc>
 800531c:	2300      	movs	r3, #0
 800531e:	6053      	str	r3, [r2, #4]
 8005320:	e7de      	b.n	80052e0 <_malloc_r+0xa8>
 8005322:	230c      	movs	r3, #12
 8005324:	6033      	str	r3, [r6, #0]
 8005326:	4630      	mov	r0, r6
 8005328:	f000 f80c 	bl	8005344 <__malloc_unlock>
 800532c:	e794      	b.n	8005258 <_malloc_r+0x20>
 800532e:	6005      	str	r5, [r0, #0]
 8005330:	e7d6      	b.n	80052e0 <_malloc_r+0xa8>
 8005332:	bf00      	nop
 8005334:	2000041c 	.word	0x2000041c

08005338 <__malloc_lock>:
 8005338:	4801      	ldr	r0, [pc, #4]	@ (8005340 <__malloc_lock+0x8>)
 800533a:	f7ff b8b8 	b.w	80044ae <__retarget_lock_acquire_recursive>
 800533e:	bf00      	nop
 8005340:	20000414 	.word	0x20000414

08005344 <__malloc_unlock>:
 8005344:	4801      	ldr	r0, [pc, #4]	@ (800534c <__malloc_unlock+0x8>)
 8005346:	f7ff b8b3 	b.w	80044b0 <__retarget_lock_release_recursive>
 800534a:	bf00      	nop
 800534c:	20000414 	.word	0x20000414

08005350 <_Balloc>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	69c6      	ldr	r6, [r0, #28]
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	b976      	cbnz	r6, 8005378 <_Balloc+0x28>
 800535a:	2010      	movs	r0, #16
 800535c:	f7ff ff42 	bl	80051e4 <malloc>
 8005360:	4602      	mov	r2, r0
 8005362:	61e0      	str	r0, [r4, #28]
 8005364:	b920      	cbnz	r0, 8005370 <_Balloc+0x20>
 8005366:	4b18      	ldr	r3, [pc, #96]	@ (80053c8 <_Balloc+0x78>)
 8005368:	4818      	ldr	r0, [pc, #96]	@ (80053cc <_Balloc+0x7c>)
 800536a:	216b      	movs	r1, #107	@ 0x6b
 800536c:	f000 fdae 	bl	8005ecc <__assert_func>
 8005370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005374:	6006      	str	r6, [r0, #0]
 8005376:	60c6      	str	r6, [r0, #12]
 8005378:	69e6      	ldr	r6, [r4, #28]
 800537a:	68f3      	ldr	r3, [r6, #12]
 800537c:	b183      	cbz	r3, 80053a0 <_Balloc+0x50>
 800537e:	69e3      	ldr	r3, [r4, #28]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005386:	b9b8      	cbnz	r0, 80053b8 <_Balloc+0x68>
 8005388:	2101      	movs	r1, #1
 800538a:	fa01 f605 	lsl.w	r6, r1, r5
 800538e:	1d72      	adds	r2, r6, #5
 8005390:	0092      	lsls	r2, r2, #2
 8005392:	4620      	mov	r0, r4
 8005394:	f000 fdb8 	bl	8005f08 <_calloc_r>
 8005398:	b160      	cbz	r0, 80053b4 <_Balloc+0x64>
 800539a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800539e:	e00e      	b.n	80053be <_Balloc+0x6e>
 80053a0:	2221      	movs	r2, #33	@ 0x21
 80053a2:	2104      	movs	r1, #4
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 fdaf 	bl	8005f08 <_calloc_r>
 80053aa:	69e3      	ldr	r3, [r4, #28]
 80053ac:	60f0      	str	r0, [r6, #12]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e4      	bne.n	800537e <_Balloc+0x2e>
 80053b4:	2000      	movs	r0, #0
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	6802      	ldr	r2, [r0, #0]
 80053ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053be:	2300      	movs	r3, #0
 80053c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053c4:	e7f7      	b.n	80053b6 <_Balloc+0x66>
 80053c6:	bf00      	nop
 80053c8:	080074a4 	.word	0x080074a4
 80053cc:	08007524 	.word	0x08007524

080053d0 <_Bfree>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	69c6      	ldr	r6, [r0, #28]
 80053d4:	4605      	mov	r5, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	b976      	cbnz	r6, 80053f8 <_Bfree+0x28>
 80053da:	2010      	movs	r0, #16
 80053dc:	f7ff ff02 	bl	80051e4 <malloc>
 80053e0:	4602      	mov	r2, r0
 80053e2:	61e8      	str	r0, [r5, #28]
 80053e4:	b920      	cbnz	r0, 80053f0 <_Bfree+0x20>
 80053e6:	4b09      	ldr	r3, [pc, #36]	@ (800540c <_Bfree+0x3c>)
 80053e8:	4809      	ldr	r0, [pc, #36]	@ (8005410 <_Bfree+0x40>)
 80053ea:	218f      	movs	r1, #143	@ 0x8f
 80053ec:	f000 fd6e 	bl	8005ecc <__assert_func>
 80053f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053f4:	6006      	str	r6, [r0, #0]
 80053f6:	60c6      	str	r6, [r0, #12]
 80053f8:	b13c      	cbz	r4, 800540a <_Bfree+0x3a>
 80053fa:	69eb      	ldr	r3, [r5, #28]
 80053fc:	6862      	ldr	r2, [r4, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005404:	6021      	str	r1, [r4, #0]
 8005406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	080074a4 	.word	0x080074a4
 8005410:	08007524 	.word	0x08007524

08005414 <__multadd>:
 8005414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005418:	690d      	ldr	r5, [r1, #16]
 800541a:	4607      	mov	r7, r0
 800541c:	460c      	mov	r4, r1
 800541e:	461e      	mov	r6, r3
 8005420:	f101 0c14 	add.w	ip, r1, #20
 8005424:	2000      	movs	r0, #0
 8005426:	f8dc 3000 	ldr.w	r3, [ip]
 800542a:	b299      	uxth	r1, r3
 800542c:	fb02 6101 	mla	r1, r2, r1, r6
 8005430:	0c1e      	lsrs	r6, r3, #16
 8005432:	0c0b      	lsrs	r3, r1, #16
 8005434:	fb02 3306 	mla	r3, r2, r6, r3
 8005438:	b289      	uxth	r1, r1
 800543a:	3001      	adds	r0, #1
 800543c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005440:	4285      	cmp	r5, r0
 8005442:	f84c 1b04 	str.w	r1, [ip], #4
 8005446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800544a:	dcec      	bgt.n	8005426 <__multadd+0x12>
 800544c:	b30e      	cbz	r6, 8005492 <__multadd+0x7e>
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	42ab      	cmp	r3, r5
 8005452:	dc19      	bgt.n	8005488 <__multadd+0x74>
 8005454:	6861      	ldr	r1, [r4, #4]
 8005456:	4638      	mov	r0, r7
 8005458:	3101      	adds	r1, #1
 800545a:	f7ff ff79 	bl	8005350 <_Balloc>
 800545e:	4680      	mov	r8, r0
 8005460:	b928      	cbnz	r0, 800546e <__multadd+0x5a>
 8005462:	4602      	mov	r2, r0
 8005464:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <__multadd+0x84>)
 8005466:	480d      	ldr	r0, [pc, #52]	@ (800549c <__multadd+0x88>)
 8005468:	21ba      	movs	r1, #186	@ 0xba
 800546a:	f000 fd2f 	bl	8005ecc <__assert_func>
 800546e:	6922      	ldr	r2, [r4, #16]
 8005470:	3202      	adds	r2, #2
 8005472:	f104 010c 	add.w	r1, r4, #12
 8005476:	0092      	lsls	r2, r2, #2
 8005478:	300c      	adds	r0, #12
 800547a:	f000 fd19 	bl	8005eb0 <memcpy>
 800547e:	4621      	mov	r1, r4
 8005480:	4638      	mov	r0, r7
 8005482:	f7ff ffa5 	bl	80053d0 <_Bfree>
 8005486:	4644      	mov	r4, r8
 8005488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800548c:	3501      	adds	r5, #1
 800548e:	615e      	str	r6, [r3, #20]
 8005490:	6125      	str	r5, [r4, #16]
 8005492:	4620      	mov	r0, r4
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	08007513 	.word	0x08007513
 800549c:	08007524 	.word	0x08007524

080054a0 <__hi0bits>:
 80054a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80054a4:	4603      	mov	r3, r0
 80054a6:	bf36      	itet	cc
 80054a8:	0403      	lslcc	r3, r0, #16
 80054aa:	2000      	movcs	r0, #0
 80054ac:	2010      	movcc	r0, #16
 80054ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054b2:	bf3c      	itt	cc
 80054b4:	021b      	lslcc	r3, r3, #8
 80054b6:	3008      	addcc	r0, #8
 80054b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054bc:	bf3c      	itt	cc
 80054be:	011b      	lslcc	r3, r3, #4
 80054c0:	3004      	addcc	r0, #4
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c6:	bf3c      	itt	cc
 80054c8:	009b      	lslcc	r3, r3, #2
 80054ca:	3002      	addcc	r0, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	db05      	blt.n	80054dc <__hi0bits+0x3c>
 80054d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80054d4:	f100 0001 	add.w	r0, r0, #1
 80054d8:	bf08      	it	eq
 80054da:	2020      	moveq	r0, #32
 80054dc:	4770      	bx	lr

080054de <__lo0bits>:
 80054de:	6803      	ldr	r3, [r0, #0]
 80054e0:	4602      	mov	r2, r0
 80054e2:	f013 0007 	ands.w	r0, r3, #7
 80054e6:	d00b      	beq.n	8005500 <__lo0bits+0x22>
 80054e8:	07d9      	lsls	r1, r3, #31
 80054ea:	d421      	bmi.n	8005530 <__lo0bits+0x52>
 80054ec:	0798      	lsls	r0, r3, #30
 80054ee:	bf49      	itett	mi
 80054f0:	085b      	lsrmi	r3, r3, #1
 80054f2:	089b      	lsrpl	r3, r3, #2
 80054f4:	2001      	movmi	r0, #1
 80054f6:	6013      	strmi	r3, [r2, #0]
 80054f8:	bf5c      	itt	pl
 80054fa:	6013      	strpl	r3, [r2, #0]
 80054fc:	2002      	movpl	r0, #2
 80054fe:	4770      	bx	lr
 8005500:	b299      	uxth	r1, r3
 8005502:	b909      	cbnz	r1, 8005508 <__lo0bits+0x2a>
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	2010      	movs	r0, #16
 8005508:	b2d9      	uxtb	r1, r3
 800550a:	b909      	cbnz	r1, 8005510 <__lo0bits+0x32>
 800550c:	3008      	adds	r0, #8
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	0719      	lsls	r1, r3, #28
 8005512:	bf04      	itt	eq
 8005514:	091b      	lsreq	r3, r3, #4
 8005516:	3004      	addeq	r0, #4
 8005518:	0799      	lsls	r1, r3, #30
 800551a:	bf04      	itt	eq
 800551c:	089b      	lsreq	r3, r3, #2
 800551e:	3002      	addeq	r0, #2
 8005520:	07d9      	lsls	r1, r3, #31
 8005522:	d403      	bmi.n	800552c <__lo0bits+0x4e>
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	f100 0001 	add.w	r0, r0, #1
 800552a:	d003      	beq.n	8005534 <__lo0bits+0x56>
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4770      	bx	lr
 8005530:	2000      	movs	r0, #0
 8005532:	4770      	bx	lr
 8005534:	2020      	movs	r0, #32
 8005536:	4770      	bx	lr

08005538 <__i2b>:
 8005538:	b510      	push	{r4, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	2101      	movs	r1, #1
 800553e:	f7ff ff07 	bl	8005350 <_Balloc>
 8005542:	4602      	mov	r2, r0
 8005544:	b928      	cbnz	r0, 8005552 <__i2b+0x1a>
 8005546:	4b05      	ldr	r3, [pc, #20]	@ (800555c <__i2b+0x24>)
 8005548:	4805      	ldr	r0, [pc, #20]	@ (8005560 <__i2b+0x28>)
 800554a:	f240 1145 	movw	r1, #325	@ 0x145
 800554e:	f000 fcbd 	bl	8005ecc <__assert_func>
 8005552:	2301      	movs	r3, #1
 8005554:	6144      	str	r4, [r0, #20]
 8005556:	6103      	str	r3, [r0, #16]
 8005558:	bd10      	pop	{r4, pc}
 800555a:	bf00      	nop
 800555c:	08007513 	.word	0x08007513
 8005560:	08007524 	.word	0x08007524

08005564 <__multiply>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	4614      	mov	r4, r2
 800556a:	690a      	ldr	r2, [r1, #16]
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	bfa8      	it	ge
 8005572:	4623      	movge	r3, r4
 8005574:	460f      	mov	r7, r1
 8005576:	bfa4      	itt	ge
 8005578:	460c      	movge	r4, r1
 800557a:	461f      	movge	r7, r3
 800557c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005580:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	6861      	ldr	r1, [r4, #4]
 8005588:	eb0a 0609 	add.w	r6, sl, r9
 800558c:	42b3      	cmp	r3, r6
 800558e:	b085      	sub	sp, #20
 8005590:	bfb8      	it	lt
 8005592:	3101      	addlt	r1, #1
 8005594:	f7ff fedc 	bl	8005350 <_Balloc>
 8005598:	b930      	cbnz	r0, 80055a8 <__multiply+0x44>
 800559a:	4602      	mov	r2, r0
 800559c:	4b44      	ldr	r3, [pc, #272]	@ (80056b0 <__multiply+0x14c>)
 800559e:	4845      	ldr	r0, [pc, #276]	@ (80056b4 <__multiply+0x150>)
 80055a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80055a4:	f000 fc92 	bl	8005ecc <__assert_func>
 80055a8:	f100 0514 	add.w	r5, r0, #20
 80055ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055b0:	462b      	mov	r3, r5
 80055b2:	2200      	movs	r2, #0
 80055b4:	4543      	cmp	r3, r8
 80055b6:	d321      	bcc.n	80055fc <__multiply+0x98>
 80055b8:	f107 0114 	add.w	r1, r7, #20
 80055bc:	f104 0214 	add.w	r2, r4, #20
 80055c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80055c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80055c8:	9302      	str	r3, [sp, #8]
 80055ca:	1b13      	subs	r3, r2, r4
 80055cc:	3b15      	subs	r3, #21
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	3304      	adds	r3, #4
 80055d4:	f104 0715 	add.w	r7, r4, #21
 80055d8:	42ba      	cmp	r2, r7
 80055da:	bf38      	it	cc
 80055dc:	2304      	movcc	r3, #4
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	9b02      	ldr	r3, [sp, #8]
 80055e2:	9103      	str	r1, [sp, #12]
 80055e4:	428b      	cmp	r3, r1
 80055e6:	d80c      	bhi.n	8005602 <__multiply+0x9e>
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	dd03      	ble.n	80055f4 <__multiply+0x90>
 80055ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05b      	beq.n	80056ac <__multiply+0x148>
 80055f4:	6106      	str	r6, [r0, #16]
 80055f6:	b005      	add	sp, #20
 80055f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	f843 2b04 	str.w	r2, [r3], #4
 8005600:	e7d8      	b.n	80055b4 <__multiply+0x50>
 8005602:	f8b1 a000 	ldrh.w	sl, [r1]
 8005606:	f1ba 0f00 	cmp.w	sl, #0
 800560a:	d024      	beq.n	8005656 <__multiply+0xf2>
 800560c:	f104 0e14 	add.w	lr, r4, #20
 8005610:	46a9      	mov	r9, r5
 8005612:	f04f 0c00 	mov.w	ip, #0
 8005616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800561a:	f8d9 3000 	ldr.w	r3, [r9]
 800561e:	fa1f fb87 	uxth.w	fp, r7
 8005622:	b29b      	uxth	r3, r3
 8005624:	fb0a 330b 	mla	r3, sl, fp, r3
 8005628:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800562c:	f8d9 7000 	ldr.w	r7, [r9]
 8005630:	4463      	add	r3, ip
 8005632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005636:	fb0a c70b 	mla	r7, sl, fp, ip
 800563a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800563e:	b29b      	uxth	r3, r3
 8005640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005644:	4572      	cmp	r2, lr
 8005646:	f849 3b04 	str.w	r3, [r9], #4
 800564a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800564e:	d8e2      	bhi.n	8005616 <__multiply+0xb2>
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	f845 c003 	str.w	ip, [r5, r3]
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800565c:	3104      	adds	r1, #4
 800565e:	f1b9 0f00 	cmp.w	r9, #0
 8005662:	d021      	beq.n	80056a8 <__multiply+0x144>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	f104 0c14 	add.w	ip, r4, #20
 800566a:	46ae      	mov	lr, r5
 800566c:	f04f 0a00 	mov.w	sl, #0
 8005670:	f8bc b000 	ldrh.w	fp, [ip]
 8005674:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005678:	fb09 770b 	mla	r7, r9, fp, r7
 800567c:	4457      	add	r7, sl
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005684:	f84e 3b04 	str.w	r3, [lr], #4
 8005688:	f85c 3b04 	ldr.w	r3, [ip], #4
 800568c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005690:	f8be 3000 	ldrh.w	r3, [lr]
 8005694:	fb09 330a 	mla	r3, r9, sl, r3
 8005698:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800569c:	4562      	cmp	r2, ip
 800569e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056a2:	d8e5      	bhi.n	8005670 <__multiply+0x10c>
 80056a4:	9f01      	ldr	r7, [sp, #4]
 80056a6:	51eb      	str	r3, [r5, r7]
 80056a8:	3504      	adds	r5, #4
 80056aa:	e799      	b.n	80055e0 <__multiply+0x7c>
 80056ac:	3e01      	subs	r6, #1
 80056ae:	e79b      	b.n	80055e8 <__multiply+0x84>
 80056b0:	08007513 	.word	0x08007513
 80056b4:	08007524 	.word	0x08007524

080056b8 <__pow5mult>:
 80056b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056bc:	4615      	mov	r5, r2
 80056be:	f012 0203 	ands.w	r2, r2, #3
 80056c2:	4607      	mov	r7, r0
 80056c4:	460e      	mov	r6, r1
 80056c6:	d007      	beq.n	80056d8 <__pow5mult+0x20>
 80056c8:	4c25      	ldr	r4, [pc, #148]	@ (8005760 <__pow5mult+0xa8>)
 80056ca:	3a01      	subs	r2, #1
 80056cc:	2300      	movs	r3, #0
 80056ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056d2:	f7ff fe9f 	bl	8005414 <__multadd>
 80056d6:	4606      	mov	r6, r0
 80056d8:	10ad      	asrs	r5, r5, #2
 80056da:	d03d      	beq.n	8005758 <__pow5mult+0xa0>
 80056dc:	69fc      	ldr	r4, [r7, #28]
 80056de:	b97c      	cbnz	r4, 8005700 <__pow5mult+0x48>
 80056e0:	2010      	movs	r0, #16
 80056e2:	f7ff fd7f 	bl	80051e4 <malloc>
 80056e6:	4602      	mov	r2, r0
 80056e8:	61f8      	str	r0, [r7, #28]
 80056ea:	b928      	cbnz	r0, 80056f8 <__pow5mult+0x40>
 80056ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <__pow5mult+0xac>)
 80056ee:	481e      	ldr	r0, [pc, #120]	@ (8005768 <__pow5mult+0xb0>)
 80056f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80056f4:	f000 fbea 	bl	8005ecc <__assert_func>
 80056f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056fc:	6004      	str	r4, [r0, #0]
 80056fe:	60c4      	str	r4, [r0, #12]
 8005700:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005708:	b94c      	cbnz	r4, 800571e <__pow5mult+0x66>
 800570a:	f240 2171 	movw	r1, #625	@ 0x271
 800570e:	4638      	mov	r0, r7
 8005710:	f7ff ff12 	bl	8005538 <__i2b>
 8005714:	2300      	movs	r3, #0
 8005716:	f8c8 0008 	str.w	r0, [r8, #8]
 800571a:	4604      	mov	r4, r0
 800571c:	6003      	str	r3, [r0, #0]
 800571e:	f04f 0900 	mov.w	r9, #0
 8005722:	07eb      	lsls	r3, r5, #31
 8005724:	d50a      	bpl.n	800573c <__pow5mult+0x84>
 8005726:	4631      	mov	r1, r6
 8005728:	4622      	mov	r2, r4
 800572a:	4638      	mov	r0, r7
 800572c:	f7ff ff1a 	bl	8005564 <__multiply>
 8005730:	4631      	mov	r1, r6
 8005732:	4680      	mov	r8, r0
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff fe4b 	bl	80053d0 <_Bfree>
 800573a:	4646      	mov	r6, r8
 800573c:	106d      	asrs	r5, r5, #1
 800573e:	d00b      	beq.n	8005758 <__pow5mult+0xa0>
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	b938      	cbnz	r0, 8005754 <__pow5mult+0x9c>
 8005744:	4622      	mov	r2, r4
 8005746:	4621      	mov	r1, r4
 8005748:	4638      	mov	r0, r7
 800574a:	f7ff ff0b 	bl	8005564 <__multiply>
 800574e:	6020      	str	r0, [r4, #0]
 8005750:	f8c0 9000 	str.w	r9, [r0]
 8005754:	4604      	mov	r4, r0
 8005756:	e7e4      	b.n	8005722 <__pow5mult+0x6a>
 8005758:	4630      	mov	r0, r6
 800575a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800575e:	bf00      	nop
 8005760:	08007580 	.word	0x08007580
 8005764:	080074a4 	.word	0x080074a4
 8005768:	08007524 	.word	0x08007524

0800576c <__lshift>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	460c      	mov	r4, r1
 8005772:	6849      	ldr	r1, [r1, #4]
 8005774:	6923      	ldr	r3, [r4, #16]
 8005776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	4607      	mov	r7, r0
 800577e:	4691      	mov	r9, r2
 8005780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005784:	f108 0601 	add.w	r6, r8, #1
 8005788:	42b3      	cmp	r3, r6
 800578a:	db0b      	blt.n	80057a4 <__lshift+0x38>
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff fddf 	bl	8005350 <_Balloc>
 8005792:	4605      	mov	r5, r0
 8005794:	b948      	cbnz	r0, 80057aa <__lshift+0x3e>
 8005796:	4602      	mov	r2, r0
 8005798:	4b28      	ldr	r3, [pc, #160]	@ (800583c <__lshift+0xd0>)
 800579a:	4829      	ldr	r0, [pc, #164]	@ (8005840 <__lshift+0xd4>)
 800579c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80057a0:	f000 fb94 	bl	8005ecc <__assert_func>
 80057a4:	3101      	adds	r1, #1
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	e7ee      	b.n	8005788 <__lshift+0x1c>
 80057aa:	2300      	movs	r3, #0
 80057ac:	f100 0114 	add.w	r1, r0, #20
 80057b0:	f100 0210 	add.w	r2, r0, #16
 80057b4:	4618      	mov	r0, r3
 80057b6:	4553      	cmp	r3, sl
 80057b8:	db33      	blt.n	8005822 <__lshift+0xb6>
 80057ba:	6920      	ldr	r0, [r4, #16]
 80057bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057c0:	f104 0314 	add.w	r3, r4, #20
 80057c4:	f019 091f 	ands.w	r9, r9, #31
 80057c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057d0:	d02b      	beq.n	800582a <__lshift+0xbe>
 80057d2:	f1c9 0e20 	rsb	lr, r9, #32
 80057d6:	468a      	mov	sl, r1
 80057d8:	2200      	movs	r2, #0
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	fa00 f009 	lsl.w	r0, r0, r9
 80057e0:	4310      	orrs	r0, r2
 80057e2:	f84a 0b04 	str.w	r0, [sl], #4
 80057e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ea:	459c      	cmp	ip, r3
 80057ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80057f0:	d8f3      	bhi.n	80057da <__lshift+0x6e>
 80057f2:	ebac 0304 	sub.w	r3, ip, r4
 80057f6:	3b15      	subs	r3, #21
 80057f8:	f023 0303 	bic.w	r3, r3, #3
 80057fc:	3304      	adds	r3, #4
 80057fe:	f104 0015 	add.w	r0, r4, #21
 8005802:	4584      	cmp	ip, r0
 8005804:	bf38      	it	cc
 8005806:	2304      	movcc	r3, #4
 8005808:	50ca      	str	r2, [r1, r3]
 800580a:	b10a      	cbz	r2, 8005810 <__lshift+0xa4>
 800580c:	f108 0602 	add.w	r6, r8, #2
 8005810:	3e01      	subs	r6, #1
 8005812:	4638      	mov	r0, r7
 8005814:	612e      	str	r6, [r5, #16]
 8005816:	4621      	mov	r1, r4
 8005818:	f7ff fdda 	bl	80053d0 <_Bfree>
 800581c:	4628      	mov	r0, r5
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	f842 0f04 	str.w	r0, [r2, #4]!
 8005826:	3301      	adds	r3, #1
 8005828:	e7c5      	b.n	80057b6 <__lshift+0x4a>
 800582a:	3904      	subs	r1, #4
 800582c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005830:	f841 2f04 	str.w	r2, [r1, #4]!
 8005834:	459c      	cmp	ip, r3
 8005836:	d8f9      	bhi.n	800582c <__lshift+0xc0>
 8005838:	e7ea      	b.n	8005810 <__lshift+0xa4>
 800583a:	bf00      	nop
 800583c:	08007513 	.word	0x08007513
 8005840:	08007524 	.word	0x08007524

08005844 <__mcmp>:
 8005844:	690a      	ldr	r2, [r1, #16]
 8005846:	4603      	mov	r3, r0
 8005848:	6900      	ldr	r0, [r0, #16]
 800584a:	1a80      	subs	r0, r0, r2
 800584c:	b530      	push	{r4, r5, lr}
 800584e:	d10e      	bne.n	800586e <__mcmp+0x2a>
 8005850:	3314      	adds	r3, #20
 8005852:	3114      	adds	r1, #20
 8005854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800585c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005864:	4295      	cmp	r5, r2
 8005866:	d003      	beq.n	8005870 <__mcmp+0x2c>
 8005868:	d205      	bcs.n	8005876 <__mcmp+0x32>
 800586a:	f04f 30ff 	mov.w	r0, #4294967295
 800586e:	bd30      	pop	{r4, r5, pc}
 8005870:	42a3      	cmp	r3, r4
 8005872:	d3f3      	bcc.n	800585c <__mcmp+0x18>
 8005874:	e7fb      	b.n	800586e <__mcmp+0x2a>
 8005876:	2001      	movs	r0, #1
 8005878:	e7f9      	b.n	800586e <__mcmp+0x2a>
	...

0800587c <__mdiff>:
 800587c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	4689      	mov	r9, r1
 8005882:	4606      	mov	r6, r0
 8005884:	4611      	mov	r1, r2
 8005886:	4648      	mov	r0, r9
 8005888:	4614      	mov	r4, r2
 800588a:	f7ff ffdb 	bl	8005844 <__mcmp>
 800588e:	1e05      	subs	r5, r0, #0
 8005890:	d112      	bne.n	80058b8 <__mdiff+0x3c>
 8005892:	4629      	mov	r1, r5
 8005894:	4630      	mov	r0, r6
 8005896:	f7ff fd5b 	bl	8005350 <_Balloc>
 800589a:	4602      	mov	r2, r0
 800589c:	b928      	cbnz	r0, 80058aa <__mdiff+0x2e>
 800589e:	4b3f      	ldr	r3, [pc, #252]	@ (800599c <__mdiff+0x120>)
 80058a0:	f240 2137 	movw	r1, #567	@ 0x237
 80058a4:	483e      	ldr	r0, [pc, #248]	@ (80059a0 <__mdiff+0x124>)
 80058a6:	f000 fb11 	bl	8005ecc <__assert_func>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058b0:	4610      	mov	r0, r2
 80058b2:	b003      	add	sp, #12
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	bfbc      	itt	lt
 80058ba:	464b      	movlt	r3, r9
 80058bc:	46a1      	movlt	r9, r4
 80058be:	4630      	mov	r0, r6
 80058c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80058c4:	bfba      	itte	lt
 80058c6:	461c      	movlt	r4, r3
 80058c8:	2501      	movlt	r5, #1
 80058ca:	2500      	movge	r5, #0
 80058cc:	f7ff fd40 	bl	8005350 <_Balloc>
 80058d0:	4602      	mov	r2, r0
 80058d2:	b918      	cbnz	r0, 80058dc <__mdiff+0x60>
 80058d4:	4b31      	ldr	r3, [pc, #196]	@ (800599c <__mdiff+0x120>)
 80058d6:	f240 2145 	movw	r1, #581	@ 0x245
 80058da:	e7e3      	b.n	80058a4 <__mdiff+0x28>
 80058dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80058e0:	6926      	ldr	r6, [r4, #16]
 80058e2:	60c5      	str	r5, [r0, #12]
 80058e4:	f109 0310 	add.w	r3, r9, #16
 80058e8:	f109 0514 	add.w	r5, r9, #20
 80058ec:	f104 0e14 	add.w	lr, r4, #20
 80058f0:	f100 0b14 	add.w	fp, r0, #20
 80058f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80058f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	46d9      	mov	r9, fp
 8005900:	f04f 0c00 	mov.w	ip, #0
 8005904:	9b01      	ldr	r3, [sp, #4]
 8005906:	f85e 0b04 	ldr.w	r0, [lr], #4
 800590a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	fa1f f38a 	uxth.w	r3, sl
 8005914:	4619      	mov	r1, r3
 8005916:	b283      	uxth	r3, r0
 8005918:	1acb      	subs	r3, r1, r3
 800591a:	0c00      	lsrs	r0, r0, #16
 800591c:	4463      	add	r3, ip
 800591e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800592c:	4576      	cmp	r6, lr
 800592e:	f849 3b04 	str.w	r3, [r9], #4
 8005932:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005936:	d8e5      	bhi.n	8005904 <__mdiff+0x88>
 8005938:	1b33      	subs	r3, r6, r4
 800593a:	3b15      	subs	r3, #21
 800593c:	f023 0303 	bic.w	r3, r3, #3
 8005940:	3415      	adds	r4, #21
 8005942:	3304      	adds	r3, #4
 8005944:	42a6      	cmp	r6, r4
 8005946:	bf38      	it	cc
 8005948:	2304      	movcc	r3, #4
 800594a:	441d      	add	r5, r3
 800594c:	445b      	add	r3, fp
 800594e:	461e      	mov	r6, r3
 8005950:	462c      	mov	r4, r5
 8005952:	4544      	cmp	r4, r8
 8005954:	d30e      	bcc.n	8005974 <__mdiff+0xf8>
 8005956:	f108 0103 	add.w	r1, r8, #3
 800595a:	1b49      	subs	r1, r1, r5
 800595c:	f021 0103 	bic.w	r1, r1, #3
 8005960:	3d03      	subs	r5, #3
 8005962:	45a8      	cmp	r8, r5
 8005964:	bf38      	it	cc
 8005966:	2100      	movcc	r1, #0
 8005968:	440b      	add	r3, r1
 800596a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800596e:	b191      	cbz	r1, 8005996 <__mdiff+0x11a>
 8005970:	6117      	str	r7, [r2, #16]
 8005972:	e79d      	b.n	80058b0 <__mdiff+0x34>
 8005974:	f854 1b04 	ldr.w	r1, [r4], #4
 8005978:	46e6      	mov	lr, ip
 800597a:	0c08      	lsrs	r0, r1, #16
 800597c:	fa1c fc81 	uxtah	ip, ip, r1
 8005980:	4471      	add	r1, lr
 8005982:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005986:	b289      	uxth	r1, r1
 8005988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800598c:	f846 1b04 	str.w	r1, [r6], #4
 8005990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005994:	e7dd      	b.n	8005952 <__mdiff+0xd6>
 8005996:	3f01      	subs	r7, #1
 8005998:	e7e7      	b.n	800596a <__mdiff+0xee>
 800599a:	bf00      	nop
 800599c:	08007513 	.word	0x08007513
 80059a0:	08007524 	.word	0x08007524

080059a4 <__d2b>:
 80059a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059a8:	460f      	mov	r7, r1
 80059aa:	2101      	movs	r1, #1
 80059ac:	ec59 8b10 	vmov	r8, r9, d0
 80059b0:	4616      	mov	r6, r2
 80059b2:	f7ff fccd 	bl	8005350 <_Balloc>
 80059b6:	4604      	mov	r4, r0
 80059b8:	b930      	cbnz	r0, 80059c8 <__d2b+0x24>
 80059ba:	4602      	mov	r2, r0
 80059bc:	4b23      	ldr	r3, [pc, #140]	@ (8005a4c <__d2b+0xa8>)
 80059be:	4824      	ldr	r0, [pc, #144]	@ (8005a50 <__d2b+0xac>)
 80059c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80059c4:	f000 fa82 	bl	8005ecc <__assert_func>
 80059c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059d0:	b10d      	cbz	r5, 80059d6 <__d2b+0x32>
 80059d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	f1b8 0300 	subs.w	r3, r8, #0
 80059dc:	d023      	beq.n	8005a26 <__d2b+0x82>
 80059de:	4668      	mov	r0, sp
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	f7ff fd7c 	bl	80054de <__lo0bits>
 80059e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80059ea:	b1d0      	cbz	r0, 8005a22 <__d2b+0x7e>
 80059ec:	f1c0 0320 	rsb	r3, r0, #32
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	430b      	orrs	r3, r1
 80059f6:	40c2      	lsrs	r2, r0
 80059f8:	6163      	str	r3, [r4, #20]
 80059fa:	9201      	str	r2, [sp, #4]
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	61a3      	str	r3, [r4, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf0c      	ite	eq
 8005a04:	2201      	moveq	r2, #1
 8005a06:	2202      	movne	r2, #2
 8005a08:	6122      	str	r2, [r4, #16]
 8005a0a:	b1a5      	cbz	r5, 8005a36 <__d2b+0x92>
 8005a0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a10:	4405      	add	r5, r0
 8005a12:	603d      	str	r5, [r7, #0]
 8005a14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a18:	6030      	str	r0, [r6, #0]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	b003      	add	sp, #12
 8005a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a22:	6161      	str	r1, [r4, #20]
 8005a24:	e7ea      	b.n	80059fc <__d2b+0x58>
 8005a26:	a801      	add	r0, sp, #4
 8005a28:	f7ff fd59 	bl	80054de <__lo0bits>
 8005a2c:	9b01      	ldr	r3, [sp, #4]
 8005a2e:	6163      	str	r3, [r4, #20]
 8005a30:	3020      	adds	r0, #32
 8005a32:	2201      	movs	r2, #1
 8005a34:	e7e8      	b.n	8005a08 <__d2b+0x64>
 8005a36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a3e:	6038      	str	r0, [r7, #0]
 8005a40:	6918      	ldr	r0, [r3, #16]
 8005a42:	f7ff fd2d 	bl	80054a0 <__hi0bits>
 8005a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a4a:	e7e5      	b.n	8005a18 <__d2b+0x74>
 8005a4c:	08007513 	.word	0x08007513
 8005a50:	08007524 	.word	0x08007524

08005a54 <__ssputs_r>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	688e      	ldr	r6, [r1, #8]
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	42be      	cmp	r6, r7
 8005a5e:	680b      	ldr	r3, [r1, #0]
 8005a60:	4682      	mov	sl, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4690      	mov	r8, r2
 8005a66:	d82d      	bhi.n	8005ac4 <__ssputs_r+0x70>
 8005a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a70:	d026      	beq.n	8005ac0 <__ssputs_r+0x6c>
 8005a72:	6965      	ldr	r5, [r4, #20]
 8005a74:	6909      	ldr	r1, [r1, #16]
 8005a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a7a:	eba3 0901 	sub.w	r9, r3, r1
 8005a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a82:	1c7b      	adds	r3, r7, #1
 8005a84:	444b      	add	r3, r9
 8005a86:	106d      	asrs	r5, r5, #1
 8005a88:	429d      	cmp	r5, r3
 8005a8a:	bf38      	it	cc
 8005a8c:	461d      	movcc	r5, r3
 8005a8e:	0553      	lsls	r3, r2, #21
 8005a90:	d527      	bpl.n	8005ae2 <__ssputs_r+0x8e>
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7ff fbd0 	bl	8005238 <_malloc_r>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	b360      	cbz	r0, 8005af6 <__ssputs_r+0xa2>
 8005a9c:	6921      	ldr	r1, [r4, #16]
 8005a9e:	464a      	mov	r2, r9
 8005aa0:	f000 fa06 	bl	8005eb0 <memcpy>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	6126      	str	r6, [r4, #16]
 8005ab2:	6165      	str	r5, [r4, #20]
 8005ab4:	444e      	add	r6, r9
 8005ab6:	eba5 0509 	sub.w	r5, r5, r9
 8005aba:	6026      	str	r6, [r4, #0]
 8005abc:	60a5      	str	r5, [r4, #8]
 8005abe:	463e      	mov	r6, r7
 8005ac0:	42be      	cmp	r6, r7
 8005ac2:	d900      	bls.n	8005ac6 <__ssputs_r+0x72>
 8005ac4:	463e      	mov	r6, r7
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	4632      	mov	r2, r6
 8005aca:	4641      	mov	r1, r8
 8005acc:	f000 f9c6 	bl	8005e5c <memmove>
 8005ad0:	68a3      	ldr	r3, [r4, #8]
 8005ad2:	1b9b      	subs	r3, r3, r6
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	4433      	add	r3, r6
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	2000      	movs	r0, #0
 8005ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	f000 fa36 	bl	8005f54 <_realloc_r>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1e0      	bne.n	8005ab0 <__ssputs_r+0x5c>
 8005aee:	6921      	ldr	r1, [r4, #16]
 8005af0:	4650      	mov	r0, sl
 8005af2:	f7ff fb2d 	bl	8005150 <_free_r>
 8005af6:	230c      	movs	r3, #12
 8005af8:	f8ca 3000 	str.w	r3, [sl]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	e7e9      	b.n	8005ade <__ssputs_r+0x8a>
	...

08005b0c <_svfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	4698      	mov	r8, r3
 8005b12:	898b      	ldrh	r3, [r1, #12]
 8005b14:	061b      	lsls	r3, r3, #24
 8005b16:	b09d      	sub	sp, #116	@ 0x74
 8005b18:	4607      	mov	r7, r0
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	d510      	bpl.n	8005b42 <_svfiprintf_r+0x36>
 8005b20:	690b      	ldr	r3, [r1, #16]
 8005b22:	b973      	cbnz	r3, 8005b42 <_svfiprintf_r+0x36>
 8005b24:	2140      	movs	r1, #64	@ 0x40
 8005b26:	f7ff fb87 	bl	8005238 <_malloc_r>
 8005b2a:	6028      	str	r0, [r5, #0]
 8005b2c:	6128      	str	r0, [r5, #16]
 8005b2e:	b930      	cbnz	r0, 8005b3e <_svfiprintf_r+0x32>
 8005b30:	230c      	movs	r3, #12
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	b01d      	add	sp, #116	@ 0x74
 8005b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3e:	2340      	movs	r3, #64	@ 0x40
 8005b40:	616b      	str	r3, [r5, #20]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b46:	2320      	movs	r3, #32
 8005b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b50:	2330      	movs	r3, #48	@ 0x30
 8005b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cf0 <_svfiprintf_r+0x1e4>
 8005b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b5a:	f04f 0901 	mov.w	r9, #1
 8005b5e:	4623      	mov	r3, r4
 8005b60:	469a      	mov	sl, r3
 8005b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b66:	b10a      	cbz	r2, 8005b6c <_svfiprintf_r+0x60>
 8005b68:	2a25      	cmp	r2, #37	@ 0x25
 8005b6a:	d1f9      	bne.n	8005b60 <_svfiprintf_r+0x54>
 8005b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b70:	d00b      	beq.n	8005b8a <_svfiprintf_r+0x7e>
 8005b72:	465b      	mov	r3, fp
 8005b74:	4622      	mov	r2, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ff6b 	bl	8005a54 <__ssputs_r>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f000 80a7 	beq.w	8005cd2 <_svfiprintf_r+0x1c6>
 8005b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b86:	445a      	add	r2, fp
 8005b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 809f 	beq.w	8005cd2 <_svfiprintf_r+0x1c6>
 8005b94:	2300      	movs	r3, #0
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b9e:	f10a 0a01 	add.w	sl, sl, #1
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bac:	4654      	mov	r4, sl
 8005bae:	2205      	movs	r2, #5
 8005bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb4:	484e      	ldr	r0, [pc, #312]	@ (8005cf0 <_svfiprintf_r+0x1e4>)
 8005bb6:	f7fa fb0b 	bl	80001d0 <memchr>
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	b9d8      	cbnz	r0, 8005bf6 <_svfiprintf_r+0xea>
 8005bbe:	06d0      	lsls	r0, r2, #27
 8005bc0:	bf44      	itt	mi
 8005bc2:	2320      	movmi	r3, #32
 8005bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc8:	0711      	lsls	r1, r2, #28
 8005bca:	bf44      	itt	mi
 8005bcc:	232b      	movmi	r3, #43	@ 0x2b
 8005bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd8:	d015      	beq.n	8005c06 <_svfiprintf_r+0xfa>
 8005bda:	9a07      	ldr	r2, [sp, #28]
 8005bdc:	4654      	mov	r4, sl
 8005bde:	2000      	movs	r0, #0
 8005be0:	f04f 0c0a 	mov.w	ip, #10
 8005be4:	4621      	mov	r1, r4
 8005be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bea:	3b30      	subs	r3, #48	@ 0x30
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d94b      	bls.n	8005c88 <_svfiprintf_r+0x17c>
 8005bf0:	b1b0      	cbz	r0, 8005c20 <_svfiprintf_r+0x114>
 8005bf2:	9207      	str	r2, [sp, #28]
 8005bf4:	e014      	b.n	8005c20 <_svfiprintf_r+0x114>
 8005bf6:	eba0 0308 	sub.w	r3, r0, r8
 8005bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	46a2      	mov	sl, r4
 8005c04:	e7d2      	b.n	8005bac <_svfiprintf_r+0xa0>
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	1d19      	adds	r1, r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	9103      	str	r1, [sp, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfbb      	ittet	lt
 8005c12:	425b      	neglt	r3, r3
 8005c14:	f042 0202 	orrlt.w	r2, r2, #2
 8005c18:	9307      	strge	r3, [sp, #28]
 8005c1a:	9307      	strlt	r3, [sp, #28]
 8005c1c:	bfb8      	it	lt
 8005c1e:	9204      	strlt	r2, [sp, #16]
 8005c20:	7823      	ldrb	r3, [r4, #0]
 8005c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c24:	d10a      	bne.n	8005c3c <_svfiprintf_r+0x130>
 8005c26:	7863      	ldrb	r3, [r4, #1]
 8005c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c2a:	d132      	bne.n	8005c92 <_svfiprintf_r+0x186>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	9203      	str	r2, [sp, #12]
 8005c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c38:	3402      	adds	r4, #2
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d00 <_svfiprintf_r+0x1f4>
 8005c40:	7821      	ldrb	r1, [r4, #0]
 8005c42:	2203      	movs	r2, #3
 8005c44:	4650      	mov	r0, sl
 8005c46:	f7fa fac3 	bl	80001d0 <memchr>
 8005c4a:	b138      	cbz	r0, 8005c5c <_svfiprintf_r+0x150>
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	eba0 000a 	sub.w	r0, r0, sl
 8005c52:	2240      	movs	r2, #64	@ 0x40
 8005c54:	4082      	lsls	r2, r0
 8005c56:	4313      	orrs	r3, r2
 8005c58:	3401      	adds	r4, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c60:	4824      	ldr	r0, [pc, #144]	@ (8005cf4 <_svfiprintf_r+0x1e8>)
 8005c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c66:	2206      	movs	r2, #6
 8005c68:	f7fa fab2 	bl	80001d0 <memchr>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d036      	beq.n	8005cde <_svfiprintf_r+0x1d2>
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <_svfiprintf_r+0x1ec>)
 8005c72:	bb1b      	cbnz	r3, 8005cbc <_svfiprintf_r+0x1b0>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	3307      	adds	r3, #7
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c82:	4433      	add	r3, r6
 8005c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c86:	e76a      	b.n	8005b5e <_svfiprintf_r+0x52>
 8005c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7a8      	b.n	8005be4 <_svfiprintf_r+0xd8>
 8005c92:	2300      	movs	r3, #0
 8005c94:	3401      	adds	r4, #1
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f04f 0c0a 	mov.w	ip, #10
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca4:	3a30      	subs	r2, #48	@ 0x30
 8005ca6:	2a09      	cmp	r2, #9
 8005ca8:	d903      	bls.n	8005cb2 <_svfiprintf_r+0x1a6>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0c6      	beq.n	8005c3c <_svfiprintf_r+0x130>
 8005cae:	9105      	str	r1, [sp, #20]
 8005cb0:	e7c4      	b.n	8005c3c <_svfiprintf_r+0x130>
 8005cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e7f0      	b.n	8005c9e <_svfiprintf_r+0x192>
 8005cbc:	ab03      	add	r3, sp, #12
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005cfc <_svfiprintf_r+0x1f0>)
 8005cc4:	a904      	add	r1, sp, #16
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7fd fe96 	bl	80039f8 <_printf_float>
 8005ccc:	1c42      	adds	r2, r0, #1
 8005cce:	4606      	mov	r6, r0
 8005cd0:	d1d6      	bne.n	8005c80 <_svfiprintf_r+0x174>
 8005cd2:	89ab      	ldrh	r3, [r5, #12]
 8005cd4:	065b      	lsls	r3, r3, #25
 8005cd6:	f53f af2d 	bmi.w	8005b34 <_svfiprintf_r+0x28>
 8005cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cdc:	e72c      	b.n	8005b38 <_svfiprintf_r+0x2c>
 8005cde:	ab03      	add	r3, sp, #12
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <_svfiprintf_r+0x1f0>)
 8005ce6:	a904      	add	r1, sp, #16
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f7fe f91d 	bl	8003f28 <_printf_i>
 8005cee:	e7ed      	b.n	8005ccc <_svfiprintf_r+0x1c0>
 8005cf0:	08007680 	.word	0x08007680
 8005cf4:	0800768a 	.word	0x0800768a
 8005cf8:	080039f9 	.word	0x080039f9
 8005cfc:	08005a55 	.word	0x08005a55
 8005d00:	08007686 	.word	0x08007686

08005d04 <__sflush_r>:
 8005d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	0716      	lsls	r6, r2, #28
 8005d0e:	4605      	mov	r5, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	d454      	bmi.n	8005dbe <__sflush_r+0xba>
 8005d14:	684b      	ldr	r3, [r1, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dc02      	bgt.n	8005d20 <__sflush_r+0x1c>
 8005d1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dd48      	ble.n	8005db2 <__sflush_r+0xae>
 8005d20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d045      	beq.n	8005db2 <__sflush_r+0xae>
 8005d26:	2300      	movs	r3, #0
 8005d28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d2c:	682f      	ldr	r7, [r5, #0]
 8005d2e:	6a21      	ldr	r1, [r4, #32]
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	d030      	beq.n	8005d96 <__sflush_r+0x92>
 8005d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	0759      	lsls	r1, r3, #29
 8005d3a:	d505      	bpl.n	8005d48 <__sflush_r+0x44>
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d42:	b10b      	cbz	r3, 8005d48 <__sflush_r+0x44>
 8005d44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d4c:	6a21      	ldr	r1, [r4, #32]
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b0      	blx	r6
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	d106      	bne.n	8005d66 <__sflush_r+0x62>
 8005d58:	6829      	ldr	r1, [r5, #0]
 8005d5a:	291d      	cmp	r1, #29
 8005d5c:	d82b      	bhi.n	8005db6 <__sflush_r+0xb2>
 8005d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e08 <__sflush_r+0x104>)
 8005d60:	410a      	asrs	r2, r1
 8005d62:	07d6      	lsls	r6, r2, #31
 8005d64:	d427      	bmi.n	8005db6 <__sflush_r+0xb2>
 8005d66:	2200      	movs	r2, #0
 8005d68:	6062      	str	r2, [r4, #4]
 8005d6a:	04d9      	lsls	r1, r3, #19
 8005d6c:	6922      	ldr	r2, [r4, #16]
 8005d6e:	6022      	str	r2, [r4, #0]
 8005d70:	d504      	bpl.n	8005d7c <__sflush_r+0x78>
 8005d72:	1c42      	adds	r2, r0, #1
 8005d74:	d101      	bne.n	8005d7a <__sflush_r+0x76>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	b903      	cbnz	r3, 8005d7c <__sflush_r+0x78>
 8005d7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d7e:	602f      	str	r7, [r5, #0]
 8005d80:	b1b9      	cbz	r1, 8005db2 <__sflush_r+0xae>
 8005d82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d002      	beq.n	8005d90 <__sflush_r+0x8c>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7ff f9e0 	bl	8005150 <_free_r>
 8005d90:	2300      	movs	r3, #0
 8005d92:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d94:	e00d      	b.n	8005db2 <__sflush_r+0xae>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b0      	blx	r6
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	1c50      	adds	r0, r2, #1
 8005da0:	d1c9      	bne.n	8005d36 <__sflush_r+0x32>
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0c6      	beq.n	8005d36 <__sflush_r+0x32>
 8005da8:	2b1d      	cmp	r3, #29
 8005daa:	d001      	beq.n	8005db0 <__sflush_r+0xac>
 8005dac:	2b16      	cmp	r3, #22
 8005dae:	d11e      	bne.n	8005dee <__sflush_r+0xea>
 8005db0:	602f      	str	r7, [r5, #0]
 8005db2:	2000      	movs	r0, #0
 8005db4:	e022      	b.n	8005dfc <__sflush_r+0xf8>
 8005db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dba:	b21b      	sxth	r3, r3
 8005dbc:	e01b      	b.n	8005df6 <__sflush_r+0xf2>
 8005dbe:	690f      	ldr	r7, [r1, #16]
 8005dc0:	2f00      	cmp	r7, #0
 8005dc2:	d0f6      	beq.n	8005db2 <__sflush_r+0xae>
 8005dc4:	0793      	lsls	r3, r2, #30
 8005dc6:	680e      	ldr	r6, [r1, #0]
 8005dc8:	bf08      	it	eq
 8005dca:	694b      	ldreq	r3, [r1, #20]
 8005dcc:	600f      	str	r7, [r1, #0]
 8005dce:	bf18      	it	ne
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	eba6 0807 	sub.w	r8, r6, r7
 8005dd6:	608b      	str	r3, [r1, #8]
 8005dd8:	f1b8 0f00 	cmp.w	r8, #0
 8005ddc:	dde9      	ble.n	8005db2 <__sflush_r+0xae>
 8005dde:	6a21      	ldr	r1, [r4, #32]
 8005de0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005de2:	4643      	mov	r3, r8
 8005de4:	463a      	mov	r2, r7
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b0      	blx	r6
 8005dea:	2800      	cmp	r0, #0
 8005dec:	dc08      	bgt.n	8005e00 <__sflush_r+0xfc>
 8005dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	4407      	add	r7, r0
 8005e02:	eba8 0800 	sub.w	r8, r8, r0
 8005e06:	e7e7      	b.n	8005dd8 <__sflush_r+0xd4>
 8005e08:	dfbffffe 	.word	0xdfbffffe

08005e0c <_fflush_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	b913      	cbnz	r3, 8005e1c <_fflush_r+0x10>
 8005e16:	2500      	movs	r5, #0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	b118      	cbz	r0, 8005e26 <_fflush_r+0x1a>
 8005e1e:	6a03      	ldr	r3, [r0, #32]
 8005e20:	b90b      	cbnz	r3, 8005e26 <_fflush_r+0x1a>
 8005e22:	f7fe fa2d 	bl	8004280 <__sinit>
 8005e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f3      	beq.n	8005e16 <_fflush_r+0xa>
 8005e2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e30:	07d0      	lsls	r0, r2, #31
 8005e32:	d404      	bmi.n	8005e3e <_fflush_r+0x32>
 8005e34:	0599      	lsls	r1, r3, #22
 8005e36:	d402      	bmi.n	8005e3e <_fflush_r+0x32>
 8005e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e3a:	f7fe fb38 	bl	80044ae <__retarget_lock_acquire_recursive>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	4621      	mov	r1, r4
 8005e42:	f7ff ff5f 	bl	8005d04 <__sflush_r>
 8005e46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e48:	07da      	lsls	r2, r3, #31
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	d4e4      	bmi.n	8005e18 <_fflush_r+0xc>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	059b      	lsls	r3, r3, #22
 8005e52:	d4e1      	bmi.n	8005e18 <_fflush_r+0xc>
 8005e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e56:	f7fe fb2b 	bl	80044b0 <__retarget_lock_release_recursive>
 8005e5a:	e7dd      	b.n	8005e18 <_fflush_r+0xc>

08005e5c <memmove>:
 8005e5c:	4288      	cmp	r0, r1
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	eb01 0402 	add.w	r4, r1, r2
 8005e64:	d902      	bls.n	8005e6c <memmove+0x10>
 8005e66:	4284      	cmp	r4, r0
 8005e68:	4623      	mov	r3, r4
 8005e6a:	d807      	bhi.n	8005e7c <memmove+0x20>
 8005e6c:	1e43      	subs	r3, r0, #1
 8005e6e:	42a1      	cmp	r1, r4
 8005e70:	d008      	beq.n	8005e84 <memmove+0x28>
 8005e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e7a:	e7f8      	b.n	8005e6e <memmove+0x12>
 8005e7c:	4402      	add	r2, r0
 8005e7e:	4601      	mov	r1, r0
 8005e80:	428a      	cmp	r2, r1
 8005e82:	d100      	bne.n	8005e86 <memmove+0x2a>
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e8e:	e7f7      	b.n	8005e80 <memmove+0x24>

08005e90 <_sbrk_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	@ (8005eac <_sbrk_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fb fefa 	bl	8001c94 <_sbrk>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_sbrk_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_sbrk_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20000410 	.word	0x20000410

08005eb0 <memcpy>:
 8005eb0:	440a      	add	r2, r1
 8005eb2:	4291      	cmp	r1, r2
 8005eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eb8:	d100      	bne.n	8005ebc <memcpy+0xc>
 8005eba:	4770      	bx	lr
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec6:	4291      	cmp	r1, r2
 8005ec8:	d1f9      	bne.n	8005ebe <memcpy+0xe>
 8005eca:	bd10      	pop	{r4, pc}

08005ecc <__assert_func>:
 8005ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ece:	4614      	mov	r4, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b09      	ldr	r3, [pc, #36]	@ (8005ef8 <__assert_func+0x2c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	68d8      	ldr	r0, [r3, #12]
 8005eda:	b954      	cbnz	r4, 8005ef2 <__assert_func+0x26>
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <__assert_func+0x30>)
 8005ede:	461c      	mov	r4, r3
 8005ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ee4:	9100      	str	r1, [sp, #0]
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	4905      	ldr	r1, [pc, #20]	@ (8005f00 <__assert_func+0x34>)
 8005eea:	f000 f86f 	bl	8005fcc <fiprintf>
 8005eee:	f000 f87f 	bl	8005ff0 <abort>
 8005ef2:	4b04      	ldr	r3, [pc, #16]	@ (8005f04 <__assert_func+0x38>)
 8005ef4:	e7f4      	b.n	8005ee0 <__assert_func+0x14>
 8005ef6:	bf00      	nop
 8005ef8:	20000018 	.word	0x20000018
 8005efc:	080076d6 	.word	0x080076d6
 8005f00:	080076a8 	.word	0x080076a8
 8005f04:	0800769b 	.word	0x0800769b

08005f08 <_calloc_r>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	fba1 5402 	umull	r5, r4, r1, r2
 8005f0e:	b93c      	cbnz	r4, 8005f20 <_calloc_r+0x18>
 8005f10:	4629      	mov	r1, r5
 8005f12:	f7ff f991 	bl	8005238 <_malloc_r>
 8005f16:	4606      	mov	r6, r0
 8005f18:	b928      	cbnz	r0, 8005f26 <_calloc_r+0x1e>
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	220c      	movs	r2, #12
 8005f22:	6002      	str	r2, [r0, #0]
 8005f24:	e7f9      	b.n	8005f1a <_calloc_r+0x12>
 8005f26:	462a      	mov	r2, r5
 8005f28:	4621      	mov	r1, r4
 8005f2a:	f7fe fa42 	bl	80043b2 <memset>
 8005f2e:	e7f5      	b.n	8005f1c <_calloc_r+0x14>

08005f30 <__ascii_mbtowc>:
 8005f30:	b082      	sub	sp, #8
 8005f32:	b901      	cbnz	r1, 8005f36 <__ascii_mbtowc+0x6>
 8005f34:	a901      	add	r1, sp, #4
 8005f36:	b142      	cbz	r2, 8005f4a <__ascii_mbtowc+0x1a>
 8005f38:	b14b      	cbz	r3, 8005f4e <__ascii_mbtowc+0x1e>
 8005f3a:	7813      	ldrb	r3, [r2, #0]
 8005f3c:	600b      	str	r3, [r1, #0]
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	1e10      	subs	r0, r2, #0
 8005f42:	bf18      	it	ne
 8005f44:	2001      	movne	r0, #1
 8005f46:	b002      	add	sp, #8
 8005f48:	4770      	bx	lr
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	e7fb      	b.n	8005f46 <__ascii_mbtowc+0x16>
 8005f4e:	f06f 0001 	mvn.w	r0, #1
 8005f52:	e7f8      	b.n	8005f46 <__ascii_mbtowc+0x16>

08005f54 <_realloc_r>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4615      	mov	r5, r2
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b921      	cbnz	r1, 8005f6a <_realloc_r+0x16>
 8005f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f64:	4611      	mov	r1, r2
 8005f66:	f7ff b967 	b.w	8005238 <_malloc_r>
 8005f6a:	b92a      	cbnz	r2, 8005f78 <_realloc_r+0x24>
 8005f6c:	f7ff f8f0 	bl	8005150 <_free_r>
 8005f70:	2400      	movs	r4, #0
 8005f72:	4620      	mov	r0, r4
 8005f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f78:	f000 f841 	bl	8005ffe <_malloc_usable_size_r>
 8005f7c:	4285      	cmp	r5, r0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	d802      	bhi.n	8005f88 <_realloc_r+0x34>
 8005f82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f86:	d8f4      	bhi.n	8005f72 <_realloc_r+0x1e>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	f7ff f954 	bl	8005238 <_malloc_r>
 8005f90:	4607      	mov	r7, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d0ec      	beq.n	8005f70 <_realloc_r+0x1c>
 8005f96:	42b5      	cmp	r5, r6
 8005f98:	462a      	mov	r2, r5
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	bf28      	it	cs
 8005f9e:	4632      	movcs	r2, r6
 8005fa0:	f7ff ff86 	bl	8005eb0 <memcpy>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff f8d2 	bl	8005150 <_free_r>
 8005fac:	463c      	mov	r4, r7
 8005fae:	e7e0      	b.n	8005f72 <_realloc_r+0x1e>

08005fb0 <__ascii_wctomb>:
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4608      	mov	r0, r1
 8005fb4:	b141      	cbz	r1, 8005fc8 <__ascii_wctomb+0x18>
 8005fb6:	2aff      	cmp	r2, #255	@ 0xff
 8005fb8:	d904      	bls.n	8005fc4 <__ascii_wctomb+0x14>
 8005fba:	228a      	movs	r2, #138	@ 0x8a
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc2:	4770      	bx	lr
 8005fc4:	700a      	strb	r2, [r1, #0]
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	4770      	bx	lr
	...

08005fcc <fiprintf>:
 8005fcc:	b40e      	push	{r1, r2, r3}
 8005fce:	b503      	push	{r0, r1, lr}
 8005fd0:	4601      	mov	r1, r0
 8005fd2:	ab03      	add	r3, sp, #12
 8005fd4:	4805      	ldr	r0, [pc, #20]	@ (8005fec <fiprintf+0x20>)
 8005fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	f000 f83f 	bl	8006060 <_vfiprintf_r>
 8005fe2:	b002      	add	sp, #8
 8005fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe8:	b003      	add	sp, #12
 8005fea:	4770      	bx	lr
 8005fec:	20000018 	.word	0x20000018

08005ff0 <abort>:
 8005ff0:	b508      	push	{r3, lr}
 8005ff2:	2006      	movs	r0, #6
 8005ff4:	f000 fa08 	bl	8006408 <raise>
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fb fdd3 	bl	8001ba4 <_exit>

08005ffe <_malloc_usable_size_r>:
 8005ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006002:	1f18      	subs	r0, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfbc      	itt	lt
 8006008:	580b      	ldrlt	r3, [r1, r0]
 800600a:	18c0      	addlt	r0, r0, r3
 800600c:	4770      	bx	lr

0800600e <__sfputc_r>:
 800600e:	6893      	ldr	r3, [r2, #8]
 8006010:	3b01      	subs	r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	b410      	push	{r4}
 8006016:	6093      	str	r3, [r2, #8]
 8006018:	da08      	bge.n	800602c <__sfputc_r+0x1e>
 800601a:	6994      	ldr	r4, [r2, #24]
 800601c:	42a3      	cmp	r3, r4
 800601e:	db01      	blt.n	8006024 <__sfputc_r+0x16>
 8006020:	290a      	cmp	r1, #10
 8006022:	d103      	bne.n	800602c <__sfputc_r+0x1e>
 8006024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006028:	f000 b932 	b.w	8006290 <__swbuf_r>
 800602c:	6813      	ldr	r3, [r2, #0]
 800602e:	1c58      	adds	r0, r3, #1
 8006030:	6010      	str	r0, [r2, #0]
 8006032:	7019      	strb	r1, [r3, #0]
 8006034:	4608      	mov	r0, r1
 8006036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603a:	4770      	bx	lr

0800603c <__sfputs_r>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	4606      	mov	r6, r0
 8006040:	460f      	mov	r7, r1
 8006042:	4614      	mov	r4, r2
 8006044:	18d5      	adds	r5, r2, r3
 8006046:	42ac      	cmp	r4, r5
 8006048:	d101      	bne.n	800604e <__sfputs_r+0x12>
 800604a:	2000      	movs	r0, #0
 800604c:	e007      	b.n	800605e <__sfputs_r+0x22>
 800604e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006052:	463a      	mov	r2, r7
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff ffda 	bl	800600e <__sfputc_r>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	d1f3      	bne.n	8006046 <__sfputs_r+0xa>
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006060 <_vfiprintf_r>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	460d      	mov	r5, r1
 8006066:	b09d      	sub	sp, #116	@ 0x74
 8006068:	4614      	mov	r4, r2
 800606a:	4698      	mov	r8, r3
 800606c:	4606      	mov	r6, r0
 800606e:	b118      	cbz	r0, 8006078 <_vfiprintf_r+0x18>
 8006070:	6a03      	ldr	r3, [r0, #32]
 8006072:	b90b      	cbnz	r3, 8006078 <_vfiprintf_r+0x18>
 8006074:	f7fe f904 	bl	8004280 <__sinit>
 8006078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800607a:	07d9      	lsls	r1, r3, #31
 800607c:	d405      	bmi.n	800608a <_vfiprintf_r+0x2a>
 800607e:	89ab      	ldrh	r3, [r5, #12]
 8006080:	059a      	lsls	r2, r3, #22
 8006082:	d402      	bmi.n	800608a <_vfiprintf_r+0x2a>
 8006084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006086:	f7fe fa12 	bl	80044ae <__retarget_lock_acquire_recursive>
 800608a:	89ab      	ldrh	r3, [r5, #12]
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	d501      	bpl.n	8006094 <_vfiprintf_r+0x34>
 8006090:	692b      	ldr	r3, [r5, #16]
 8006092:	b99b      	cbnz	r3, 80060bc <_vfiprintf_r+0x5c>
 8006094:	4629      	mov	r1, r5
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f938 	bl	800630c <__swsetup_r>
 800609c:	b170      	cbz	r0, 80060bc <_vfiprintf_r+0x5c>
 800609e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060a0:	07dc      	lsls	r4, r3, #31
 80060a2:	d504      	bpl.n	80060ae <_vfiprintf_r+0x4e>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	b01d      	add	sp, #116	@ 0x74
 80060aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	0598      	lsls	r0, r3, #22
 80060b2:	d4f7      	bmi.n	80060a4 <_vfiprintf_r+0x44>
 80060b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060b6:	f7fe f9fb 	bl	80044b0 <__retarget_lock_release_recursive>
 80060ba:	e7f3      	b.n	80060a4 <_vfiprintf_r+0x44>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c0:	2320      	movs	r3, #32
 80060c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ca:	2330      	movs	r3, #48	@ 0x30
 80060cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800627c <_vfiprintf_r+0x21c>
 80060d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060d4:	f04f 0901 	mov.w	r9, #1
 80060d8:	4623      	mov	r3, r4
 80060da:	469a      	mov	sl, r3
 80060dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e0:	b10a      	cbz	r2, 80060e6 <_vfiprintf_r+0x86>
 80060e2:	2a25      	cmp	r2, #37	@ 0x25
 80060e4:	d1f9      	bne.n	80060da <_vfiprintf_r+0x7a>
 80060e6:	ebba 0b04 	subs.w	fp, sl, r4
 80060ea:	d00b      	beq.n	8006104 <_vfiprintf_r+0xa4>
 80060ec:	465b      	mov	r3, fp
 80060ee:	4622      	mov	r2, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ffa2 	bl	800603c <__sfputs_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	f000 80a7 	beq.w	800624c <_vfiprintf_r+0x1ec>
 80060fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006100:	445a      	add	r2, fp
 8006102:	9209      	str	r2, [sp, #36]	@ 0x24
 8006104:	f89a 3000 	ldrb.w	r3, [sl]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 809f 	beq.w	800624c <_vfiprintf_r+0x1ec>
 800610e:	2300      	movs	r3, #0
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006118:	f10a 0a01 	add.w	sl, sl, #1
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006124:	931a      	str	r3, [sp, #104]	@ 0x68
 8006126:	4654      	mov	r4, sl
 8006128:	2205      	movs	r2, #5
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4853      	ldr	r0, [pc, #332]	@ (800627c <_vfiprintf_r+0x21c>)
 8006130:	f7fa f84e 	bl	80001d0 <memchr>
 8006134:	9a04      	ldr	r2, [sp, #16]
 8006136:	b9d8      	cbnz	r0, 8006170 <_vfiprintf_r+0x110>
 8006138:	06d1      	lsls	r1, r2, #27
 800613a:	bf44      	itt	mi
 800613c:	2320      	movmi	r3, #32
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006142:	0713      	lsls	r3, r2, #28
 8006144:	bf44      	itt	mi
 8006146:	232b      	movmi	r3, #43	@ 0x2b
 8006148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b2a      	cmp	r3, #42	@ 0x2a
 8006152:	d015      	beq.n	8006180 <_vfiprintf_r+0x120>
 8006154:	9a07      	ldr	r2, [sp, #28]
 8006156:	4654      	mov	r4, sl
 8006158:	2000      	movs	r0, #0
 800615a:	f04f 0c0a 	mov.w	ip, #10
 800615e:	4621      	mov	r1, r4
 8006160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006164:	3b30      	subs	r3, #48	@ 0x30
 8006166:	2b09      	cmp	r3, #9
 8006168:	d94b      	bls.n	8006202 <_vfiprintf_r+0x1a2>
 800616a:	b1b0      	cbz	r0, 800619a <_vfiprintf_r+0x13a>
 800616c:	9207      	str	r2, [sp, #28]
 800616e:	e014      	b.n	800619a <_vfiprintf_r+0x13a>
 8006170:	eba0 0308 	sub.w	r3, r0, r8
 8006174:	fa09 f303 	lsl.w	r3, r9, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	46a2      	mov	sl, r4
 800617e:	e7d2      	b.n	8006126 <_vfiprintf_r+0xc6>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	1d19      	adds	r1, r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	9103      	str	r1, [sp, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbb      	ittet	lt
 800618c:	425b      	neglt	r3, r3
 800618e:	f042 0202 	orrlt.w	r2, r2, #2
 8006192:	9307      	strge	r3, [sp, #28]
 8006194:	9307      	strlt	r3, [sp, #28]
 8006196:	bfb8      	it	lt
 8006198:	9204      	strlt	r2, [sp, #16]
 800619a:	7823      	ldrb	r3, [r4, #0]
 800619c:	2b2e      	cmp	r3, #46	@ 0x2e
 800619e:	d10a      	bne.n	80061b6 <_vfiprintf_r+0x156>
 80061a0:	7863      	ldrb	r3, [r4, #1]
 80061a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a4:	d132      	bne.n	800620c <_vfiprintf_r+0x1ac>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	9203      	str	r2, [sp, #12]
 80061ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061b2:	3402      	adds	r4, #2
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800628c <_vfiprintf_r+0x22c>
 80061ba:	7821      	ldrb	r1, [r4, #0]
 80061bc:	2203      	movs	r2, #3
 80061be:	4650      	mov	r0, sl
 80061c0:	f7fa f806 	bl	80001d0 <memchr>
 80061c4:	b138      	cbz	r0, 80061d6 <_vfiprintf_r+0x176>
 80061c6:	9b04      	ldr	r3, [sp, #16]
 80061c8:	eba0 000a 	sub.w	r0, r0, sl
 80061cc:	2240      	movs	r2, #64	@ 0x40
 80061ce:	4082      	lsls	r2, r0
 80061d0:	4313      	orrs	r3, r2
 80061d2:	3401      	adds	r4, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	4829      	ldr	r0, [pc, #164]	@ (8006280 <_vfiprintf_r+0x220>)
 80061dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061e0:	2206      	movs	r2, #6
 80061e2:	f7f9 fff5 	bl	80001d0 <memchr>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d03f      	beq.n	800626a <_vfiprintf_r+0x20a>
 80061ea:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <_vfiprintf_r+0x224>)
 80061ec:	bb1b      	cbnz	r3, 8006236 <_vfiprintf_r+0x1d6>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	3308      	adds	r3, #8
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fc:	443b      	add	r3, r7
 80061fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006200:	e76a      	b.n	80060d8 <_vfiprintf_r+0x78>
 8006202:	fb0c 3202 	mla	r2, ip, r2, r3
 8006206:	460c      	mov	r4, r1
 8006208:	2001      	movs	r0, #1
 800620a:	e7a8      	b.n	800615e <_vfiprintf_r+0xfe>
 800620c:	2300      	movs	r3, #0
 800620e:	3401      	adds	r4, #1
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	4619      	mov	r1, r3
 8006214:	f04f 0c0a 	mov.w	ip, #10
 8006218:	4620      	mov	r0, r4
 800621a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621e:	3a30      	subs	r2, #48	@ 0x30
 8006220:	2a09      	cmp	r2, #9
 8006222:	d903      	bls.n	800622c <_vfiprintf_r+0x1cc>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0c6      	beq.n	80061b6 <_vfiprintf_r+0x156>
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	e7c4      	b.n	80061b6 <_vfiprintf_r+0x156>
 800622c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006230:	4604      	mov	r4, r0
 8006232:	2301      	movs	r3, #1
 8006234:	e7f0      	b.n	8006218 <_vfiprintf_r+0x1b8>
 8006236:	ab03      	add	r3, sp, #12
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	462a      	mov	r2, r5
 800623c:	4b12      	ldr	r3, [pc, #72]	@ (8006288 <_vfiprintf_r+0x228>)
 800623e:	a904      	add	r1, sp, #16
 8006240:	4630      	mov	r0, r6
 8006242:	f7fd fbd9 	bl	80039f8 <_printf_float>
 8006246:	4607      	mov	r7, r0
 8006248:	1c78      	adds	r0, r7, #1
 800624a:	d1d6      	bne.n	80061fa <_vfiprintf_r+0x19a>
 800624c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624e:	07d9      	lsls	r1, r3, #31
 8006250:	d405      	bmi.n	800625e <_vfiprintf_r+0x1fe>
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	059a      	lsls	r2, r3, #22
 8006256:	d402      	bmi.n	800625e <_vfiprintf_r+0x1fe>
 8006258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800625a:	f7fe f929 	bl	80044b0 <__retarget_lock_release_recursive>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	065b      	lsls	r3, r3, #25
 8006262:	f53f af1f 	bmi.w	80060a4 <_vfiprintf_r+0x44>
 8006266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006268:	e71e      	b.n	80060a8 <_vfiprintf_r+0x48>
 800626a:	ab03      	add	r3, sp, #12
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	462a      	mov	r2, r5
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <_vfiprintf_r+0x228>)
 8006272:	a904      	add	r1, sp, #16
 8006274:	4630      	mov	r0, r6
 8006276:	f7fd fe57 	bl	8003f28 <_printf_i>
 800627a:	e7e4      	b.n	8006246 <_vfiprintf_r+0x1e6>
 800627c:	08007680 	.word	0x08007680
 8006280:	0800768a 	.word	0x0800768a
 8006284:	080039f9 	.word	0x080039f9
 8006288:	0800603d 	.word	0x0800603d
 800628c:	08007686 	.word	0x08007686

08006290 <__swbuf_r>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	460e      	mov	r6, r1
 8006294:	4614      	mov	r4, r2
 8006296:	4605      	mov	r5, r0
 8006298:	b118      	cbz	r0, 80062a2 <__swbuf_r+0x12>
 800629a:	6a03      	ldr	r3, [r0, #32]
 800629c:	b90b      	cbnz	r3, 80062a2 <__swbuf_r+0x12>
 800629e:	f7fd ffef 	bl	8004280 <__sinit>
 80062a2:	69a3      	ldr	r3, [r4, #24]
 80062a4:	60a3      	str	r3, [r4, #8]
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	071a      	lsls	r2, r3, #28
 80062aa:	d501      	bpl.n	80062b0 <__swbuf_r+0x20>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	b943      	cbnz	r3, 80062c2 <__swbuf_r+0x32>
 80062b0:	4621      	mov	r1, r4
 80062b2:	4628      	mov	r0, r5
 80062b4:	f000 f82a 	bl	800630c <__swsetup_r>
 80062b8:	b118      	cbz	r0, 80062c2 <__swbuf_r+0x32>
 80062ba:	f04f 37ff 	mov.w	r7, #4294967295
 80062be:	4638      	mov	r0, r7
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	6922      	ldr	r2, [r4, #16]
 80062c6:	1a98      	subs	r0, r3, r2
 80062c8:	6963      	ldr	r3, [r4, #20]
 80062ca:	b2f6      	uxtb	r6, r6
 80062cc:	4283      	cmp	r3, r0
 80062ce:	4637      	mov	r7, r6
 80062d0:	dc05      	bgt.n	80062de <__swbuf_r+0x4e>
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff fd99 	bl	8005e0c <_fflush_r>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1ed      	bne.n	80062ba <__swbuf_r+0x2a>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	701e      	strb	r6, [r3, #0]
 80062ec:	6962      	ldr	r2, [r4, #20]
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d004      	beq.n	80062fe <__swbuf_r+0x6e>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d5e1      	bpl.n	80062be <__swbuf_r+0x2e>
 80062fa:	2e0a      	cmp	r6, #10
 80062fc:	d1df      	bne.n	80062be <__swbuf_r+0x2e>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f7ff fd83 	bl	8005e0c <_fflush_r>
 8006306:	2800      	cmp	r0, #0
 8006308:	d0d9      	beq.n	80062be <__swbuf_r+0x2e>
 800630a:	e7d6      	b.n	80062ba <__swbuf_r+0x2a>

0800630c <__swsetup_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4b29      	ldr	r3, [pc, #164]	@ (80063b4 <__swsetup_r+0xa8>)
 8006310:	4605      	mov	r5, r0
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	460c      	mov	r4, r1
 8006316:	b118      	cbz	r0, 8006320 <__swsetup_r+0x14>
 8006318:	6a03      	ldr	r3, [r0, #32]
 800631a:	b90b      	cbnz	r3, 8006320 <__swsetup_r+0x14>
 800631c:	f7fd ffb0 	bl	8004280 <__sinit>
 8006320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006324:	0719      	lsls	r1, r3, #28
 8006326:	d422      	bmi.n	800636e <__swsetup_r+0x62>
 8006328:	06da      	lsls	r2, r3, #27
 800632a:	d407      	bmi.n	800633c <__swsetup_r+0x30>
 800632c:	2209      	movs	r2, #9
 800632e:	602a      	str	r2, [r5, #0]
 8006330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	e033      	b.n	80063a4 <__swsetup_r+0x98>
 800633c:	0758      	lsls	r0, r3, #29
 800633e:	d512      	bpl.n	8006366 <__swsetup_r+0x5a>
 8006340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006342:	b141      	cbz	r1, 8006356 <__swsetup_r+0x4a>
 8006344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006348:	4299      	cmp	r1, r3
 800634a:	d002      	beq.n	8006352 <__swsetup_r+0x46>
 800634c:	4628      	mov	r0, r5
 800634e:	f7fe feff 	bl	8005150 <_free_r>
 8006352:	2300      	movs	r3, #0
 8006354:	6363      	str	r3, [r4, #52]	@ 0x34
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	2300      	movs	r3, #0
 8006360:	6063      	str	r3, [r4, #4]
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f043 0308 	orr.w	r3, r3, #8
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	b94b      	cbnz	r3, 8006386 <__swsetup_r+0x7a>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637c:	d003      	beq.n	8006386 <__swsetup_r+0x7a>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f883 	bl	800648c <__smakebuf_r>
 8006386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800638a:	f013 0201 	ands.w	r2, r3, #1
 800638e:	d00a      	beq.n	80063a6 <__swsetup_r+0x9a>
 8006390:	2200      	movs	r2, #0
 8006392:	60a2      	str	r2, [r4, #8]
 8006394:	6962      	ldr	r2, [r4, #20]
 8006396:	4252      	negs	r2, r2
 8006398:	61a2      	str	r2, [r4, #24]
 800639a:	6922      	ldr	r2, [r4, #16]
 800639c:	b942      	cbnz	r2, 80063b0 <__swsetup_r+0xa4>
 800639e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063a2:	d1c5      	bne.n	8006330 <__swsetup_r+0x24>
 80063a4:	bd38      	pop	{r3, r4, r5, pc}
 80063a6:	0799      	lsls	r1, r3, #30
 80063a8:	bf58      	it	pl
 80063aa:	6962      	ldrpl	r2, [r4, #20]
 80063ac:	60a2      	str	r2, [r4, #8]
 80063ae:	e7f4      	b.n	800639a <__swsetup_r+0x8e>
 80063b0:	2000      	movs	r0, #0
 80063b2:	e7f7      	b.n	80063a4 <__swsetup_r+0x98>
 80063b4:	20000018 	.word	0x20000018

080063b8 <_raise_r>:
 80063b8:	291f      	cmp	r1, #31
 80063ba:	b538      	push	{r3, r4, r5, lr}
 80063bc:	4605      	mov	r5, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	d904      	bls.n	80063cc <_raise_r+0x14>
 80063c2:	2316      	movs	r3, #22
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063ce:	b112      	cbz	r2, 80063d6 <_raise_r+0x1e>
 80063d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063d4:	b94b      	cbnz	r3, 80063ea <_raise_r+0x32>
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f830 	bl	800643c <_getpid_r>
 80063dc:	4622      	mov	r2, r4
 80063de:	4601      	mov	r1, r0
 80063e0:	4628      	mov	r0, r5
 80063e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e6:	f000 b817 	b.w	8006418 <_kill_r>
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d00a      	beq.n	8006404 <_raise_r+0x4c>
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	d103      	bne.n	80063fa <_raise_r+0x42>
 80063f2:	2316      	movs	r3, #22
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	2001      	movs	r0, #1
 80063f8:	e7e7      	b.n	80063ca <_raise_r+0x12>
 80063fa:	2100      	movs	r1, #0
 80063fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006400:	4620      	mov	r0, r4
 8006402:	4798      	blx	r3
 8006404:	2000      	movs	r0, #0
 8006406:	e7e0      	b.n	80063ca <_raise_r+0x12>

08006408 <raise>:
 8006408:	4b02      	ldr	r3, [pc, #8]	@ (8006414 <raise+0xc>)
 800640a:	4601      	mov	r1, r0
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	f7ff bfd3 	b.w	80063b8 <_raise_r>
 8006412:	bf00      	nop
 8006414:	20000018 	.word	0x20000018

08006418 <_kill_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d07      	ldr	r5, [pc, #28]	@ (8006438 <_kill_r+0x20>)
 800641c:	2300      	movs	r3, #0
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	f7fb fbad 	bl	8001b84 <_kill>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	d102      	bne.n	8006434 <_kill_r+0x1c>
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	b103      	cbz	r3, 8006434 <_kill_r+0x1c>
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	bd38      	pop	{r3, r4, r5, pc}
 8006436:	bf00      	nop
 8006438:	20000410 	.word	0x20000410

0800643c <_getpid_r>:
 800643c:	f7fb bb9a 	b.w	8001b74 <_getpid>

08006440 <__swhatbuf_r>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	2900      	cmp	r1, #0
 800644a:	b096      	sub	sp, #88	@ 0x58
 800644c:	4615      	mov	r5, r2
 800644e:	461e      	mov	r6, r3
 8006450:	da0d      	bge.n	800646e <__swhatbuf_r+0x2e>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	bf14      	ite	ne
 800645e:	2340      	movne	r3, #64	@ 0x40
 8006460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006464:	2000      	movs	r0, #0
 8006466:	6031      	str	r1, [r6, #0]
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	b016      	add	sp, #88	@ 0x58
 800646c:	bd70      	pop	{r4, r5, r6, pc}
 800646e:	466a      	mov	r2, sp
 8006470:	f000 f848 	bl	8006504 <_fstat_r>
 8006474:	2800      	cmp	r0, #0
 8006476:	dbec      	blt.n	8006452 <__swhatbuf_r+0x12>
 8006478:	9901      	ldr	r1, [sp, #4]
 800647a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800647e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006482:	4259      	negs	r1, r3
 8006484:	4159      	adcs	r1, r3
 8006486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800648a:	e7eb      	b.n	8006464 <__swhatbuf_r+0x24>

0800648c <__smakebuf_r>:
 800648c:	898b      	ldrh	r3, [r1, #12]
 800648e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006490:	079d      	lsls	r5, r3, #30
 8006492:	4606      	mov	r6, r0
 8006494:	460c      	mov	r4, r1
 8006496:	d507      	bpl.n	80064a8 <__smakebuf_r+0x1c>
 8006498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	2301      	movs	r3, #1
 80064a2:	6163      	str	r3, [r4, #20]
 80064a4:	b003      	add	sp, #12
 80064a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a8:	ab01      	add	r3, sp, #4
 80064aa:	466a      	mov	r2, sp
 80064ac:	f7ff ffc8 	bl	8006440 <__swhatbuf_r>
 80064b0:	9f00      	ldr	r7, [sp, #0]
 80064b2:	4605      	mov	r5, r0
 80064b4:	4639      	mov	r1, r7
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7fe febe 	bl	8005238 <_malloc_r>
 80064bc:	b948      	cbnz	r0, 80064d2 <__smakebuf_r+0x46>
 80064be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c2:	059a      	lsls	r2, r3, #22
 80064c4:	d4ee      	bmi.n	80064a4 <__smakebuf_r+0x18>
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	f043 0302 	orr.w	r3, r3, #2
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	e7e2      	b.n	8006498 <__smakebuf_r+0xc>
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	6020      	str	r0, [r4, #0]
 80064d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064e2:	b15b      	cbz	r3, 80064fc <__smakebuf_r+0x70>
 80064e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 f81d 	bl	8006528 <_isatty_r>
 80064ee:	b128      	cbz	r0, 80064fc <__smakebuf_r+0x70>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	431d      	orrs	r5, r3
 8006500:	81a5      	strh	r5, [r4, #12]
 8006502:	e7cf      	b.n	80064a4 <__smakebuf_r+0x18>

08006504 <_fstat_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d07      	ldr	r5, [pc, #28]	@ (8006524 <_fstat_r+0x20>)
 8006508:	2300      	movs	r3, #0
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	602b      	str	r3, [r5, #0]
 8006512:	f7fb fb97 	bl	8001c44 <_fstat>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d102      	bne.n	8006520 <_fstat_r+0x1c>
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	b103      	cbz	r3, 8006520 <_fstat_r+0x1c>
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	bd38      	pop	{r3, r4, r5, pc}
 8006522:	bf00      	nop
 8006524:	20000410 	.word	0x20000410

08006528 <_isatty_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d06      	ldr	r5, [pc, #24]	@ (8006544 <_isatty_r+0x1c>)
 800652c:	2300      	movs	r3, #0
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fb fb96 	bl	8001c64 <_isatty>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_isatty_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_isatty_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	20000410 	.word	0x20000410

08006548 <pow>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	ed2d 8b02 	vpush	{d8}
 800654e:	eeb0 8a40 	vmov.f32	s16, s0
 8006552:	eef0 8a60 	vmov.f32	s17, s1
 8006556:	ec55 4b11 	vmov	r4, r5, d1
 800655a:	f000 f871 	bl	8006640 <__ieee754_pow>
 800655e:	4622      	mov	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	ec57 6b10 	vmov	r6, r7, d0
 800656a:	f7fa fadf 	bl	8000b2c <__aeabi_dcmpun>
 800656e:	2800      	cmp	r0, #0
 8006570:	d13b      	bne.n	80065ea <pow+0xa2>
 8006572:	ec51 0b18 	vmov	r0, r1, d8
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	f7fa faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800657e:	b1b8      	cbz	r0, 80065b0 <pow+0x68>
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	f7fa fa9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800658c:	2800      	cmp	r0, #0
 800658e:	d146      	bne.n	800661e <pow+0xd6>
 8006590:	ec45 4b10 	vmov	d0, r4, r5
 8006594:	f000 f848 	bl	8006628 <finite>
 8006598:	b338      	cbz	r0, 80065ea <pow+0xa2>
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa fa9b 	bl	8000adc <__aeabi_dcmplt>
 80065a6:	b300      	cbz	r0, 80065ea <pow+0xa2>
 80065a8:	f7fd ff56 	bl	8004458 <__errno>
 80065ac:	2322      	movs	r3, #34	@ 0x22
 80065ae:	e01b      	b.n	80065e8 <pow+0xa0>
 80065b0:	ec47 6b10 	vmov	d0, r6, r7
 80065b4:	f000 f838 	bl	8006628 <finite>
 80065b8:	b9e0      	cbnz	r0, 80065f4 <pow+0xac>
 80065ba:	eeb0 0a48 	vmov.f32	s0, s16
 80065be:	eef0 0a68 	vmov.f32	s1, s17
 80065c2:	f000 f831 	bl	8006628 <finite>
 80065c6:	b1a8      	cbz	r0, 80065f4 <pow+0xac>
 80065c8:	ec45 4b10 	vmov	d0, r4, r5
 80065cc:	f000 f82c 	bl	8006628 <finite>
 80065d0:	b180      	cbz	r0, 80065f4 <pow+0xac>
 80065d2:	4632      	mov	r2, r6
 80065d4:	463b      	mov	r3, r7
 80065d6:	4630      	mov	r0, r6
 80065d8:	4639      	mov	r1, r7
 80065da:	f7fa faa7 	bl	8000b2c <__aeabi_dcmpun>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d0e2      	beq.n	80065a8 <pow+0x60>
 80065e2:	f7fd ff39 	bl	8004458 <__errno>
 80065e6:	2321      	movs	r3, #33	@ 0x21
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	ecbd 8b02 	vpop	{d8}
 80065ee:	ec47 6b10 	vmov	d0, r6, r7
 80065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006600:	2800      	cmp	r0, #0
 8006602:	d0f2      	beq.n	80065ea <pow+0xa2>
 8006604:	eeb0 0a48 	vmov.f32	s0, s16
 8006608:	eef0 0a68 	vmov.f32	s1, s17
 800660c:	f000 f80c 	bl	8006628 <finite>
 8006610:	2800      	cmp	r0, #0
 8006612:	d0ea      	beq.n	80065ea <pow+0xa2>
 8006614:	ec45 4b10 	vmov	d0, r4, r5
 8006618:	f000 f806 	bl	8006628 <finite>
 800661c:	e7c3      	b.n	80065a6 <pow+0x5e>
 800661e:	4f01      	ldr	r7, [pc, #4]	@ (8006624 <pow+0xdc>)
 8006620:	2600      	movs	r6, #0
 8006622:	e7e2      	b.n	80065ea <pow+0xa2>
 8006624:	3ff00000 	.word	0x3ff00000

08006628 <finite>:
 8006628:	b082      	sub	sp, #8
 800662a:	ed8d 0b00 	vstr	d0, [sp]
 800662e:	9801      	ldr	r0, [sp, #4]
 8006630:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006634:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006638:	0fc0      	lsrs	r0, r0, #31
 800663a:	b002      	add	sp, #8
 800663c:	4770      	bx	lr
	...

08006640 <__ieee754_pow>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	b091      	sub	sp, #68	@ 0x44
 8006646:	ed8d 1b00 	vstr	d1, [sp]
 800664a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800664e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006652:	ea5a 0001 	orrs.w	r0, sl, r1
 8006656:	ec57 6b10 	vmov	r6, r7, d0
 800665a:	d113      	bne.n	8006684 <__ieee754_pow+0x44>
 800665c:	19b3      	adds	r3, r6, r6
 800665e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006662:	4152      	adcs	r2, r2
 8006664:	4298      	cmp	r0, r3
 8006666:	4b98      	ldr	r3, [pc, #608]	@ (80068c8 <__ieee754_pow+0x288>)
 8006668:	4193      	sbcs	r3, r2
 800666a:	f080 84ea 	bcs.w	8007042 <__ieee754_pow+0xa02>
 800666e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	f7f9 fe09 	bl	800028c <__adddf3>
 800667a:	ec41 0b10 	vmov	d0, r0, r1
 800667e:	b011      	add	sp, #68	@ 0x44
 8006680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006684:	4a91      	ldr	r2, [pc, #580]	@ (80068cc <__ieee754_pow+0x28c>)
 8006686:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800668a:	4590      	cmp	r8, r2
 800668c:	463d      	mov	r5, r7
 800668e:	4633      	mov	r3, r6
 8006690:	d806      	bhi.n	80066a0 <__ieee754_pow+0x60>
 8006692:	d101      	bne.n	8006698 <__ieee754_pow+0x58>
 8006694:	2e00      	cmp	r6, #0
 8006696:	d1ea      	bne.n	800666e <__ieee754_pow+0x2e>
 8006698:	4592      	cmp	sl, r2
 800669a:	d801      	bhi.n	80066a0 <__ieee754_pow+0x60>
 800669c:	d10e      	bne.n	80066bc <__ieee754_pow+0x7c>
 800669e:	b169      	cbz	r1, 80066bc <__ieee754_pow+0x7c>
 80066a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80066a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80066a8:	431d      	orrs	r5, r3
 80066aa:	d1e0      	bne.n	800666e <__ieee754_pow+0x2e>
 80066ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066b0:	18db      	adds	r3, r3, r3
 80066b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80066b6:	4152      	adcs	r2, r2
 80066b8:	429d      	cmp	r5, r3
 80066ba:	e7d4      	b.n	8006666 <__ieee754_pow+0x26>
 80066bc:	2d00      	cmp	r5, #0
 80066be:	46c3      	mov	fp, r8
 80066c0:	da3a      	bge.n	8006738 <__ieee754_pow+0xf8>
 80066c2:	4a83      	ldr	r2, [pc, #524]	@ (80068d0 <__ieee754_pow+0x290>)
 80066c4:	4592      	cmp	sl, r2
 80066c6:	d84d      	bhi.n	8006764 <__ieee754_pow+0x124>
 80066c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80066cc:	4592      	cmp	sl, r2
 80066ce:	f240 84c7 	bls.w	8007060 <__ieee754_pow+0xa20>
 80066d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80066d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80066da:	2a14      	cmp	r2, #20
 80066dc:	dd0f      	ble.n	80066fe <__ieee754_pow+0xbe>
 80066de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80066e2:	fa21 f402 	lsr.w	r4, r1, r2
 80066e6:	fa04 f202 	lsl.w	r2, r4, r2
 80066ea:	428a      	cmp	r2, r1
 80066ec:	f040 84b8 	bne.w	8007060 <__ieee754_pow+0xa20>
 80066f0:	f004 0401 	and.w	r4, r4, #1
 80066f4:	f1c4 0402 	rsb	r4, r4, #2
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d158      	bne.n	80067ae <__ieee754_pow+0x16e>
 80066fc:	e00e      	b.n	800671c <__ieee754_pow+0xdc>
 80066fe:	2900      	cmp	r1, #0
 8006700:	d154      	bne.n	80067ac <__ieee754_pow+0x16c>
 8006702:	f1c2 0214 	rsb	r2, r2, #20
 8006706:	fa4a f402 	asr.w	r4, sl, r2
 800670a:	fa04 f202 	lsl.w	r2, r4, r2
 800670e:	4552      	cmp	r2, sl
 8006710:	f040 84a3 	bne.w	800705a <__ieee754_pow+0xa1a>
 8006714:	f004 0401 	and.w	r4, r4, #1
 8006718:	f1c4 0402 	rsb	r4, r4, #2
 800671c:	4a6d      	ldr	r2, [pc, #436]	@ (80068d4 <__ieee754_pow+0x294>)
 800671e:	4592      	cmp	sl, r2
 8006720:	d12e      	bne.n	8006780 <__ieee754_pow+0x140>
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	f280 8494 	bge.w	8007052 <__ieee754_pow+0xa12>
 800672a:	496a      	ldr	r1, [pc, #424]	@ (80068d4 <__ieee754_pow+0x294>)
 800672c:	4632      	mov	r2, r6
 800672e:	463b      	mov	r3, r7
 8006730:	2000      	movs	r0, #0
 8006732:	f7fa f88b 	bl	800084c <__aeabi_ddiv>
 8006736:	e7a0      	b.n	800667a <__ieee754_pow+0x3a>
 8006738:	2400      	movs	r4, #0
 800673a:	bbc1      	cbnz	r1, 80067ae <__ieee754_pow+0x16e>
 800673c:	4a63      	ldr	r2, [pc, #396]	@ (80068cc <__ieee754_pow+0x28c>)
 800673e:	4592      	cmp	sl, r2
 8006740:	d1ec      	bne.n	800671c <__ieee754_pow+0xdc>
 8006742:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006746:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800674a:	431a      	orrs	r2, r3
 800674c:	f000 8479 	beq.w	8007042 <__ieee754_pow+0xa02>
 8006750:	4b61      	ldr	r3, [pc, #388]	@ (80068d8 <__ieee754_pow+0x298>)
 8006752:	4598      	cmp	r8, r3
 8006754:	d908      	bls.n	8006768 <__ieee754_pow+0x128>
 8006756:	f1b9 0f00 	cmp.w	r9, #0
 800675a:	f2c0 8476 	blt.w	800704a <__ieee754_pow+0xa0a>
 800675e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006762:	e78a      	b.n	800667a <__ieee754_pow+0x3a>
 8006764:	2402      	movs	r4, #2
 8006766:	e7e8      	b.n	800673a <__ieee754_pow+0xfa>
 8006768:	f1b9 0f00 	cmp.w	r9, #0
 800676c:	f04f 0000 	mov.w	r0, #0
 8006770:	f04f 0100 	mov.w	r1, #0
 8006774:	da81      	bge.n	800667a <__ieee754_pow+0x3a>
 8006776:	e9dd 0300 	ldrd	r0, r3, [sp]
 800677a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800677e:	e77c      	b.n	800667a <__ieee754_pow+0x3a>
 8006780:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006784:	d106      	bne.n	8006794 <__ieee754_pow+0x154>
 8006786:	4632      	mov	r2, r6
 8006788:	463b      	mov	r3, r7
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7f9 ff33 	bl	80005f8 <__aeabi_dmul>
 8006792:	e772      	b.n	800667a <__ieee754_pow+0x3a>
 8006794:	4a51      	ldr	r2, [pc, #324]	@ (80068dc <__ieee754_pow+0x29c>)
 8006796:	4591      	cmp	r9, r2
 8006798:	d109      	bne.n	80067ae <__ieee754_pow+0x16e>
 800679a:	2d00      	cmp	r5, #0
 800679c:	db07      	blt.n	80067ae <__ieee754_pow+0x16e>
 800679e:	ec47 6b10 	vmov	d0, r6, r7
 80067a2:	b011      	add	sp, #68	@ 0x44
 80067a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	f000 bd52 	b.w	8007250 <__ieee754_sqrt>
 80067ac:	2400      	movs	r4, #0
 80067ae:	ec47 6b10 	vmov	d0, r6, r7
 80067b2:	9302      	str	r3, [sp, #8]
 80067b4:	f000 fc88 	bl	80070c8 <fabs>
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	ec51 0b10 	vmov	r0, r1, d0
 80067be:	bb53      	cbnz	r3, 8006816 <__ieee754_pow+0x1d6>
 80067c0:	4b44      	ldr	r3, [pc, #272]	@ (80068d4 <__ieee754_pow+0x294>)
 80067c2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d002      	beq.n	80067d0 <__ieee754_pow+0x190>
 80067ca:	f1b8 0f00 	cmp.w	r8, #0
 80067ce:	d122      	bne.n	8006816 <__ieee754_pow+0x1d6>
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	da05      	bge.n	80067e2 <__ieee754_pow+0x1a2>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	2000      	movs	r0, #0
 80067dc:	493d      	ldr	r1, [pc, #244]	@ (80068d4 <__ieee754_pow+0x294>)
 80067de:	f7fa f835 	bl	800084c <__aeabi_ddiv>
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	f6bf af49 	bge.w	800667a <__ieee754_pow+0x3a>
 80067e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80067ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80067f0:	ea58 0804 	orrs.w	r8, r8, r4
 80067f4:	d108      	bne.n	8006808 <__ieee754_pow+0x1c8>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	f7f9 fd43 	bl	8000288 <__aeabi_dsub>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e794      	b.n	8006732 <__ieee754_pow+0xf2>
 8006808:	2c01      	cmp	r4, #1
 800680a:	f47f af36 	bne.w	800667a <__ieee754_pow+0x3a>
 800680e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006812:	4619      	mov	r1, r3
 8006814:	e731      	b.n	800667a <__ieee754_pow+0x3a>
 8006816:	0feb      	lsrs	r3, r5, #31
 8006818:	3b01      	subs	r3, #1
 800681a:	ea53 0204 	orrs.w	r2, r3, r4
 800681e:	d102      	bne.n	8006826 <__ieee754_pow+0x1e6>
 8006820:	4632      	mov	r2, r6
 8006822:	463b      	mov	r3, r7
 8006824:	e7e9      	b.n	80067fa <__ieee754_pow+0x1ba>
 8006826:	3c01      	subs	r4, #1
 8006828:	431c      	orrs	r4, r3
 800682a:	d016      	beq.n	800685a <__ieee754_pow+0x21a>
 800682c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80068b8 <__ieee754_pow+0x278>
 8006830:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006834:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006838:	f240 8112 	bls.w	8006a60 <__ieee754_pow+0x420>
 800683c:	4b28      	ldr	r3, [pc, #160]	@ (80068e0 <__ieee754_pow+0x2a0>)
 800683e:	459a      	cmp	sl, r3
 8006840:	4b25      	ldr	r3, [pc, #148]	@ (80068d8 <__ieee754_pow+0x298>)
 8006842:	d916      	bls.n	8006872 <__ieee754_pow+0x232>
 8006844:	4598      	cmp	r8, r3
 8006846:	d80b      	bhi.n	8006860 <__ieee754_pow+0x220>
 8006848:	f1b9 0f00 	cmp.w	r9, #0
 800684c:	da0b      	bge.n	8006866 <__ieee754_pow+0x226>
 800684e:	2000      	movs	r0, #0
 8006850:	b011      	add	sp, #68	@ 0x44
 8006852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006856:	f000 bcf3 	b.w	8007240 <__math_oflow>
 800685a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80068c0 <__ieee754_pow+0x280>
 800685e:	e7e7      	b.n	8006830 <__ieee754_pow+0x1f0>
 8006860:	f1b9 0f00 	cmp.w	r9, #0
 8006864:	dcf3      	bgt.n	800684e <__ieee754_pow+0x20e>
 8006866:	2000      	movs	r0, #0
 8006868:	b011      	add	sp, #68	@ 0x44
 800686a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686e:	f000 bcdf 	b.w	8007230 <__math_uflow>
 8006872:	4598      	cmp	r8, r3
 8006874:	d20c      	bcs.n	8006890 <__ieee754_pow+0x250>
 8006876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	f7fa f92d 	bl	8000adc <__aeabi_dcmplt>
 8006882:	3800      	subs	r0, #0
 8006884:	bf18      	it	ne
 8006886:	2001      	movne	r0, #1
 8006888:	f1b9 0f00 	cmp.w	r9, #0
 800688c:	daec      	bge.n	8006868 <__ieee754_pow+0x228>
 800688e:	e7df      	b.n	8006850 <__ieee754_pow+0x210>
 8006890:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <__ieee754_pow+0x294>)
 8006892:	4598      	cmp	r8, r3
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	d924      	bls.n	80068e4 <__ieee754_pow+0x2a4>
 800689a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800689e:	2300      	movs	r3, #0
 80068a0:	f7fa f91c 	bl	8000adc <__aeabi_dcmplt>
 80068a4:	3800      	subs	r0, #0
 80068a6:	bf18      	it	ne
 80068a8:	2001      	movne	r0, #1
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	dccf      	bgt.n	8006850 <__ieee754_pow+0x210>
 80068b0:	e7da      	b.n	8006868 <__ieee754_pow+0x228>
 80068b2:	bf00      	nop
 80068b4:	f3af 8000 	nop.w
 80068b8:	00000000 	.word	0x00000000
 80068bc:	3ff00000 	.word	0x3ff00000
 80068c0:	00000000 	.word	0x00000000
 80068c4:	bff00000 	.word	0xbff00000
 80068c8:	fff00000 	.word	0xfff00000
 80068cc:	7ff00000 	.word	0x7ff00000
 80068d0:	433fffff 	.word	0x433fffff
 80068d4:	3ff00000 	.word	0x3ff00000
 80068d8:	3fefffff 	.word	0x3fefffff
 80068dc:	3fe00000 	.word	0x3fe00000
 80068e0:	43f00000 	.word	0x43f00000
 80068e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006a50 <__ieee754_pow+0x410>)
 80068e6:	f7f9 fccf 	bl	8000288 <__aeabi_dsub>
 80068ea:	a351      	add	r3, pc, #324	@ (adr r3, 8006a30 <__ieee754_pow+0x3f0>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	4604      	mov	r4, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	a34f      	add	r3, pc, #316	@ (adr r3, 8006a38 <__ieee754_pow+0x3f8>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	4606      	mov	r6, r0
 8006900:	460f      	mov	r7, r1
 8006902:	4620      	mov	r0, r4
 8006904:	4629      	mov	r1, r5
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	4b52      	ldr	r3, [pc, #328]	@ (8006a54 <__ieee754_pow+0x414>)
 800690c:	4682      	mov	sl, r0
 800690e:	468b      	mov	fp, r1
 8006910:	2200      	movs	r2, #0
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f7f9 fe6f 	bl	80005f8 <__aeabi_dmul>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	a148      	add	r1, pc, #288	@ (adr r1, 8006a40 <__ieee754_pow+0x400>)
 8006920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006924:	f7f9 fcb0 	bl	8000288 <__aeabi_dsub>
 8006928:	4622      	mov	r2, r4
 800692a:	462b      	mov	r3, r5
 800692c:	f7f9 fe64 	bl	80005f8 <__aeabi_dmul>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	2000      	movs	r0, #0
 8006936:	4948      	ldr	r1, [pc, #288]	@ (8006a58 <__ieee754_pow+0x418>)
 8006938:	f7f9 fca6 	bl	8000288 <__aeabi_dsub>
 800693c:	4622      	mov	r2, r4
 800693e:	4680      	mov	r8, r0
 8006940:	4689      	mov	r9, r1
 8006942:	462b      	mov	r3, r5
 8006944:	4620      	mov	r0, r4
 8006946:	4629      	mov	r1, r5
 8006948:	f7f9 fe56 	bl	80005f8 <__aeabi_dmul>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7f9 fe50 	bl	80005f8 <__aeabi_dmul>
 8006958:	a33b      	add	r3, pc, #236	@ (adr r3, 8006a48 <__ieee754_pow+0x408>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fe4b 	bl	80005f8 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4650      	mov	r0, sl
 8006968:	4659      	mov	r1, fp
 800696a:	f7f9 fc8d 	bl	8000288 <__aeabi_dsub>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fc87 	bl	800028c <__adddf3>
 800697e:	2400      	movs	r4, #0
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	4620      	mov	r0, r4
 8006986:	460d      	mov	r5, r1
 8006988:	f7f9 fc7e 	bl	8000288 <__aeabi_dsub>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	f7f9 fc78 	bl	8000288 <__aeabi_dsub>
 8006998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800699c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069a0:	2300      	movs	r3, #0
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80069a8:	4606      	mov	r6, r0
 80069aa:	460f      	mov	r7, r1
 80069ac:	4652      	mov	r2, sl
 80069ae:	465b      	mov	r3, fp
 80069b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069b4:	f7f9 fc68 	bl	8000288 <__aeabi_dsub>
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	f7f9 fe1c 	bl	80005f8 <__aeabi_dmul>
 80069c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c4:	4680      	mov	r8, r0
 80069c6:	4689      	mov	r9, r1
 80069c8:	4630      	mov	r0, r6
 80069ca:	4639      	mov	r1, r7
 80069cc:	f7f9 fe14 	bl	80005f8 <__aeabi_dmul>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4640      	mov	r0, r8
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7f9 fc58 	bl	800028c <__adddf3>
 80069dc:	4652      	mov	r2, sl
 80069de:	465b      	mov	r3, fp
 80069e0:	4606      	mov	r6, r0
 80069e2:	460f      	mov	r7, r1
 80069e4:	4620      	mov	r0, r4
 80069e6:	4629      	mov	r1, r5
 80069e8:	f7f9 fe06 	bl	80005f8 <__aeabi_dmul>
 80069ec:	460b      	mov	r3, r1
 80069ee:	4602      	mov	r2, r0
 80069f0:	4680      	mov	r8, r0
 80069f2:	4689      	mov	r9, r1
 80069f4:	4630      	mov	r0, r6
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7f9 fc48 	bl	800028c <__adddf3>
 80069fc:	4b17      	ldr	r3, [pc, #92]	@ (8006a5c <__ieee754_pow+0x41c>)
 80069fe:	4299      	cmp	r1, r3
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	468a      	mov	sl, r1
 8006a06:	468b      	mov	fp, r1
 8006a08:	f340 82ef 	ble.w	8006fea <__ieee754_pow+0x9aa>
 8006a0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006a10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006a14:	4303      	orrs	r3, r0
 8006a16:	f000 81e8 	beq.w	8006dea <__ieee754_pow+0x7aa>
 8006a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2300      	movs	r3, #0
 8006a22:	f7fa f85b 	bl	8000adc <__aeabi_dcmplt>
 8006a26:	3800      	subs	r0, #0
 8006a28:	bf18      	it	ne
 8006a2a:	2001      	movne	r0, #1
 8006a2c:	e710      	b.n	8006850 <__ieee754_pow+0x210>
 8006a2e:	bf00      	nop
 8006a30:	60000000 	.word	0x60000000
 8006a34:	3ff71547 	.word	0x3ff71547
 8006a38:	f85ddf44 	.word	0xf85ddf44
 8006a3c:	3e54ae0b 	.word	0x3e54ae0b
 8006a40:	55555555 	.word	0x55555555
 8006a44:	3fd55555 	.word	0x3fd55555
 8006a48:	652b82fe 	.word	0x652b82fe
 8006a4c:	3ff71547 	.word	0x3ff71547
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	3fd00000 	.word	0x3fd00000
 8006a58:	3fe00000 	.word	0x3fe00000
 8006a5c:	408fffff 	.word	0x408fffff
 8006a60:	4bd5      	ldr	r3, [pc, #852]	@ (8006db8 <__ieee754_pow+0x778>)
 8006a62:	402b      	ands	r3, r5
 8006a64:	2200      	movs	r2, #0
 8006a66:	b92b      	cbnz	r3, 8006a74 <__ieee754_pow+0x434>
 8006a68:	4bd4      	ldr	r3, [pc, #848]	@ (8006dbc <__ieee754_pow+0x77c>)
 8006a6a:	f7f9 fdc5 	bl	80005f8 <__aeabi_dmul>
 8006a6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006a72:	468b      	mov	fp, r1
 8006a74:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006a78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006a7c:	4413      	add	r3, r2
 8006a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a80:	4bcf      	ldr	r3, [pc, #828]	@ (8006dc0 <__ieee754_pow+0x780>)
 8006a82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006a86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006a8a:	459b      	cmp	fp, r3
 8006a8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006a90:	dd08      	ble.n	8006aa4 <__ieee754_pow+0x464>
 8006a92:	4bcc      	ldr	r3, [pc, #816]	@ (8006dc4 <__ieee754_pow+0x784>)
 8006a94:	459b      	cmp	fp, r3
 8006a96:	f340 81a5 	ble.w	8006de4 <__ieee754_pow+0x7a4>
 8006a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006aa4:	f04f 0a00 	mov.w	sl, #0
 8006aa8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aae:	4bc6      	ldr	r3, [pc, #792]	@ (8006dc8 <__ieee754_pow+0x788>)
 8006ab0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ab4:	ed93 7b00 	vldr	d7, [r3]
 8006ab8:	4629      	mov	r1, r5
 8006aba:	ec53 2b17 	vmov	r2, r3, d7
 8006abe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ac2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ace:	4606      	mov	r6, r0
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad6:	f7f9 fbd9 	bl	800028c <__adddf3>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	2000      	movs	r0, #0
 8006ae0:	49ba      	ldr	r1, [pc, #744]	@ (8006dcc <__ieee754_pow+0x78c>)
 8006ae2:	f7f9 feb3 	bl	800084c <__aeabi_ddiv>
 8006ae6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006afa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006afe:	106d      	asrs	r5, r5, #1
 8006b00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006b04:	f04f 0b00 	mov.w	fp, #0
 8006b08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006b0c:	4661      	mov	r1, ip
 8006b0e:	2200      	movs	r2, #0
 8006b10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006b14:	4658      	mov	r0, fp
 8006b16:	46e1      	mov	r9, ip
 8006b18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	f7f9 fd6a 	bl	80005f8 <__aeabi_dmul>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fbac 	bl	8000288 <__aeabi_dsub>
 8006b30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b34:	4606      	mov	r6, r0
 8006b36:	460f      	mov	r7, r1
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7f9 fba4 	bl	8000288 <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b48:	f7f9 fb9e 	bl	8000288 <__aeabi_dsub>
 8006b4c:	465a      	mov	r2, fp
 8006b4e:	464b      	mov	r3, r9
 8006b50:	f7f9 fd52 	bl	80005f8 <__aeabi_dmul>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 fb94 	bl	8000288 <__aeabi_dsub>
 8006b60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006b64:	f7f9 fd48 	bl	80005f8 <__aeabi_dmul>
 8006b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b70:	4610      	mov	r0, r2
 8006b72:	4619      	mov	r1, r3
 8006b74:	f7f9 fd40 	bl	80005f8 <__aeabi_dmul>
 8006b78:	a37d      	add	r3, pc, #500	@ (adr r3, 8006d70 <__ieee754_pow+0x730>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	4604      	mov	r4, r0
 8006b80:	460d      	mov	r5, r1
 8006b82:	f7f9 fd39 	bl	80005f8 <__aeabi_dmul>
 8006b86:	a37c      	add	r3, pc, #496	@ (adr r3, 8006d78 <__ieee754_pow+0x738>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fb7e 	bl	800028c <__adddf3>
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	f7f9 fd30 	bl	80005f8 <__aeabi_dmul>
 8006b98:	a379      	add	r3, pc, #484	@ (adr r3, 8006d80 <__ieee754_pow+0x740>)
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f7f9 fb75 	bl	800028c <__adddf3>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	f7f9 fd27 	bl	80005f8 <__aeabi_dmul>
 8006baa:	a377      	add	r3, pc, #476	@ (adr r3, 8006d88 <__ieee754_pow+0x748>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f7f9 fb6c 	bl	800028c <__adddf3>
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	a374      	add	r3, pc, #464	@ (adr r3, 8006d90 <__ieee754_pow+0x750>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fb63 	bl	800028c <__adddf3>
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	f7f9 fd15 	bl	80005f8 <__aeabi_dmul>
 8006bce:	a372      	add	r3, pc, #456	@ (adr r3, 8006d98 <__ieee754_pow+0x758>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f7f9 fb5a 	bl	800028c <__adddf3>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460f      	mov	r7, r1
 8006bde:	462b      	mov	r3, r5
 8006be0:	4620      	mov	r0, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7f9 fd08 	bl	80005f8 <__aeabi_dmul>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4630      	mov	r0, r6
 8006bee:	4639      	mov	r1, r7
 8006bf0:	f7f9 fd02 	bl	80005f8 <__aeabi_dmul>
 8006bf4:	465a      	mov	r2, fp
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c00:	f7f9 fb44 	bl	800028c <__adddf3>
 8006c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	462b      	mov	r3, r5
 8006c10:	f7f9 fb3c 	bl	800028c <__adddf3>
 8006c14:	465a      	mov	r2, fp
 8006c16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	4658      	mov	r0, fp
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f7f9 fcea 	bl	80005f8 <__aeabi_dmul>
 8006c24:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <__ieee754_pow+0x790>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	f7f9 fb2e 	bl	800028c <__adddf3>
 8006c30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c34:	f7f9 fb2a 	bl	800028c <__adddf3>
 8006c38:	46d8      	mov	r8, fp
 8006c3a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006c3e:	460d      	mov	r5, r1
 8006c40:	465a      	mov	r2, fp
 8006c42:	460b      	mov	r3, r1
 8006c44:	4640      	mov	r0, r8
 8006c46:	4649      	mov	r1, r9
 8006c48:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006c4c:	f7f9 fcd4 	bl	80005f8 <__aeabi_dmul>
 8006c50:	465c      	mov	r4, fp
 8006c52:	4680      	mov	r8, r0
 8006c54:	4689      	mov	r9, r1
 8006c56:	4b5e      	ldr	r3, [pc, #376]	@ (8006dd0 <__ieee754_pow+0x790>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fb13 	bl	8000288 <__aeabi_dsub>
 8006c62:	4632      	mov	r2, r6
 8006c64:	463b      	mov	r3, r7
 8006c66:	f7f9 fb0f 	bl	8000288 <__aeabi_dsub>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c72:	f7f9 fb09 	bl	8000288 <__aeabi_dsub>
 8006c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7a:	f7f9 fcbd 	bl	80005f8 <__aeabi_dmul>
 8006c7e:	4622      	mov	r2, r4
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	462b      	mov	r3, r5
 8006c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c8a:	f7f9 fcb5 	bl	80005f8 <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 faf9 	bl	800028c <__adddf3>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	f7f9 faf1 	bl	800028c <__adddf3>
 8006caa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006cae:	a33c      	add	r3, pc, #240	@ (adr r3, 8006da0 <__ieee754_pow+0x760>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006cba:	460d      	mov	r5, r1
 8006cbc:	f7f9 fc9c 	bl	80005f8 <__aeabi_dmul>
 8006cc0:	465c      	mov	r4, fp
 8006cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	464b      	mov	r3, r9
 8006cca:	4620      	mov	r0, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7f9 fadb 	bl	8000288 <__aeabi_dsub>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fad5 	bl	8000288 <__aeabi_dsub>
 8006cde:	a332      	add	r3, pc, #200	@ (adr r3, 8006da8 <__ieee754_pow+0x768>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 fc88 	bl	80005f8 <__aeabi_dmul>
 8006ce8:	a331      	add	r3, pc, #196	@ (adr r3, 8006db0 <__ieee754_pow+0x770>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fac3 	bl	800028c <__adddf3>
 8006d06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d08:	4b32      	ldr	r3, [pc, #200]	@ (8006dd4 <__ieee754_pow+0x794>)
 8006d0a:	4413      	add	r3, r2
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f7f9 fabc 	bl	800028c <__adddf3>
 8006d14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d1a:	f7f9 fc03 	bl	8000524 <__aeabi_i2d>
 8006d1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d20:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd8 <__ieee754_pow+0x798>)
 8006d22:	4413      	add	r3, r2
 8006d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d28:	4606      	mov	r6, r0
 8006d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d2e:	460f      	mov	r7, r1
 8006d30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d34:	f7f9 faaa 	bl	800028c <__adddf3>
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f7f9 faa6 	bl	800028c <__adddf3>
 8006d40:	4632      	mov	r2, r6
 8006d42:	463b      	mov	r3, r7
 8006d44:	f7f9 faa2 	bl	800028c <__adddf3>
 8006d48:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	4658      	mov	r0, fp
 8006d52:	460d      	mov	r5, r1
 8006d54:	f7f9 fa98 	bl	8000288 <__aeabi_dsub>
 8006d58:	4642      	mov	r2, r8
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	f7f9 fa94 	bl	8000288 <__aeabi_dsub>
 8006d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d64:	f7f9 fa90 	bl	8000288 <__aeabi_dsub>
 8006d68:	465c      	mov	r4, fp
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	e036      	b.n	8006ddc <__ieee754_pow+0x79c>
 8006d6e:	bf00      	nop
 8006d70:	4a454eef 	.word	0x4a454eef
 8006d74:	3fca7e28 	.word	0x3fca7e28
 8006d78:	93c9db65 	.word	0x93c9db65
 8006d7c:	3fcd864a 	.word	0x3fcd864a
 8006d80:	a91d4101 	.word	0xa91d4101
 8006d84:	3fd17460 	.word	0x3fd17460
 8006d88:	518f264d 	.word	0x518f264d
 8006d8c:	3fd55555 	.word	0x3fd55555
 8006d90:	db6fabff 	.word	0xdb6fabff
 8006d94:	3fdb6db6 	.word	0x3fdb6db6
 8006d98:	33333303 	.word	0x33333303
 8006d9c:	3fe33333 	.word	0x3fe33333
 8006da0:	e0000000 	.word	0xe0000000
 8006da4:	3feec709 	.word	0x3feec709
 8006da8:	dc3a03fd 	.word	0xdc3a03fd
 8006dac:	3feec709 	.word	0x3feec709
 8006db0:	145b01f5 	.word	0x145b01f5
 8006db4:	be3e2fe0 	.word	0xbe3e2fe0
 8006db8:	7ff00000 	.word	0x7ff00000
 8006dbc:	43400000 	.word	0x43400000
 8006dc0:	0003988e 	.word	0x0003988e
 8006dc4:	000bb679 	.word	0x000bb679
 8006dc8:	080077f8 	.word	0x080077f8
 8006dcc:	3ff00000 	.word	0x3ff00000
 8006dd0:	40080000 	.word	0x40080000
 8006dd4:	080077d8 	.word	0x080077d8
 8006dd8:	080077e8 	.word	0x080077e8
 8006ddc:	460b      	mov	r3, r1
 8006dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006de2:	e5d7      	b.n	8006994 <__ieee754_pow+0x354>
 8006de4:	f04f 0a01 	mov.w	sl, #1
 8006de8:	e65e      	b.n	8006aa8 <__ieee754_pow+0x468>
 8006dea:	a3b4      	add	r3, pc, #720	@ (adr r3, 80070bc <__ieee754_pow+0xa7c>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fa4a 	bl	800028c <__adddf3>
 8006df8:	4642      	mov	r2, r8
 8006dfa:	e9cd 0100 	strd	r0, r1, [sp]
 8006dfe:	464b      	mov	r3, r9
 8006e00:	4620      	mov	r0, r4
 8006e02:	4629      	mov	r1, r5
 8006e04:	f7f9 fa40 	bl	8000288 <__aeabi_dsub>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e10:	f7f9 fe82 	bl	8000b18 <__aeabi_dcmpgt>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f47f ae00 	bne.w	8006a1a <__ieee754_pow+0x3da>
 8006e1a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006e1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006e22:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006e26:	fa43 fa0a 	asr.w	sl, r3, sl
 8006e2a:	44da      	add	sl, fp
 8006e2c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006e30:	489d      	ldr	r0, [pc, #628]	@ (80070a8 <__ieee754_pow+0xa68>)
 8006e32:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006e36:	4108      	asrs	r0, r1
 8006e38:	ea00 030a 	and.w	r3, r0, sl
 8006e3c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006e40:	f1c1 0114 	rsb	r1, r1, #20
 8006e44:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006e48:	fa4a fa01 	asr.w	sl, sl, r1
 8006e4c:	f1bb 0f00 	cmp.w	fp, #0
 8006e50:	4640      	mov	r0, r8
 8006e52:	4649      	mov	r1, r9
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	bfb8      	it	lt
 8006e5a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e5e:	f7f9 fa13 	bl	8000288 <__aeabi_dsub>
 8006e62:	4680      	mov	r8, r0
 8006e64:	4689      	mov	r9, r1
 8006e66:	4632      	mov	r2, r6
 8006e68:	463b      	mov	r3, r7
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	f7f9 fa0d 	bl	800028c <__adddf3>
 8006e72:	2400      	movs	r4, #0
 8006e74:	a37c      	add	r3, pc, #496	@ (adr r3, 8007068 <__ieee754_pow+0xa28>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	4642      	mov	r2, r8
 8006e84:	e9cd 0100 	strd	r0, r1, [sp]
 8006e88:	464b      	mov	r3, r9
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f7f9 f9fb 	bl	8000288 <__aeabi_dsub>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4630      	mov	r0, r6
 8006e98:	4639      	mov	r1, r7
 8006e9a:	f7f9 f9f5 	bl	8000288 <__aeabi_dsub>
 8006e9e:	a374      	add	r3, pc, #464	@ (adr r3, 8007070 <__ieee754_pow+0xa30>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	a373      	add	r3, pc, #460	@ (adr r3, 8007078 <__ieee754_pow+0xa38>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	f7f9 fb9f 	bl	80005f8 <__aeabi_dmul>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 f9e3 	bl	800028c <__adddf3>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	460d      	mov	r5, r1
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ed2:	f7f9 f9db 	bl	800028c <__adddf3>
 8006ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eda:	4680      	mov	r8, r0
 8006edc:	4689      	mov	r9, r1
 8006ede:	f7f9 f9d3 	bl	8000288 <__aeabi_dsub>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 f9cd 	bl	8000288 <__aeabi_dsub>
 8006eee:	4642      	mov	r2, r8
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	460f      	mov	r7, r1
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 fb7d 	bl	80005f8 <__aeabi_dmul>
 8006efe:	a360      	add	r3, pc, #384	@ (adr r3, 8007080 <__ieee754_pow+0xa40>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	4604      	mov	r4, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	f7f9 fb76 	bl	80005f8 <__aeabi_dmul>
 8006f0c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007088 <__ieee754_pow+0xa48>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 f9b9 	bl	8000288 <__aeabi_dsub>
 8006f16:	4622      	mov	r2, r4
 8006f18:	462b      	mov	r3, r5
 8006f1a:	f7f9 fb6d 	bl	80005f8 <__aeabi_dmul>
 8006f1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007090 <__ieee754_pow+0xa50>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f7f9 f9b2 	bl	800028c <__adddf3>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	f7f9 fb64 	bl	80005f8 <__aeabi_dmul>
 8006f30:	a359      	add	r3, pc, #356	@ (adr r3, 8007098 <__ieee754_pow+0xa58>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	f7f9 fb5b 	bl	80005f8 <__aeabi_dmul>
 8006f42:	a357      	add	r3, pc, #348	@ (adr r3, 80070a0 <__ieee754_pow+0xa60>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f7f9 f9a0 	bl	800028c <__adddf3>
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	462b      	mov	r3, r5
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7f9 f994 	bl	8000288 <__aeabi_dsub>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 fb44 	bl	80005f8 <__aeabi_dmul>
 8006f70:	2200      	movs	r2, #0
 8006f72:	e9cd 0100 	strd	r0, r1, [sp]
 8006f76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 f983 	bl	8000288 <__aeabi_dsub>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f8a:	f7f9 fc5f 	bl	800084c <__aeabi_ddiv>
 8006f8e:	4632      	mov	r2, r6
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	463b      	mov	r3, r7
 8006f96:	4640      	mov	r0, r8
 8006f98:	4649      	mov	r1, r9
 8006f9a:	f7f9 fb2d 	bl	80005f8 <__aeabi_dmul>
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	f7f9 f973 	bl	800028c <__adddf3>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4620      	mov	r0, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	f7f9 f96b 	bl	8000288 <__aeabi_dsub>
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	f7f9 f967 	bl	8000288 <__aeabi_dsub>
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	493b      	ldr	r1, [pc, #236]	@ (80070ac <__ieee754_pow+0xa6c>)
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f7f9 f961 	bl	8000288 <__aeabi_dsub>
 8006fc6:	ec41 0b10 	vmov	d0, r0, r1
 8006fca:	ee10 3a90 	vmov	r3, s1
 8006fce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fd6:	da30      	bge.n	800703a <__ieee754_pow+0x9fa>
 8006fd8:	4650      	mov	r0, sl
 8006fda:	f000 f87d 	bl	80070d8 <scalbn>
 8006fde:	ec51 0b10 	vmov	r0, r1, d0
 8006fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fe6:	f7ff bbd2 	b.w	800678e <__ieee754_pow+0x14e>
 8006fea:	4c31      	ldr	r4, [pc, #196]	@ (80070b0 <__ieee754_pow+0xa70>)
 8006fec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d91a      	bls.n	800702a <__ieee754_pow+0x9ea>
 8006ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80070b4 <__ieee754_pow+0xa74>)
 8006ff6:	440b      	add	r3, r1
 8006ff8:	4303      	orrs	r3, r0
 8006ffa:	d009      	beq.n	8007010 <__ieee754_pow+0x9d0>
 8006ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	2300      	movs	r3, #0
 8007004:	f7f9 fd6a 	bl	8000adc <__aeabi_dcmplt>
 8007008:	3800      	subs	r0, #0
 800700a:	bf18      	it	ne
 800700c:	2001      	movne	r0, #1
 800700e:	e42b      	b.n	8006868 <__ieee754_pow+0x228>
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	f7f9 f938 	bl	8000288 <__aeabi_dsub>
 8007018:	4632      	mov	r2, r6
 800701a:	463b      	mov	r3, r7
 800701c:	f7f9 fd72 	bl	8000b04 <__aeabi_dcmpge>
 8007020:	2800      	cmp	r0, #0
 8007022:	d1eb      	bne.n	8006ffc <__ieee754_pow+0x9bc>
 8007024:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80070c4 <__ieee754_pow+0xa84>
 8007028:	e6f7      	b.n	8006e1a <__ieee754_pow+0x7da>
 800702a:	469a      	mov	sl, r3
 800702c:	4b22      	ldr	r3, [pc, #136]	@ (80070b8 <__ieee754_pow+0xa78>)
 800702e:	459a      	cmp	sl, r3
 8007030:	f63f aef3 	bhi.w	8006e1a <__ieee754_pow+0x7da>
 8007034:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007038:	e715      	b.n	8006e66 <__ieee754_pow+0x826>
 800703a:	ec51 0b10 	vmov	r0, r1, d0
 800703e:	4619      	mov	r1, r3
 8007040:	e7cf      	b.n	8006fe2 <__ieee754_pow+0x9a2>
 8007042:	491a      	ldr	r1, [pc, #104]	@ (80070ac <__ieee754_pow+0xa6c>)
 8007044:	2000      	movs	r0, #0
 8007046:	f7ff bb18 	b.w	800667a <__ieee754_pow+0x3a>
 800704a:	2000      	movs	r0, #0
 800704c:	2100      	movs	r1, #0
 800704e:	f7ff bb14 	b.w	800667a <__ieee754_pow+0x3a>
 8007052:	4630      	mov	r0, r6
 8007054:	4639      	mov	r1, r7
 8007056:	f7ff bb10 	b.w	800667a <__ieee754_pow+0x3a>
 800705a:	460c      	mov	r4, r1
 800705c:	f7ff bb5e 	b.w	800671c <__ieee754_pow+0xdc>
 8007060:	2400      	movs	r4, #0
 8007062:	f7ff bb49 	b.w	80066f8 <__ieee754_pow+0xb8>
 8007066:	bf00      	nop
 8007068:	00000000 	.word	0x00000000
 800706c:	3fe62e43 	.word	0x3fe62e43
 8007070:	fefa39ef 	.word	0xfefa39ef
 8007074:	3fe62e42 	.word	0x3fe62e42
 8007078:	0ca86c39 	.word	0x0ca86c39
 800707c:	be205c61 	.word	0xbe205c61
 8007080:	72bea4d0 	.word	0x72bea4d0
 8007084:	3e663769 	.word	0x3e663769
 8007088:	c5d26bf1 	.word	0xc5d26bf1
 800708c:	3ebbbd41 	.word	0x3ebbbd41
 8007090:	af25de2c 	.word	0xaf25de2c
 8007094:	3f11566a 	.word	0x3f11566a
 8007098:	16bebd93 	.word	0x16bebd93
 800709c:	3f66c16c 	.word	0x3f66c16c
 80070a0:	5555553e 	.word	0x5555553e
 80070a4:	3fc55555 	.word	0x3fc55555
 80070a8:	fff00000 	.word	0xfff00000
 80070ac:	3ff00000 	.word	0x3ff00000
 80070b0:	4090cbff 	.word	0x4090cbff
 80070b4:	3f6f3400 	.word	0x3f6f3400
 80070b8:	3fe00000 	.word	0x3fe00000
 80070bc:	652b82fe 	.word	0x652b82fe
 80070c0:	3c971547 	.word	0x3c971547
 80070c4:	4090cc00 	.word	0x4090cc00

080070c8 <fabs>:
 80070c8:	ec51 0b10 	vmov	r0, r1, d0
 80070cc:	4602      	mov	r2, r0
 80070ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80070d2:	ec43 2b10 	vmov	d0, r2, r3
 80070d6:	4770      	bx	lr

080070d8 <scalbn>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	ec55 4b10 	vmov	r4, r5, d0
 80070de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80070e2:	4606      	mov	r6, r0
 80070e4:	462b      	mov	r3, r5
 80070e6:	b991      	cbnz	r1, 800710e <scalbn+0x36>
 80070e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80070ec:	4323      	orrs	r3, r4
 80070ee:	d03d      	beq.n	800716c <scalbn+0x94>
 80070f0:	4b35      	ldr	r3, [pc, #212]	@ (80071c8 <scalbn+0xf0>)
 80070f2:	4620      	mov	r0, r4
 80070f4:	4629      	mov	r1, r5
 80070f6:	2200      	movs	r2, #0
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	4b33      	ldr	r3, [pc, #204]	@ (80071cc <scalbn+0xf4>)
 80070fe:	429e      	cmp	r6, r3
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	da0f      	bge.n	8007126 <scalbn+0x4e>
 8007106:	a328      	add	r3, pc, #160	@ (adr r3, 80071a8 <scalbn+0xd0>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	e01e      	b.n	800714c <scalbn+0x74>
 800710e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007112:	4291      	cmp	r1, r2
 8007114:	d10b      	bne.n	800712e <scalbn+0x56>
 8007116:	4622      	mov	r2, r4
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	f7f9 f8b6 	bl	800028c <__adddf3>
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	e022      	b.n	800716c <scalbn+0x94>
 8007126:	460b      	mov	r3, r1
 8007128:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800712c:	3936      	subs	r1, #54	@ 0x36
 800712e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007132:	4296      	cmp	r6, r2
 8007134:	dd0d      	ble.n	8007152 <scalbn+0x7a>
 8007136:	2d00      	cmp	r5, #0
 8007138:	a11d      	add	r1, pc, #116	@ (adr r1, 80071b0 <scalbn+0xd8>)
 800713a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800713e:	da02      	bge.n	8007146 <scalbn+0x6e>
 8007140:	a11d      	add	r1, pc, #116	@ (adr r1, 80071b8 <scalbn+0xe0>)
 8007142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007146:	a31a      	add	r3, pc, #104	@ (adr r3, 80071b0 <scalbn+0xd8>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 fa54 	bl	80005f8 <__aeabi_dmul>
 8007150:	e7e6      	b.n	8007120 <scalbn+0x48>
 8007152:	1872      	adds	r2, r6, r1
 8007154:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007158:	428a      	cmp	r2, r1
 800715a:	dcec      	bgt.n	8007136 <scalbn+0x5e>
 800715c:	2a00      	cmp	r2, #0
 800715e:	dd08      	ble.n	8007172 <scalbn+0x9a>
 8007160:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007164:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007168:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800716c:	ec45 4b10 	vmov	d0, r4, r5
 8007170:	bd70      	pop	{r4, r5, r6, pc}
 8007172:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007176:	da08      	bge.n	800718a <scalbn+0xb2>
 8007178:	2d00      	cmp	r5, #0
 800717a:	a10b      	add	r1, pc, #44	@ (adr r1, 80071a8 <scalbn+0xd0>)
 800717c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007180:	dac1      	bge.n	8007106 <scalbn+0x2e>
 8007182:	a10f      	add	r1, pc, #60	@ (adr r1, 80071c0 <scalbn+0xe8>)
 8007184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007188:	e7bd      	b.n	8007106 <scalbn+0x2e>
 800718a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800718e:	3236      	adds	r2, #54	@ 0x36
 8007190:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007194:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007198:	4620      	mov	r0, r4
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <scalbn+0xf8>)
 800719c:	4629      	mov	r1, r5
 800719e:	2200      	movs	r2, #0
 80071a0:	e7d4      	b.n	800714c <scalbn+0x74>
 80071a2:	bf00      	nop
 80071a4:	f3af 8000 	nop.w
 80071a8:	c2f8f359 	.word	0xc2f8f359
 80071ac:	01a56e1f 	.word	0x01a56e1f
 80071b0:	8800759c 	.word	0x8800759c
 80071b4:	7e37e43c 	.word	0x7e37e43c
 80071b8:	8800759c 	.word	0x8800759c
 80071bc:	fe37e43c 	.word	0xfe37e43c
 80071c0:	c2f8f359 	.word	0xc2f8f359
 80071c4:	81a56e1f 	.word	0x81a56e1f
 80071c8:	43500000 	.word	0x43500000
 80071cc:	ffff3cb0 	.word	0xffff3cb0
 80071d0:	3c900000 	.word	0x3c900000

080071d4 <with_errno>:
 80071d4:	b510      	push	{r4, lr}
 80071d6:	ed2d 8b02 	vpush	{d8}
 80071da:	eeb0 8a40 	vmov.f32	s16, s0
 80071de:	eef0 8a60 	vmov.f32	s17, s1
 80071e2:	4604      	mov	r4, r0
 80071e4:	f7fd f938 	bl	8004458 <__errno>
 80071e8:	eeb0 0a48 	vmov.f32	s0, s16
 80071ec:	eef0 0a68 	vmov.f32	s1, s17
 80071f0:	ecbd 8b02 	vpop	{d8}
 80071f4:	6004      	str	r4, [r0, #0]
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <xflow>:
 80071f8:	4603      	mov	r3, r0
 80071fa:	b507      	push	{r0, r1, r2, lr}
 80071fc:	ec51 0b10 	vmov	r0, r1, d0
 8007200:	b183      	cbz	r3, 8007224 <xflow+0x2c>
 8007202:	4602      	mov	r2, r0
 8007204:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007208:	e9cd 2300 	strd	r2, r3, [sp]
 800720c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007210:	f7f9 f9f2 	bl	80005f8 <__aeabi_dmul>
 8007214:	ec41 0b10 	vmov	d0, r0, r1
 8007218:	2022      	movs	r0, #34	@ 0x22
 800721a:	b003      	add	sp, #12
 800721c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007220:	f7ff bfd8 	b.w	80071d4 <with_errno>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	e7ee      	b.n	8007208 <xflow+0x10>
 800722a:	0000      	movs	r0, r0
 800722c:	0000      	movs	r0, r0
	...

08007230 <__math_uflow>:
 8007230:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007238 <__math_uflow+0x8>
 8007234:	f7ff bfe0 	b.w	80071f8 <xflow>
 8007238:	00000000 	.word	0x00000000
 800723c:	10000000 	.word	0x10000000

08007240 <__math_oflow>:
 8007240:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007248 <__math_oflow+0x8>
 8007244:	f7ff bfd8 	b.w	80071f8 <xflow>
 8007248:	00000000 	.word	0x00000000
 800724c:	70000000 	.word	0x70000000

08007250 <__ieee754_sqrt>:
 8007250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	4a68      	ldr	r2, [pc, #416]	@ (80073f8 <__ieee754_sqrt+0x1a8>)
 8007256:	ec55 4b10 	vmov	r4, r5, d0
 800725a:	43aa      	bics	r2, r5
 800725c:	462b      	mov	r3, r5
 800725e:	4621      	mov	r1, r4
 8007260:	d110      	bne.n	8007284 <__ieee754_sqrt+0x34>
 8007262:	4622      	mov	r2, r4
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4620      	mov	r0, r4
 8007272:	4629      	mov	r1, r5
 8007274:	f7f9 f80a 	bl	800028c <__adddf3>
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	ec45 4b10 	vmov	d0, r4, r5
 8007280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	2d00      	cmp	r5, #0
 8007286:	dc0e      	bgt.n	80072a6 <__ieee754_sqrt+0x56>
 8007288:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800728c:	4322      	orrs	r2, r4
 800728e:	d0f5      	beq.n	800727c <__ieee754_sqrt+0x2c>
 8007290:	b19d      	cbz	r5, 80072ba <__ieee754_sqrt+0x6a>
 8007292:	4622      	mov	r2, r4
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f8 fff6 	bl	8000288 <__aeabi_dsub>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	f7f9 fad4 	bl	800084c <__aeabi_ddiv>
 80072a4:	e7e8      	b.n	8007278 <__ieee754_sqrt+0x28>
 80072a6:	152a      	asrs	r2, r5, #20
 80072a8:	d115      	bne.n	80072d6 <__ieee754_sqrt+0x86>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e009      	b.n	80072c2 <__ieee754_sqrt+0x72>
 80072ae:	0acb      	lsrs	r3, r1, #11
 80072b0:	3a15      	subs	r2, #21
 80072b2:	0549      	lsls	r1, r1, #21
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0fa      	beq.n	80072ae <__ieee754_sqrt+0x5e>
 80072b8:	e7f7      	b.n	80072aa <__ieee754_sqrt+0x5a>
 80072ba:	462a      	mov	r2, r5
 80072bc:	e7fa      	b.n	80072b4 <__ieee754_sqrt+0x64>
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	3001      	adds	r0, #1
 80072c2:	02dc      	lsls	r4, r3, #11
 80072c4:	d5fb      	bpl.n	80072be <__ieee754_sqrt+0x6e>
 80072c6:	1e44      	subs	r4, r0, #1
 80072c8:	1b12      	subs	r2, r2, r4
 80072ca:	f1c0 0420 	rsb	r4, r0, #32
 80072ce:	fa21 f404 	lsr.w	r4, r1, r4
 80072d2:	4323      	orrs	r3, r4
 80072d4:	4081      	lsls	r1, r0
 80072d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80072de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072e2:	07d2      	lsls	r2, r2, #31
 80072e4:	bf5c      	itt	pl
 80072e6:	005b      	lslpl	r3, r3, #1
 80072e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80072ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072f0:	bf58      	it	pl
 80072f2:	0049      	lslpl	r1, r1, #1
 80072f4:	2600      	movs	r6, #0
 80072f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80072fa:	106d      	asrs	r5, r5, #1
 80072fc:	0049      	lsls	r1, r1, #1
 80072fe:	2016      	movs	r0, #22
 8007300:	4632      	mov	r2, r6
 8007302:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007306:	1917      	adds	r7, r2, r4
 8007308:	429f      	cmp	r7, r3
 800730a:	bfde      	ittt	le
 800730c:	193a      	addle	r2, r7, r4
 800730e:	1bdb      	suble	r3, r3, r7
 8007310:	1936      	addle	r6, r6, r4
 8007312:	0fcf      	lsrs	r7, r1, #31
 8007314:	3801      	subs	r0, #1
 8007316:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800731a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800731e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007322:	d1f0      	bne.n	8007306 <__ieee754_sqrt+0xb6>
 8007324:	4604      	mov	r4, r0
 8007326:	2720      	movs	r7, #32
 8007328:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800732c:	429a      	cmp	r2, r3
 800732e:	eb00 0e0c 	add.w	lr, r0, ip
 8007332:	db02      	blt.n	800733a <__ieee754_sqrt+0xea>
 8007334:	d113      	bne.n	800735e <__ieee754_sqrt+0x10e>
 8007336:	458e      	cmp	lr, r1
 8007338:	d811      	bhi.n	800735e <__ieee754_sqrt+0x10e>
 800733a:	f1be 0f00 	cmp.w	lr, #0
 800733e:	eb0e 000c 	add.w	r0, lr, ip
 8007342:	da42      	bge.n	80073ca <__ieee754_sqrt+0x17a>
 8007344:	2800      	cmp	r0, #0
 8007346:	db40      	blt.n	80073ca <__ieee754_sqrt+0x17a>
 8007348:	f102 0801 	add.w	r8, r2, #1
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	458e      	cmp	lr, r1
 8007350:	bf88      	it	hi
 8007352:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007356:	eba1 010e 	sub.w	r1, r1, lr
 800735a:	4464      	add	r4, ip
 800735c:	4642      	mov	r2, r8
 800735e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007362:	3f01      	subs	r7, #1
 8007364:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007368:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800736c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007370:	d1dc      	bne.n	800732c <__ieee754_sqrt+0xdc>
 8007372:	4319      	orrs	r1, r3
 8007374:	d01b      	beq.n	80073ae <__ieee754_sqrt+0x15e>
 8007376:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80073fc <__ieee754_sqrt+0x1ac>
 800737a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007400 <__ieee754_sqrt+0x1b0>
 800737e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007382:	e9db 2300 	ldrd	r2, r3, [fp]
 8007386:	f7f8 ff7f 	bl	8000288 <__aeabi_dsub>
 800738a:	e9da 8900 	ldrd	r8, r9, [sl]
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 fbab 	bl	8000af0 <__aeabi_dcmple>
 800739a:	b140      	cbz	r0, 80073ae <__ieee754_sqrt+0x15e>
 800739c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80073a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80073a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80073a8:	d111      	bne.n	80073ce <__ieee754_sqrt+0x17e>
 80073aa:	3601      	adds	r6, #1
 80073ac:	463c      	mov	r4, r7
 80073ae:	1072      	asrs	r2, r6, #1
 80073b0:	0863      	lsrs	r3, r4, #1
 80073b2:	07f1      	lsls	r1, r6, #31
 80073b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80073b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80073bc:	bf48      	it	mi
 80073be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80073c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80073c6:	4618      	mov	r0, r3
 80073c8:	e756      	b.n	8007278 <__ieee754_sqrt+0x28>
 80073ca:	4690      	mov	r8, r2
 80073cc:	e7be      	b.n	800734c <__ieee754_sqrt+0xfc>
 80073ce:	f7f8 ff5d 	bl	800028c <__adddf3>
 80073d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 fb7d 	bl	8000adc <__aeabi_dcmplt>
 80073e2:	b120      	cbz	r0, 80073ee <__ieee754_sqrt+0x19e>
 80073e4:	1ca0      	adds	r0, r4, #2
 80073e6:	bf08      	it	eq
 80073e8:	3601      	addeq	r6, #1
 80073ea:	3402      	adds	r4, #2
 80073ec:	e7df      	b.n	80073ae <__ieee754_sqrt+0x15e>
 80073ee:	1c63      	adds	r3, r4, #1
 80073f0:	f023 0401 	bic.w	r4, r3, #1
 80073f4:	e7db      	b.n	80073ae <__ieee754_sqrt+0x15e>
 80073f6:	bf00      	nop
 80073f8:	7ff00000 	.word	0x7ff00000
 80073fc:	200001e0 	.word	0x200001e0
 8007400:	200001d8 	.word	0x200001d8

08007404 <_init>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr

08007410 <_fini>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr
